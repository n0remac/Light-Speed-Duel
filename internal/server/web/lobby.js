"use strict";
(() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // web/src/bus.ts
  function createEventBus() {
    const handlers = /* @__PURE__ */ new Map();
    return {
      on(event, handler) {
        let set = handlers.get(event);
        if (!set) {
          set = /* @__PURE__ */ new Set();
          handlers.set(event, set);
        }
        set.add(handler);
        return () => set.delete(handler);
      },
      emit(event, payload) {
        const set = handlers.get(event);
        if (!set || set.size === 0) return;
        for (const fn of set) {
          try {
            fn(payload);
          } catch (err) {
            console.error(`[bus] handler for ${event} failed`, err);
          }
        }
      }
    };
  }
  var init_bus = __esm({
    "web/src/bus.ts"() {
      "use strict";
    }
  });

  // web/src/state.ts
  function clampProgress(value) {
    if (!Number.isFinite(value)) {
      return 0;
    }
    if (value <= 0) return 0;
    if (value >= 1) return 1;
    return value;
  }
  function createInitialState(limits = {
    speedMin: MISSILE_MIN_SPEED,
    speedMax: MISSILE_MAX_SPEED,
    agroMin: MISSILE_MIN_AGRO
  }) {
    return {
      now: 0,
      nowSyncedAt: typeof performance !== "undefined" && typeof performance.now === "function" ? performance.now() : Date.now(),
      me: null,
      ghosts: [],
      missiles: [],
      missileRoutes: [],
      activeMissileRouteId: null,
      nextMissileReadyAt: 0,
      missileConfig: {
        speed: 180,
        agroRadius: 800,
        lifetime: missileLifetimeFor(180, 800, limits),
        heatParams: MISSILE_PRESETS[1].heatParams
        // Default to Hunter preset
      },
      missileLimits: limits,
      worldMeta: {},
      inventory: null,
      dag: null,
      mission: null,
      story: null,
      craftHeatCapacity: 80,
      // Default to basic missile heat capacity
      capabilities: null
    };
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function missileLifetimeFor(speed, agroRadius, limits = {
    speedMin: MISSILE_MIN_SPEED,
    speedMax: MISSILE_MAX_SPEED,
    agroMin: MISSILE_MIN_AGRO
  }) {
    const minSpeed = Number.isFinite(limits.speedMin) ? limits.speedMin : MISSILE_MIN_SPEED;
    const maxSpeed = Number.isFinite(limits.speedMax) ? limits.speedMax : MISSILE_MAX_SPEED;
    const minAgro = Number.isFinite(limits.agroMin) ? limits.agroMin : MISSILE_MIN_AGRO;
    const span = maxSpeed - minSpeed;
    const speedNorm = span > 0 ? clamp((speed - minSpeed) / span, 0, 1) : 0;
    const adjustedAgro = Math.max(0, agroRadius - minAgro);
    const agroNorm = clamp(adjustedAgro / MISSILE_LIFETIME_AGRO_REF, 0, 1);
    const reduction = speedNorm * MISSILE_LIFETIME_SPEED_PENALTY + agroNorm * MISSILE_LIFETIME_AGRO_PENALTY;
    const base = MISSILE_MAX_LIFETIME;
    return clamp(base - reduction, MISSILE_MIN_LIFETIME, MISSILE_MAX_LIFETIME);
  }
  function sanitizeMissileConfig(cfg, fallback, limits) {
    var _a, _b, _c, _d;
    const minSpeed = Number.isFinite(limits.speedMin) ? limits.speedMin : MISSILE_MIN_SPEED;
    const maxSpeed = Number.isFinite(limits.speedMax) ? limits.speedMax : MISSILE_MAX_SPEED;
    const minAgro = Number.isFinite(limits.agroMin) ? limits.agroMin : MISSILE_MIN_AGRO;
    const base = fallback != null ? fallback : {
      speed: minSpeed,
      agroRadius: minAgro,
      lifetime: missileLifetimeFor(minSpeed, minAgro, limits)
    };
    const mergedSpeed = Number.isFinite((_a = cfg.speed) != null ? _a : base.speed) ? (_b = cfg.speed) != null ? _b : base.speed : base.speed;
    const mergedAgro = Number.isFinite((_c = cfg.agroRadius) != null ? _c : base.agroRadius) ? (_d = cfg.agroRadius) != null ? _d : base.agroRadius : base.agroRadius;
    const speed = clamp(mergedSpeed, minSpeed, maxSpeed);
    const agroRadius = Math.max(minAgro, mergedAgro);
    const heatParams = cfg.heatParams ? { ...cfg.heatParams } : base.heatParams ? { ...base.heatParams } : void 0;
    return {
      speed,
      agroRadius,
      lifetime: missileLifetimeFor(speed, agroRadius, limits),
      heatParams
    };
  }
  function monotonicNow() {
    if (typeof performance !== "undefined" && typeof performance.now === "function") {
      return performance.now();
    }
    return Date.now();
  }
  function updateMissileLimits(state, limits) {
    state.missileLimits = {
      speedMin: Number.isFinite(limits.speedMin) ? limits.speedMin : state.missileLimits.speedMin,
      speedMax: Number.isFinite(limits.speedMax) ? limits.speedMax : state.missileLimits.speedMax,
      agroMin: Number.isFinite(limits.agroMin) ? limits.agroMin : state.missileLimits.agroMin
    };
  }
  var MISSILE_MIN_SPEED, MISSILE_MAX_SPEED, MISSILE_MIN_AGRO, MISSILE_MAX_LIFETIME, MISSILE_MIN_LIFETIME, MISSILE_LIFETIME_SPEED_PENALTY, MISSILE_LIFETIME_AGRO_PENALTY, MISSILE_LIFETIME_AGRO_REF, MISSILE_PRESETS;
  var init_state = __esm({
    "web/src/state.ts"() {
      "use strict";
      MISSILE_MIN_SPEED = 40;
      MISSILE_MAX_SPEED = 250;
      MISSILE_MIN_AGRO = 100;
      MISSILE_MAX_LIFETIME = 120;
      MISSILE_MIN_LIFETIME = 20;
      MISSILE_LIFETIME_SPEED_PENALTY = 80;
      MISSILE_LIFETIME_AGRO_PENALTY = 40;
      MISSILE_LIFETIME_AGRO_REF = 2e3;
      MISSILE_PRESETS = [
        {
          name: "Scout",
          description: "Slow, efficient, long-range. High heat capacity.",
          speed: 80,
          agroRadius: 1500,
          heatParams: {
            max: 60,
            warnAt: 42,
            overheatAt: 60,
            markerSpeed: 70,
            kUp: 20,
            kDown: 15,
            exp: 1.5
          }
        },
        {
          name: "Hunter",
          description: "Balanced speed and detection. Standard heat.",
          speed: 150,
          agroRadius: 800,
          heatParams: {
            max: 50,
            warnAt: 35,
            overheatAt: 50,
            markerSpeed: 120,
            kUp: 28,
            kDown: 12,
            exp: 1.5
          }
        },
        {
          name: "Sniper",
          description: "Fast, narrow detection. Low heat capacity.",
          speed: 220,
          agroRadius: 300,
          heatParams: {
            max: 40,
            warnAt: 28,
            overheatAt: 40,
            markerSpeed: 180,
            kUp: 35,
            kDown: 8,
            exp: 1.5
          }
        }
      ];
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/names.js
  function protoCamelCase(snakeCase) {
    let capNext = false;
    const b = [];
    for (let i = 0; i < snakeCase.length; i++) {
      let c = snakeCase.charAt(i);
      switch (c) {
        case "_":
          capNext = true;
          break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          b.push(c);
          capNext = false;
          break;
        default:
          if (capNext) {
            capNext = false;
            c = c.toUpperCase();
          }
          b.push(c);
          break;
      }
    }
    return b.join("");
  }
  function safeObjectProperty(name) {
    return reservedObjectProperties.has(name) ? name + "$" : name;
  }
  var reservedObjectProperties;
  var init_names = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/names.js"() {
      reservedObjectProperties = /* @__PURE__ */ new Set([
        // names reserved by JavaScript
        "constructor",
        "toString",
        "toJSON",
        "valueOf"
      ]);
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wire/varint.js
  function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
      let b = this.buf[this.pos++];
      lowBits |= (b & 127) << shift;
      if ((b & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
      let b = this.buf[this.pos++];
      highBits |= (b & 127) << shift;
      if ((b & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    throw new Error("invalid varint");
  }
  function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i = i + 7) {
      const shift = lo >>> i;
      const hasNext = !(shift >>> 7 == 0 && hi == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
      return;
    }
    for (let i = 3; i < 31; i = i + 7) {
      const shift = hi >>> i;
      const hasNext = !(shift >>> 7 == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    bytes.push(hi >>> 31 & 1);
  }
  function int64FromString(dec) {
    const minus = dec[0] === "-";
    if (minus) {
      dec = dec.slice(1);
    }
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
      const digit1e6 = Number(dec.slice(begin, end));
      highBits *= base;
      lowBits = lowBits * base + digit1e6;
      if (lowBits >= TWO_PWR_32_DBL) {
        highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
        lowBits = lowBits % TWO_PWR_32_DBL;
      }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
  }
  function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    const negative = bits.hi & 2147483648;
    if (negative) {
      bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
  }
  function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    if (hi <= 2097151) {
      return String(TWO_PWR_32_DBL * hi + lo);
    }
    const low = lo & 16777215;
    const mid = (lo >>> 24 | hi << 8) & 16777215;
    const high = hi >> 16 & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    const base = 1e7;
    if (digitA >= base) {
      digitB += Math.floor(digitA / base);
      digitA %= base;
    }
    if (digitB >= base) {
      digitC += Math.floor(digitB / base);
      digitB %= base;
    }
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
  }
  function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
  }
  function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
  }
  function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
      lowBits = ~lowBits + 1;
    } else {
      highBits += 1;
    }
    return newBits(lowBits, highBits);
  }
  function varint32write(value, bytes) {
    if (value >= 0) {
      while (value > 127) {
        bytes.push(value & 127 | 128);
        value = value >>> 7;
      }
      bytes.push(value);
    } else {
      for (let i = 0; i < 9; i++) {
        bytes.push(value & 127 | 128);
        value = value >> 7;
      }
      bytes.push(1);
    }
  }
  function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 127;
    if ((b & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 7;
    if ((b & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 14;
    if ((b & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 21;
    if ((b & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 15) << 28;
    for (let readBytes = 5; (b & 128) !== 0 && readBytes < 10; readBytes++)
      b = this.buf[this.pos++];
    if ((b & 128) != 0)
      throw new Error("invalid varint");
    this.assertBounds();
    return result >>> 0;
  }
  var TWO_PWR_32_DBL, decimalFrom1e7WithLeadingZeros;
  var init_varint = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wire/varint.js"() {
      TWO_PWR_32_DBL = 4294967296;
      decimalFrom1e7WithLeadingZeros = (digit1e7) => {
        const partial = String(digit1e7);
        return "0000000".slice(partial.length) + partial;
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
  function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (!!globalThis.Deno || typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
      const MIN = BigInt("-9223372036854775808");
      const MAX = BigInt("9223372036854775807");
      const UMIN = BigInt("0");
      const UMAX = BigInt("18446744073709551615");
      return {
        zero: BigInt(0),
        supported: true,
        parse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > MAX || bi < MIN) {
            throw new Error(`invalid int64: ${value}`);
          }
          return bi;
        },
        uParse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > UMAX || bi < UMIN) {
            throw new Error(`invalid uint64: ${value}`);
          }
          return bi;
        },
        enc(value) {
          dv.setBigInt64(0, this.parse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        uEnc(value) {
          dv.setBigInt64(0, this.uParse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        dec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigInt64(0, true);
        },
        uDec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigUint64(0, true);
        }
      };
    }
    return {
      zero: "0",
      supported: false,
      parse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return value;
      },
      uParse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return value;
      },
      enc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return int64FromString(value);
      },
      uEnc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return int64FromString(value);
      },
      dec(lo, hi) {
        return int64ToString(lo, hi);
      },
      uDec(lo, hi) {
        return uInt64ToString(lo, hi);
      }
    };
  }
  function assertInt64String(value) {
    if (!/^-?[0-9]+$/.test(value)) {
      throw new Error("invalid int64: " + value);
    }
  }
  function assertUInt64String(value) {
    if (!/^[0-9]+$/.test(value)) {
      throw new Error("invalid uint64: " + value);
    }
  }
  var protoInt64;
  var init_proto_int64 = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js"() {
      init_varint();
      protoInt64 = /* @__PURE__ */ makeInt64Support();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/descriptors.js
  var ScalarType;
  var init_descriptors = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/descriptors.js"() {
      (function(ScalarType2) {
        ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
        ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
        ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
        ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
        ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
        ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
        ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
        ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
        ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
        ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
        ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
        ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
        ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
        ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
        ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
      })(ScalarType || (ScalarType = {}));
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/scalar.js
  function scalarZeroValue(type, longAsString) {
    switch (type) {
      case ScalarType.STRING:
        return "";
      case ScalarType.BOOL:
        return false;
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        return 0;
      case ScalarType.INT64:
      case ScalarType.UINT64:
      case ScalarType.SFIXED64:
      case ScalarType.FIXED64:
      case ScalarType.SINT64:
        return longAsString ? "0" : protoInt64.zero;
      case ScalarType.BYTES:
        return new Uint8Array(0);
      default:
        return 0;
    }
  }
  function isScalarZeroValue(type, value) {
    switch (type) {
      case ScalarType.BOOL:
        return value === false;
      case ScalarType.STRING:
        return value === "";
      case ScalarType.BYTES:
        return value instanceof Uint8Array && !value.byteLength;
      default:
        return value == 0;
    }
  }
  var init_scalar = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/scalar.js"() {
      init_proto_int64();
      init_descriptors();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/unsafe.js
  function unsafeOneofCase(target, oneof) {
    const c = target[oneof.localName].case;
    if (c === void 0) {
      return c;
    }
    return oneof.fields.find((f) => f.localName === c);
  }
  function unsafeIsSet(target, field) {
    const name = field.localName;
    if (field.oneof) {
      return target[field.oneof.localName].case === name;
    }
    if (field.presence != IMPLICIT) {
      return target[name] !== void 0 && Object.prototype.hasOwnProperty.call(target, name);
    }
    switch (field.fieldKind) {
      case "list":
        return target[name].length > 0;
      case "map":
        return Object.keys(target[name]).length > 0;
      case "scalar":
        return !isScalarZeroValue(field.scalar, target[name]);
      case "enum":
        return target[name] !== field.enum.values[0].number;
    }
    throw new Error("message field with implicit presence");
  }
  function unsafeIsSetExplicit(target, localName) {
    return Object.prototype.hasOwnProperty.call(target, localName) && target[localName] !== void 0;
  }
  function unsafeGet(target, field) {
    if (field.oneof) {
      const oneof = target[field.oneof.localName];
      if (oneof.case === field.localName) {
        return oneof.value;
      }
      return void 0;
    }
    return target[field.localName];
  }
  function unsafeSet(target, field, value) {
    if (field.oneof) {
      target[field.oneof.localName] = {
        case: field.localName,
        value
      };
    } else {
      target[field.localName] = value;
    }
  }
  function unsafeClear(target, field) {
    const name = field.localName;
    if (field.oneof) {
      const oneofLocalName = field.oneof.localName;
      if (target[oneofLocalName].case === name) {
        target[oneofLocalName] = { case: void 0 };
      }
    } else if (field.presence != IMPLICIT) {
      delete target[name];
    } else {
      switch (field.fieldKind) {
        case "map":
          target[name] = {};
          break;
        case "list":
          target[name] = [];
          break;
        case "enum":
          target[name] = field.enum.values[0].number;
          break;
        case "scalar":
          target[name] = scalarZeroValue(field.scalar, field.longAsString);
          break;
      }
    }
  }
  var IMPLICIT, unsafeLocal;
  var init_unsafe = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/unsafe.js"() {
      init_scalar();
      IMPLICIT = 2;
      unsafeLocal = Symbol.for("reflect unsafe local");
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/restore-json-names.js
  function restoreJsonNames(message) {
    for (const f of message.field) {
      if (!unsafeIsSetExplicit(f, "jsonName")) {
        f.jsonName = protoCamelCase(f.name);
      }
    }
    message.nestedType.forEach(restoreJsonNames);
  }
  var init_restore_json_names = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/restore-json-names.js"() {
      init_names();
      init_unsafe();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wire/text-format.js
  function parseTextFormatEnumValue(descEnum, value) {
    const enumValue = descEnum.values.find((v) => v.name === value);
    if (!enumValue) {
      throw new Error(`cannot parse ${descEnum} default value: ${value}`);
    }
    return enumValue.number;
  }
  function parseTextFormatScalarValue(type, value) {
    switch (type) {
      case ScalarType.STRING:
        return value;
      case ScalarType.BYTES: {
        const u = unescapeBytesDefaultValue(value);
        if (u === false) {
          throw new Error(`cannot parse ${ScalarType[type]} default value: ${value}`);
        }
        return u;
      }
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return protoInt64.parse(value);
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
        return protoInt64.uParse(value);
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        switch (value) {
          case "inf":
            return Number.POSITIVE_INFINITY;
          case "-inf":
            return Number.NEGATIVE_INFINITY;
          case "nan":
            return Number.NaN;
          default:
            return parseFloat(value);
        }
      case ScalarType.BOOL:
        return value === "true";
      case ScalarType.INT32:
      case ScalarType.UINT32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
        return parseInt(value, 10);
    }
  }
  function unescapeBytesDefaultValue(str) {
    const b = [];
    const input = {
      tail: str,
      c: "",
      next() {
        if (this.tail.length == 0) {
          return false;
        }
        this.c = this.tail[0];
        this.tail = this.tail.substring(1);
        return true;
      },
      take(n) {
        if (this.tail.length >= n) {
          const r = this.tail.substring(0, n);
          this.tail = this.tail.substring(n);
          return r;
        }
        return false;
      }
    };
    while (input.next()) {
      switch (input.c) {
        case "\\":
          if (input.next()) {
            switch (input.c) {
              case "\\":
                b.push(input.c.charCodeAt(0));
                break;
              case "b":
                b.push(8);
                break;
              case "f":
                b.push(12);
                break;
              case "n":
                b.push(10);
                break;
              case "r":
                b.push(13);
                break;
              case "t":
                b.push(9);
                break;
              case "v":
                b.push(11);
                break;
              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7": {
                const s = input.c;
                const t = input.take(2);
                if (t === false) {
                  return false;
                }
                const n = parseInt(s + t, 8);
                if (Number.isNaN(n)) {
                  return false;
                }
                b.push(n);
                break;
              }
              case "x": {
                const s = input.c;
                const t = input.take(2);
                if (t === false) {
                  return false;
                }
                const n = parseInt(s + t, 16);
                if (Number.isNaN(n)) {
                  return false;
                }
                b.push(n);
                break;
              }
              case "u": {
                const s = input.c;
                const t = input.take(4);
                if (t === false) {
                  return false;
                }
                const n = parseInt(s + t, 16);
                if (Number.isNaN(n)) {
                  return false;
                }
                const chunk = new Uint8Array(4);
                const view = new DataView(chunk.buffer);
                view.setInt32(0, n, true);
                b.push(chunk[0], chunk[1], chunk[2], chunk[3]);
                break;
              }
              case "U": {
                const s = input.c;
                const t = input.take(8);
                if (t === false) {
                  return false;
                }
                const tc = protoInt64.uEnc(s + t);
                const chunk = new Uint8Array(8);
                const view = new DataView(chunk.buffer);
                view.setInt32(0, tc.lo, true);
                view.setInt32(4, tc.hi, true);
                b.push(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4], chunk[5], chunk[6], chunk[7]);
                break;
              }
            }
          }
          break;
        default:
          b.push(input.c.charCodeAt(0));
      }
    }
    return new Uint8Array(b);
  }
  var init_text_format = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wire/text-format.js"() {
      init_descriptors();
      init_proto_int64();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/nested-types.js
  function* nestedTypes(desc) {
    switch (desc.kind) {
      case "file":
        for (const message of desc.messages) {
          yield message;
          yield* nestedTypes(message);
        }
        yield* desc.enums;
        yield* desc.services;
        yield* desc.extensions;
        break;
      case "message":
        for (const message of desc.nestedMessages) {
          yield message;
          yield* nestedTypes(message);
        }
        yield* desc.nestedEnums;
        yield* desc.nestedExtensions;
        break;
    }
  }
  var init_nested_types = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/nested-types.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/registry.js
  function createFileRegistry(...args) {
    const registry = createBaseRegistry();
    if (!args.length) {
      return registry;
    }
    if ("$typeName" in args[0] && args[0].$typeName == "google.protobuf.FileDescriptorSet") {
      for (const file of args[0].file) {
        addFile(file, registry);
      }
      return registry;
    }
    if ("$typeName" in args[0]) {
      let recurseDeps = function(file) {
        const deps = [];
        for (const protoFileName of file.dependency) {
          if (registry.getFile(protoFileName) != void 0) {
            continue;
          }
          if (seen.has(protoFileName)) {
            continue;
          }
          const dep = resolve(protoFileName);
          if (!dep) {
            throw new Error(`Unable to resolve ${protoFileName}, imported by ${file.name}`);
          }
          if ("kind" in dep) {
            registry.addFile(dep, false, true);
          } else {
            seen.add(dep.name);
            deps.push(dep);
          }
        }
        return deps.concat(...deps.map(recurseDeps));
      };
      const input = args[0];
      const resolve = args[1];
      const seen = /* @__PURE__ */ new Set();
      for (const file of [input, ...recurseDeps(input)].reverse()) {
        addFile(file, registry);
      }
    } else {
      for (const fileReg of args) {
        for (const file of fileReg.files) {
          registry.addFile(file);
        }
      }
    }
    return registry;
  }
  function createBaseRegistry() {
    const types = /* @__PURE__ */ new Map();
    const extendees = /* @__PURE__ */ new Map();
    const files = /* @__PURE__ */ new Map();
    return {
      kind: "registry",
      types,
      extendees,
      [Symbol.iterator]() {
        return types.values();
      },
      get files() {
        return files.values();
      },
      addFile(file, skipTypes, withDeps) {
        files.set(file.proto.name, file);
        if (!skipTypes) {
          for (const type of nestedTypes(file)) {
            this.add(type);
          }
        }
        if (withDeps) {
          for (const f of file.dependencies) {
            this.addFile(f, skipTypes, withDeps);
          }
        }
      },
      add(desc) {
        if (desc.kind == "extension") {
          let numberToExt = extendees.get(desc.extendee.typeName);
          if (!numberToExt) {
            extendees.set(
              desc.extendee.typeName,
              // biome-ignore lint/suspicious/noAssignInExpressions: no
              numberToExt = /* @__PURE__ */ new Map()
            );
          }
          numberToExt.set(desc.number, desc);
        }
        types.set(desc.typeName, desc);
      },
      get(typeName) {
        return types.get(typeName);
      },
      getFile(fileName) {
        return files.get(fileName);
      },
      getMessage(typeName) {
        const t = types.get(typeName);
        return (t === null || t === void 0 ? void 0 : t.kind) == "message" ? t : void 0;
      },
      getEnum(typeName) {
        const t = types.get(typeName);
        return (t === null || t === void 0 ? void 0 : t.kind) == "enum" ? t : void 0;
      },
      getExtension(typeName) {
        const t = types.get(typeName);
        return (t === null || t === void 0 ? void 0 : t.kind) == "extension" ? t : void 0;
      },
      getExtensionFor(extendee, no) {
        var _a;
        return (_a = extendees.get(extendee.typeName)) === null || _a === void 0 ? void 0 : _a.get(no);
      },
      getService(typeName) {
        const t = types.get(typeName);
        return (t === null || t === void 0 ? void 0 : t.kind) == "service" ? t : void 0;
      }
    };
  }
  function addFile(proto, reg) {
    var _a, _b;
    const file = {
      kind: "file",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      edition: getFileEdition(proto),
      name: proto.name.replace(/\.proto$/, ""),
      dependencies: findFileDependencies(proto, reg),
      enums: [],
      messages: [],
      extensions: [],
      services: [],
      toString() {
        return `file ${proto.name}`;
      }
    };
    const mapEntriesStore = /* @__PURE__ */ new Map();
    const mapEntries = {
      get(typeName) {
        return mapEntriesStore.get(typeName);
      },
      add(desc) {
        var _a2;
        assert(((_a2 = desc.proto.options) === null || _a2 === void 0 ? void 0 : _a2.mapEntry) === true);
        mapEntriesStore.set(desc.typeName, desc);
      }
    };
    for (const enumProto of proto.enumType) {
      addEnum(enumProto, file, void 0, reg);
    }
    for (const messageProto of proto.messageType) {
      addMessage(messageProto, file, void 0, reg, mapEntries);
    }
    for (const serviceProto of proto.service) {
      addService(serviceProto, file, reg);
    }
    addExtensions(file, reg);
    for (const mapEntry of mapEntriesStore.values()) {
      addFields(mapEntry, reg, mapEntries);
    }
    for (const message of file.messages) {
      addFields(message, reg, mapEntries);
      addExtensions(message, reg);
    }
    reg.addFile(file, true);
  }
  function addExtensions(desc, reg) {
    switch (desc.kind) {
      case "file":
        for (const proto of desc.proto.extension) {
          const ext = newField(proto, desc, reg);
          desc.extensions.push(ext);
          reg.add(ext);
        }
        break;
      case "message":
        for (const proto of desc.proto.extension) {
          const ext = newField(proto, desc, reg);
          desc.nestedExtensions.push(ext);
          reg.add(ext);
        }
        for (const message of desc.nestedMessages) {
          addExtensions(message, reg);
        }
        break;
    }
  }
  function addFields(message, reg, mapEntries) {
    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message));
    const oneofsSeen = /* @__PURE__ */ new Set();
    for (const proto of message.proto.field) {
      const oneof = findOneof(proto, allOneofs);
      const field = newField(proto, message, reg, oneof, mapEntries);
      message.fields.push(field);
      message.field[field.localName] = field;
      if (oneof === void 0) {
        message.members.push(field);
      } else {
        oneof.fields.push(field);
        if (!oneofsSeen.has(oneof)) {
          oneofsSeen.add(oneof);
          message.members.push(oneof);
        }
      }
    }
    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {
      message.oneofs.push(oneof);
    }
    for (const child of message.nestedMessages) {
      addFields(child, reg, mapEntries);
    }
  }
  function addEnum(proto, file, parent, reg) {
    var _a, _b, _c, _d, _e;
    const sharedPrefix = findEnumSharedPrefix(proto.name, proto.value);
    const desc = {
      kind: "enum",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      file,
      parent,
      open: true,
      name: proto.name,
      typeName: makeTypeName(proto, parent, file),
      value: {},
      values: [],
      sharedPrefix,
      toString() {
        return `enum ${this.typeName}`;
      }
    };
    desc.open = isEnumOpen(desc);
    reg.add(desc);
    for (const p of proto.value) {
      const name = p.name;
      desc.values.push(
        // biome-ignore lint/suspicious/noAssignInExpressions: no
        desc.value[p.number] = {
          kind: "enum_value",
          proto: p,
          deprecated: (_d = (_c = p.options) === null || _c === void 0 ? void 0 : _c.deprecated) !== null && _d !== void 0 ? _d : false,
          parent: desc,
          name,
          localName: safeObjectProperty(sharedPrefix == void 0 ? name : name.substring(sharedPrefix.length)),
          number: p.number,
          toString() {
            return `enum value ${desc.typeName}.${name}`;
          }
        }
      );
    }
    ((_e = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _e !== void 0 ? _e : file.enums).push(desc);
  }
  function addMessage(proto, file, parent, reg, mapEntries) {
    var _a, _b, _c, _d;
    const desc = {
      kind: "message",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      file,
      parent,
      name: proto.name,
      typeName: makeTypeName(proto, parent, file),
      fields: [],
      field: {},
      oneofs: [],
      members: [],
      nestedEnums: [],
      nestedMessages: [],
      nestedExtensions: [],
      toString() {
        return `message ${this.typeName}`;
      }
    };
    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {
      mapEntries.add(desc);
    } else {
      ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);
      reg.add(desc);
    }
    for (const enumProto of proto.enumType) {
      addEnum(enumProto, file, desc, reg);
    }
    for (const messageProto of proto.nestedType) {
      addMessage(messageProto, file, desc, reg, mapEntries);
    }
  }
  function addService(proto, file, reg) {
    var _a, _b;
    const desc = {
      kind: "service",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      file,
      name: proto.name,
      typeName: makeTypeName(proto, void 0, file),
      methods: [],
      method: {},
      toString() {
        return `service ${this.typeName}`;
      }
    };
    file.services.push(desc);
    reg.add(desc);
    for (const methodProto of proto.method) {
      const method = newMethod(methodProto, desc, reg);
      desc.methods.push(method);
      desc.method[method.localName] = method;
    }
  }
  function newMethod(proto, parent, reg) {
    var _a, _b, _c, _d;
    let methodKind;
    if (proto.clientStreaming && proto.serverStreaming) {
      methodKind = "bidi_streaming";
    } else if (proto.clientStreaming) {
      methodKind = "client_streaming";
    } else if (proto.serverStreaming) {
      methodKind = "server_streaming";
    } else {
      methodKind = "unary";
    }
    const input = reg.getMessage(trimLeadingDot(proto.inputType));
    const output = reg.getMessage(trimLeadingDot(proto.outputType));
    assert(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);
    assert(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);
    const name = proto.name;
    return {
      kind: "rpc",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      parent,
      name,
      localName: safeObjectProperty(name.length ? safeObjectProperty(name[0].toLowerCase() + name.substring(1)) : name),
      methodKind,
      input,
      output,
      idempotency: (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.idempotencyLevel) !== null && _d !== void 0 ? _d : IDEMPOTENCY_UNKNOWN,
      toString() {
        return `rpc ${parent.typeName}.${name}`;
      }
    };
  }
  function newOneof(proto, parent) {
    return {
      kind: "oneof",
      proto,
      deprecated: false,
      parent,
      fields: [],
      name: proto.name,
      localName: safeObjectProperty(protoCamelCase(proto.name)),
      toString() {
        return `oneof ${parent.typeName}.${this.name}`;
      }
    };
  }
  function newField(proto, parentOrFile, reg, oneof, mapEntries) {
    var _a, _b, _c;
    const isExtension = mapEntries === void 0;
    const field = {
      kind: "field",
      proto,
      deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
      name: proto.name,
      number: proto.number,
      scalar: void 0,
      message: void 0,
      enum: void 0,
      presence: getFieldPresence(proto, oneof, isExtension, parentOrFile),
      listKind: void 0,
      mapKind: void 0,
      mapKey: void 0,
      delimitedEncoding: void 0,
      packed: void 0,
      longAsString: false,
      getDefaultValue: void 0
    };
    if (isExtension) {
      const file = parentOrFile.kind == "file" ? parentOrFile : parentOrFile.file;
      const parent = parentOrFile.kind == "file" ? void 0 : parentOrFile;
      const typeName = makeTypeName(proto, parent, file);
      field.kind = "extension";
      field.file = file;
      field.parent = parent;
      field.oneof = void 0;
      field.typeName = typeName;
      field.jsonName = `[${typeName}]`;
      field.toString = () => `extension ${typeName}`;
      const extendee = reg.getMessage(trimLeadingDot(proto.extendee));
      assert(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);
      field.extendee = extendee;
    } else {
      const parent = parentOrFile;
      assert(parent.kind == "message");
      field.parent = parent;
      field.oneof = oneof;
      field.localName = oneof ? protoCamelCase(proto.name) : safeObjectProperty(protoCamelCase(proto.name));
      field.jsonName = proto.jsonName;
      field.toString = () => `field ${parent.typeName}.${proto.name}`;
    }
    const label = proto.label;
    const type = proto.type;
    const jstype = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.jstype;
    if (label === LABEL_REPEATED) {
      const mapEntry = type == TYPE_MESSAGE ? mapEntries === null || mapEntries === void 0 ? void 0 : mapEntries.get(trimLeadingDot(proto.typeName)) : void 0;
      if (mapEntry) {
        field.fieldKind = "map";
        const { key, value } = findMapEntryFields(mapEntry);
        field.mapKey = key.scalar;
        field.mapKind = value.fieldKind;
        field.message = value.message;
        field.delimitedEncoding = false;
        field.enum = value.enum;
        field.scalar = value.scalar;
        return field;
      }
      field.fieldKind = "list";
      switch (type) {
        case TYPE_MESSAGE:
        case TYPE_GROUP:
          field.listKind = "message";
          field.message = reg.getMessage(trimLeadingDot(proto.typeName));
          assert(field.message);
          field.delimitedEncoding = isDelimitedEncoding(proto, parentOrFile);
          break;
        case TYPE_ENUM:
          field.listKind = "enum";
          field.enum = reg.getEnum(trimLeadingDot(proto.typeName));
          assert(field.enum);
          break;
        default:
          field.listKind = "scalar";
          field.scalar = type;
          field.longAsString = jstype == JS_STRING;
          break;
      }
      field.packed = isPackedField(proto, parentOrFile);
      return field;
    }
    switch (type) {
      case TYPE_MESSAGE:
      case TYPE_GROUP:
        field.fieldKind = "message";
        field.message = reg.getMessage(trimLeadingDot(proto.typeName));
        assert(field.message, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
        field.delimitedEncoding = isDelimitedEncoding(proto, parentOrFile);
        field.getDefaultValue = () => void 0;
        break;
      case TYPE_ENUM: {
        const enumeration = reg.getEnum(trimLeadingDot(proto.typeName));
        assert(enumeration !== void 0, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
        field.fieldKind = "enum";
        field.enum = reg.getEnum(trimLeadingDot(proto.typeName));
        field.getDefaultValue = () => {
          return unsafeIsSetExplicit(proto, "defaultValue") ? parseTextFormatEnumValue(enumeration, proto.defaultValue) : void 0;
        };
        break;
      }
      default: {
        field.fieldKind = "scalar";
        field.scalar = type;
        field.longAsString = jstype == JS_STRING;
        field.getDefaultValue = () => {
          return unsafeIsSetExplicit(proto, "defaultValue") ? parseTextFormatScalarValue(type, proto.defaultValue) : void 0;
        };
        break;
      }
    }
    return field;
  }
  function getFileEdition(proto) {
    switch (proto.syntax) {
      case "":
      case "proto2":
        return EDITION_PROTO2;
      case "proto3":
        return EDITION_PROTO3;
      case "editions":
        if (proto.edition in featureDefaults) {
          return proto.edition;
        }
        throw new Error(`${proto.name}: unsupported edition`);
      default:
        throw new Error(`${proto.name}: unsupported syntax "${proto.syntax}"`);
    }
  }
  function findFileDependencies(proto, reg) {
    return proto.dependency.map((wantName) => {
      const dep = reg.getFile(wantName);
      if (!dep) {
        throw new Error(`Cannot find ${wantName}, imported by ${proto.name}`);
      }
      return dep;
    });
  }
  function findEnumSharedPrefix(enumName, values) {
    const prefix = camelToSnakeCase(enumName) + "_";
    for (const value of values) {
      if (!value.name.toLowerCase().startsWith(prefix)) {
        return void 0;
      }
      const shortName = value.name.substring(prefix.length);
      if (shortName.length == 0) {
        return void 0;
      }
      if (/^\d/.test(shortName)) {
        return void 0;
      }
    }
    return prefix;
  }
  function camelToSnakeCase(camel) {
    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => "_" + c)).toLowerCase();
  }
  function makeTypeName(proto, parent, file) {
    let typeName;
    if (parent) {
      typeName = `${parent.typeName}.${proto.name}`;
    } else if (file.proto.package.length > 0) {
      typeName = `${file.proto.package}.${proto.name}`;
    } else {
      typeName = `${proto.name}`;
    }
    return typeName;
  }
  function trimLeadingDot(typeName) {
    return typeName.startsWith(".") ? typeName.substring(1) : typeName;
  }
  function findOneof(proto, allOneofs) {
    if (!unsafeIsSetExplicit(proto, "oneofIndex")) {
      return void 0;
    }
    if (proto.proto3Optional) {
      return void 0;
    }
    const oneof = allOneofs[proto.oneofIndex];
    assert(oneof, `invalid FieldDescriptorProto: oneof #${proto.oneofIndex} for field #${proto.number} not found`);
    return oneof;
  }
  function getFieldPresence(proto, oneof, isExtension, parent) {
    if (proto.label == LABEL_REQUIRED) {
      return LEGACY_REQUIRED;
    }
    if (proto.label == LABEL_REPEATED) {
      return IMPLICIT2;
    }
    if (!!oneof || proto.proto3Optional) {
      return EXPLICIT;
    }
    if (isExtension) {
      return EXPLICIT;
    }
    const resolved = resolveFeature("fieldPresence", { proto, parent });
    if (resolved == IMPLICIT2 && (proto.type == TYPE_MESSAGE || proto.type == TYPE_GROUP)) {
      return EXPLICIT;
    }
    return resolved;
  }
  function isPackedField(proto, parent) {
    if (proto.label != LABEL_REPEATED) {
      return false;
    }
    switch (proto.type) {
      case TYPE_STRING:
      case TYPE_BYTES:
      case TYPE_GROUP:
      case TYPE_MESSAGE:
        return false;
    }
    const o = proto.options;
    if (o && unsafeIsSetExplicit(o, "packed")) {
      return o.packed;
    }
    return PACKED == resolveFeature("repeatedFieldEncoding", {
      proto,
      parent
    });
  }
  function findMapEntryFields(mapEntry) {
    const key = mapEntry.fields.find((f) => f.number === 1);
    const value = mapEntry.fields.find((f) => f.number === 2);
    assert(key && key.fieldKind == "scalar" && key.scalar != ScalarType.BYTES && key.scalar != ScalarType.FLOAT && key.scalar != ScalarType.DOUBLE && value && value.fieldKind != "list" && value.fieldKind != "map");
    return { key, value };
  }
  function isEnumOpen(desc) {
    var _a;
    return OPEN == resolveFeature("enumType", {
      proto: desc.proto,
      parent: (_a = desc.parent) !== null && _a !== void 0 ? _a : desc.file
    });
  }
  function isDelimitedEncoding(proto, parent) {
    if (proto.type == TYPE_GROUP) {
      return true;
    }
    return DELIMITED == resolveFeature("messageEncoding", {
      proto,
      parent
    });
  }
  function resolveFeature(name, ref) {
    var _a, _b;
    const featureSet = (_a = ref.proto.options) === null || _a === void 0 ? void 0 : _a.features;
    if (featureSet) {
      const val = featureSet[name];
      if (val != 0) {
        return val;
      }
    }
    if ("kind" in ref) {
      if (ref.kind == "message") {
        return resolveFeature(name, (_b = ref.parent) !== null && _b !== void 0 ? _b : ref.file);
      }
      const editionDefaults = featureDefaults[ref.edition];
      if (!editionDefaults) {
        throw new Error(`feature default for edition ${ref.edition} not found`);
      }
      return editionDefaults[name];
    }
    return resolveFeature(name, ref.parent);
  }
  function assert(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  }
  var EDITION_PROTO2, EDITION_PROTO3, TYPE_STRING, TYPE_GROUP, TYPE_MESSAGE, TYPE_BYTES, TYPE_ENUM, LABEL_REPEATED, LABEL_REQUIRED, JS_STRING, IDEMPOTENCY_UNKNOWN, EXPLICIT, IMPLICIT2, LEGACY_REQUIRED, PACKED, DELIMITED, OPEN, featureDefaults;
  var init_registry = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/registry.js"() {
      init_descriptors();
      init_text_format();
      init_nested_types();
      init_unsafe();
      init_names();
      EDITION_PROTO2 = 998;
      EDITION_PROTO3 = 999;
      TYPE_STRING = 9;
      TYPE_GROUP = 10;
      TYPE_MESSAGE = 11;
      TYPE_BYTES = 12;
      TYPE_ENUM = 14;
      LABEL_REPEATED = 3;
      LABEL_REQUIRED = 2;
      JS_STRING = 1;
      IDEMPOTENCY_UNKNOWN = 0;
      EXPLICIT = 1;
      IMPLICIT2 = 2;
      LEGACY_REQUIRED = 3;
      PACKED = 1;
      DELIMITED = 2;
      OPEN = 1;
      featureDefaults = {
        // EDITION_PROTO2
        998: {
          fieldPresence: 1,
          // EXPLICIT,
          enumType: 2,
          // CLOSED,
          repeatedFieldEncoding: 2,
          // EXPANDED,
          utf8Validation: 3,
          // NONE,
          messageEncoding: 1,
          // LENGTH_PREFIXED,
          jsonFormat: 2,
          // LEGACY_BEST_EFFORT,
          enforceNamingStyle: 2,
          // STYLE_LEGACY,
          defaultSymbolVisibility: 1
          // EXPORT_ALL,
        },
        // EDITION_PROTO3
        999: {
          fieldPresence: 2,
          // IMPLICIT,
          enumType: 1,
          // OPEN,
          repeatedFieldEncoding: 1,
          // PACKED,
          utf8Validation: 2,
          // VERIFY,
          messageEncoding: 1,
          // LENGTH_PREFIXED,
          jsonFormat: 1,
          // ALLOW,
          enforceNamingStyle: 2,
          // STYLE_LEGACY,
          defaultSymbolVisibility: 1
          // EXPORT_ALL,
        },
        // EDITION_2023
        1e3: {
          fieldPresence: 1,
          // EXPLICIT,
          enumType: 1,
          // OPEN,
          repeatedFieldEncoding: 1,
          // PACKED,
          utf8Validation: 2,
          // VERIFY,
          messageEncoding: 1,
          // LENGTH_PREFIXED,
          jsonFormat: 1,
          // ALLOW,
          enforceNamingStyle: 2,
          // STYLE_LEGACY,
          defaultSymbolVisibility: 1
          // EXPORT_ALL,
        },
        // EDITION_2024
        1001: {
          fieldPresence: 1,
          // EXPLICIT,
          enumType: 1,
          // OPEN,
          repeatedFieldEncoding: 1,
          // PACKED,
          utf8Validation: 2,
          // VERIFY,
          messageEncoding: 1,
          // LENGTH_PREFIXED,
          jsonFormat: 1,
          // ALLOW,
          enforceNamingStyle: 1,
          // STYLE2024,
          defaultSymbolVisibility: 2
          // EXPORT_TOP_LEVEL,
        }
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/boot.js
  function boot(boot2) {
    const root = bootFileDescriptorProto(boot2);
    root.messageType.forEach(restoreJsonNames);
    const reg = createFileRegistry(root, () => void 0);
    return reg.getFile(root.name);
  }
  function bootFileDescriptorProto(init) {
    const proto = /* @__PURE__ */ Object.create({
      syntax: "",
      edition: 0
    });
    return Object.assign(proto, Object.assign(Object.assign({ $typeName: "google.protobuf.FileDescriptorProto", dependency: [], publicDependency: [], weakDependency: [], optionDependency: [], service: [], extension: [] }, init), { messageType: init.messageType.map(bootDescriptorProto), enumType: init.enumType.map(bootEnumDescriptorProto) }));
  }
  function bootDescriptorProto(init) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const proto = /* @__PURE__ */ Object.create({
      visibility: 0
    });
    return Object.assign(proto, {
      $typeName: "google.protobuf.DescriptorProto",
      name: init.name,
      field: (_b = (_a = init.field) === null || _a === void 0 ? void 0 : _a.map(bootFieldDescriptorProto)) !== null && _b !== void 0 ? _b : [],
      extension: [],
      nestedType: (_d = (_c = init.nestedType) === null || _c === void 0 ? void 0 : _c.map(bootDescriptorProto)) !== null && _d !== void 0 ? _d : [],
      enumType: (_f = (_e = init.enumType) === null || _e === void 0 ? void 0 : _e.map(bootEnumDescriptorProto)) !== null && _f !== void 0 ? _f : [],
      extensionRange: (_h = (_g = init.extensionRange) === null || _g === void 0 ? void 0 : _g.map((e) => Object.assign({ $typeName: "google.protobuf.DescriptorProto.ExtensionRange" }, e))) !== null && _h !== void 0 ? _h : [],
      oneofDecl: [],
      reservedRange: [],
      reservedName: []
    });
  }
  function bootFieldDescriptorProto(init) {
    const proto = /* @__PURE__ */ Object.create({
      label: 1,
      typeName: "",
      extendee: "",
      defaultValue: "",
      oneofIndex: 0,
      jsonName: "",
      proto3Optional: false
    });
    return Object.assign(proto, Object.assign(Object.assign({ $typeName: "google.protobuf.FieldDescriptorProto" }, init), { options: init.options ? bootFieldOptions(init.options) : void 0 }));
  }
  function bootFieldOptions(init) {
    var _a, _b, _c;
    const proto = /* @__PURE__ */ Object.create({
      ctype: 0,
      packed: false,
      jstype: 0,
      lazy: false,
      unverifiedLazy: false,
      deprecated: false,
      weak: false,
      debugRedact: false,
      retention: 0
    });
    return Object.assign(proto, Object.assign(Object.assign({ $typeName: "google.protobuf.FieldOptions" }, init), { targets: (_a = init.targets) !== null && _a !== void 0 ? _a : [], editionDefaults: (_c = (_b = init.editionDefaults) === null || _b === void 0 ? void 0 : _b.map((e) => Object.assign({ $typeName: "google.protobuf.FieldOptions.EditionDefault" }, e))) !== null && _c !== void 0 ? _c : [], uninterpretedOption: [] }));
  }
  function bootEnumDescriptorProto(init) {
    const proto = /* @__PURE__ */ Object.create({
      visibility: 0
    });
    return Object.assign(proto, {
      $typeName: "google.protobuf.EnumDescriptorProto",
      name: init.name,
      reservedName: [],
      reservedRange: [],
      value: init.value.map((e) => Object.assign({ $typeName: "google.protobuf.EnumValueDescriptorProto" }, e))
    });
  }
  var init_boot = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/boot.js"() {
      init_restore_json_names();
      init_registry();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/fields.js
  var init_fields = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/fields.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wire/base64-encoding.js
  function base64Decode(base64Str) {
    const table = getDecodeTable();
    let es = base64Str.length * 3 / 4;
    if (base64Str[base64Str.length - 2] == "=")
      es -= 2;
    else if (base64Str[base64Str.length - 1] == "=")
      es -= 1;
    let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b, p = 0;
    for (let i = 0; i < base64Str.length; i++) {
      b = table[base64Str.charCodeAt(i)];
      if (b === void 0) {
        switch (base64Str[i]) {
          case "=":
            groupPos = 0;
          case "\n":
          case "\r":
          case "	":
          case " ":
            continue;
          default:
            throw Error("invalid base64 string");
        }
      }
      switch (groupPos) {
        case 0:
          p = b;
          groupPos = 1;
          break;
        case 1:
          bytes[bytePos++] = p << 2 | (b & 48) >> 4;
          p = b;
          groupPos = 2;
          break;
        case 2:
          bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;
          p = b;
          groupPos = 3;
          break;
        case 3:
          bytes[bytePos++] = (p & 3) << 6 | b;
          groupPos = 0;
          break;
      }
    }
    if (groupPos == 1)
      throw Error("invalid base64 string");
    return bytes.subarray(0, bytePos);
  }
  function getEncodeTable(encoding) {
    if (!encodeTableStd) {
      encodeTableStd = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      encodeTableUrl = encodeTableStd.slice(0, -2).concat("-", "_");
    }
    return encoding == "url" ? (
      // biome-ignore lint/style/noNonNullAssertion: TS fails to narrow down
      encodeTableUrl
    ) : encodeTableStd;
  }
  function getDecodeTable() {
    if (!decodeTable) {
      decodeTable = [];
      const encodeTable = getEncodeTable("std");
      for (let i = 0; i < encodeTable.length; i++)
        decodeTable[encodeTable[i].charCodeAt(0)] = i;
      decodeTable["-".charCodeAt(0)] = encodeTable.indexOf("+");
      decodeTable["_".charCodeAt(0)] = encodeTable.indexOf("/");
    }
    return decodeTable;
  }
  var encodeTableStd, encodeTableUrl, decodeTable;
  var init_base64_encoding = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wire/base64-encoding.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/is-message.js
  function isMessage(arg, schema) {
    const isMessage2 = arg !== null && typeof arg == "object" && "$typeName" in arg && typeof arg.$typeName == "string";
    if (!isMessage2) {
      return false;
    }
    if (schema === void 0) {
      return true;
    }
    return schema.typeName === arg.$typeName;
  }
  var init_is_message = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/is-message.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/error.js
  var FieldError;
  var init_error = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/error.js"() {
      FieldError = class extends Error {
        constructor(fieldOrOneof, message, name = "FieldValueInvalidError") {
          super(message);
          this.name = name;
          this.field = () => fieldOrOneof;
        }
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/guard.js
  function isObject(arg) {
    return arg !== null && typeof arg == "object" && !Array.isArray(arg);
  }
  function isReflectList(arg, field) {
    var _a, _b, _c, _d;
    if (isObject(arg) && unsafeLocal in arg && "add" in arg && "field" in arg && typeof arg.field == "function") {
      if (field !== void 0) {
        const a = field;
        const b = arg.field();
        return a.listKind == b.listKind && a.scalar === b.scalar && ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) && ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName);
      }
      return true;
    }
    return false;
  }
  function isReflectMap(arg, field) {
    var _a, _b, _c, _d;
    if (isObject(arg) && unsafeLocal in arg && "has" in arg && "field" in arg && typeof arg.field == "function") {
      if (field !== void 0) {
        const a = field, b = arg.field();
        return a.mapKey === b.mapKey && a.mapKind == b.mapKind && a.scalar === b.scalar && ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) && ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName);
      }
      return true;
    }
    return false;
  }
  function isReflectMessage(arg, messageDesc2) {
    return isObject(arg) && unsafeLocal in arg && "desc" in arg && isObject(arg.desc) && arg.desc.kind === "message" && (messageDesc2 === void 0 || arg.desc.typeName == messageDesc2.typeName);
  }
  var init_guard = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/guard.js"() {
      init_unsafe();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wire/text-encoding.js
  function getTextEncoding() {
    if (globalThis[symbol] == void 0) {
      const te = new globalThis.TextEncoder();
      const td = new globalThis.TextDecoder();
      globalThis[symbol] = {
        encodeUtf8(text) {
          return te.encode(text);
        },
        decodeUtf8(bytes) {
          return td.decode(bytes);
        },
        checkUtf8(text) {
          try {
            encodeURIComponent(text);
            return true;
          } catch (_) {
            return false;
          }
        }
      };
    }
    return globalThis[symbol];
  }
  var symbol;
  var init_text_encoding = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wire/text-encoding.js"() {
      symbol = Symbol.for("@bufbuild/protobuf/text-encoding");
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js
  function assertInt32(arg) {
    if (typeof arg == "string") {
      arg = Number(arg);
    } else if (typeof arg != "number") {
      throw new Error("invalid int32: " + typeof arg);
    }
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
      throw new Error("invalid int32: " + arg);
  }
  function assertUInt32(arg) {
    if (typeof arg == "string") {
      arg = Number(arg);
    } else if (typeof arg != "number") {
      throw new Error("invalid uint32: " + typeof arg);
    }
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
      throw new Error("invalid uint32: " + arg);
  }
  function assertFloat32(arg) {
    if (typeof arg == "string") {
      const o = arg;
      arg = Number(arg);
      if (Number.isNaN(arg) && o !== "NaN") {
        throw new Error("invalid float32: " + o);
      }
    } else if (typeof arg != "number") {
      throw new Error("invalid float32: " + typeof arg);
    }
    if (Number.isFinite(arg) && (arg > FLOAT32_MAX || arg < FLOAT32_MIN))
      throw new Error("invalid float32: " + arg);
  }
  var WireType, FLOAT32_MAX, FLOAT32_MIN, UINT32_MAX, INT32_MAX, INT32_MIN, BinaryWriter, BinaryReader;
  var init_binary_encoding = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js"() {
      init_varint();
      init_proto_int64();
      init_text_encoding();
      (function(WireType2) {
        WireType2[WireType2["Varint"] = 0] = "Varint";
        WireType2[WireType2["Bit64"] = 1] = "Bit64";
        WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
        WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
        WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
        WireType2[WireType2["Bit32"] = 5] = "Bit32";
      })(WireType || (WireType = {}));
      FLOAT32_MAX = 34028234663852886e22;
      FLOAT32_MIN = -34028234663852886e22;
      UINT32_MAX = 4294967295;
      INT32_MAX = 2147483647;
      INT32_MIN = -2147483648;
      BinaryWriter = class {
        constructor(encodeUtf8 = getTextEncoding().encodeUtf8) {
          this.encodeUtf8 = encodeUtf8;
          this.stack = [];
          this.chunks = [];
          this.buf = [];
        }
        /**
         * Return all bytes written and reset this writer.
         */
        finish() {
          if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
          }
          let len = 0;
          for (let i = 0; i < this.chunks.length; i++)
            len += this.chunks[i].length;
          let bytes = new Uint8Array(len);
          let offset = 0;
          for (let i = 0; i < this.chunks.length; i++) {
            bytes.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
          }
          this.chunks = [];
          return bytes;
        }
        /**
         * Start a new fork for length-delimited data like a message
         * or a packed repeated field.
         *
         * Must be joined later with `join()`.
         */
        fork() {
          this.stack.push({ chunks: this.chunks, buf: this.buf });
          this.chunks = [];
          this.buf = [];
          return this;
        }
        /**
         * Join the last fork. Write its length and bytes, then
         * return to the previous state.
         */
        join() {
          let chunk = this.finish();
          let prev = this.stack.pop();
          if (!prev)
            throw new Error("invalid state, fork stack empty");
          this.chunks = prev.chunks;
          this.buf = prev.buf;
          this.uint32(chunk.byteLength);
          return this.raw(chunk);
        }
        /**
         * Writes a tag (field number and wire type).
         *
         * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
         *
         * Generated code should compute the tag ahead of time and call `uint32()`.
         */
        tag(fieldNo, type) {
          return this.uint32((fieldNo << 3 | type) >>> 0);
        }
        /**
         * Write a chunk of raw bytes.
         */
        raw(chunk) {
          if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
          }
          this.chunks.push(chunk);
          return this;
        }
        /**
         * Write a `uint32` value, an unsigned 32 bit varint.
         */
        uint32(value) {
          assertUInt32(value);
          while (value > 127) {
            this.buf.push(value & 127 | 128);
            value = value >>> 7;
          }
          this.buf.push(value);
          return this;
        }
        /**
         * Write a `int32` value, a signed 32 bit varint.
         */
        int32(value) {
          assertInt32(value);
          varint32write(value, this.buf);
          return this;
        }
        /**
         * Write a `bool` value, a variant.
         */
        bool(value) {
          this.buf.push(value ? 1 : 0);
          return this;
        }
        /**
         * Write a `bytes` value, length-delimited arbitrary data.
         */
        bytes(value) {
          this.uint32(value.byteLength);
          return this.raw(value);
        }
        /**
         * Write a `string` value, length-delimited data converted to UTF-8 text.
         */
        string(value) {
          let chunk = this.encodeUtf8(value);
          this.uint32(chunk.byteLength);
          return this.raw(chunk);
        }
        /**
         * Write a `float` value, 32-bit floating point number.
         */
        float(value) {
          assertFloat32(value);
          let chunk = new Uint8Array(4);
          new DataView(chunk.buffer).setFloat32(0, value, true);
          return this.raw(chunk);
        }
        /**
         * Write a `double` value, a 64-bit floating point number.
         */
        double(value) {
          let chunk = new Uint8Array(8);
          new DataView(chunk.buffer).setFloat64(0, value, true);
          return this.raw(chunk);
        }
        /**
         * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
         */
        fixed32(value) {
          assertUInt32(value);
          let chunk = new Uint8Array(4);
          new DataView(chunk.buffer).setUint32(0, value, true);
          return this.raw(chunk);
        }
        /**
         * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
         */
        sfixed32(value) {
          assertInt32(value);
          let chunk = new Uint8Array(4);
          new DataView(chunk.buffer).setInt32(0, value, true);
          return this.raw(chunk);
        }
        /**
         * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
         */
        sint32(value) {
          assertInt32(value);
          value = (value << 1 ^ value >> 31) >>> 0;
          varint32write(value, this.buf);
          return this;
        }
        /**
         * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
         */
        sfixed64(value) {
          let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
          view.setInt32(0, tc.lo, true);
          view.setInt32(4, tc.hi, true);
          return this.raw(chunk);
        }
        /**
         * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
         */
        fixed64(value) {
          let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
          view.setInt32(0, tc.lo, true);
          view.setInt32(4, tc.hi, true);
          return this.raw(chunk);
        }
        /**
         * Write a `int64` value, a signed 64-bit varint.
         */
        int64(value) {
          let tc = protoInt64.enc(value);
          varint64write(tc.lo, tc.hi, this.buf);
          return this;
        }
        /**
         * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
         */
        sint64(value) {
          const tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
          varint64write(lo, hi, this.buf);
          return this;
        }
        /**
         * Write a `uint64` value, an unsigned 64-bit varint.
         */
        uint64(value) {
          const tc = protoInt64.uEnc(value);
          varint64write(tc.lo, tc.hi, this.buf);
          return this;
        }
      };
      BinaryReader = class {
        constructor(buf, decodeUtf8 = getTextEncoding().decodeUtf8) {
          this.decodeUtf8 = decodeUtf8;
          this.varint64 = varint64read;
          this.uint32 = varint32read;
          this.buf = buf;
          this.len = buf.length;
          this.pos = 0;
          this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
        }
        /**
         * Reads a tag - field number and wire type.
         */
        tag() {
          let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
          if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
          return [fieldNo, wireType];
        }
        /**
         * Skip one element and return the skipped data.
         *
         * When skipping StartGroup, provide the tags field number to check for
         * matching field number in the EndGroup tag.
         */
        skip(wireType, fieldNo) {
          let start = this.pos;
          switch (wireType) {
            case WireType.Varint:
              while (this.buf[this.pos++] & 128) {
              }
              break;
            case WireType.Bit64:
              this.pos += 4;
            case WireType.Bit32:
              this.pos += 4;
              break;
            case WireType.LengthDelimited:
              let len = this.uint32();
              this.pos += len;
              break;
            case WireType.StartGroup:
              for (; ; ) {
                const [fn, wt] = this.tag();
                if (wt === WireType.EndGroup) {
                  if (fieldNo !== void 0 && fn !== fieldNo) {
                    throw new Error("invalid end group tag");
                  }
                  break;
                }
                this.skip(wt, fn);
              }
              break;
            default:
              throw new Error("cant skip wire type " + wireType);
          }
          this.assertBounds();
          return this.buf.subarray(start, this.pos);
        }
        /**
         * Throws error if position in byte array is out of range.
         */
        assertBounds() {
          if (this.pos > this.len)
            throw new RangeError("premature EOF");
        }
        /**
         * Read a `int32` field, a signed 32 bit varint.
         */
        int32() {
          return this.uint32() | 0;
        }
        /**
         * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
         */
        sint32() {
          let zze = this.uint32();
          return zze >>> 1 ^ -(zze & 1);
        }
        /**
         * Read a `int64` field, a signed 64-bit varint.
         */
        int64() {
          return protoInt64.dec(...this.varint64());
        }
        /**
         * Read a `uint64` field, an unsigned 64-bit varint.
         */
        uint64() {
          return protoInt64.uDec(...this.varint64());
        }
        /**
         * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
         */
        sint64() {
          let [lo, hi] = this.varint64();
          let s = -(lo & 1);
          lo = (lo >>> 1 | (hi & 1) << 31) ^ s;
          hi = hi >>> 1 ^ s;
          return protoInt64.dec(lo, hi);
        }
        /**
         * Read a `bool` field, a variant.
         */
        bool() {
          let [lo, hi] = this.varint64();
          return lo !== 0 || hi !== 0;
        }
        /**
         * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
         */
        fixed32() {
          return this.view.getUint32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
         */
        sfixed32() {
          return this.view.getInt32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
         */
        fixed64() {
          return protoInt64.uDec(this.sfixed32(), this.sfixed32());
        }
        /**
         * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
         */
        sfixed64() {
          return protoInt64.dec(this.sfixed32(), this.sfixed32());
        }
        /**
         * Read a `float` field, 32-bit floating point number.
         */
        float() {
          return this.view.getFloat32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `double` field, a 64-bit floating point number.
         */
        double() {
          return this.view.getFloat64((this.pos += 8) - 8, true);
        }
        /**
         * Read a `bytes` field, length-delimited arbitrary data.
         */
        bytes() {
          let len = this.uint32(), start = this.pos;
          this.pos += len;
          this.assertBounds();
          return this.buf.subarray(start, start + len);
        }
        /**
         * Read a `string` field, length-delimited data converted to UTF-8 text.
         */
        string() {
          return this.decodeUtf8(this.bytes());
        }
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect-check.js
  function checkField(field, value) {
    const check = field.fieldKind == "list" ? isReflectList(value, field) : field.fieldKind == "map" ? isReflectMap(value, field) : checkSingular(field, value);
    if (check === true) {
      return void 0;
    }
    let reason;
    switch (field.fieldKind) {
      case "list":
        reason = `expected ${formatReflectList(field)}, got ${formatVal(value)}`;
        break;
      case "map":
        reason = `expected ${formatReflectMap(field)}, got ${formatVal(value)}`;
        break;
      default: {
        reason = reasonSingular(field, value, check);
      }
    }
    return new FieldError(field, reason);
  }
  function checkListItem(field, index, value) {
    const check = checkSingular(field, value);
    if (check !== true) {
      return new FieldError(field, `list item #${index + 1}: ${reasonSingular(field, value, check)}`);
    }
    return void 0;
  }
  function checkMapEntry(field, key, value) {
    const checkKey = checkScalarValue(key, field.mapKey);
    if (checkKey !== true) {
      return new FieldError(field, `invalid map key: ${reasonSingular({ scalar: field.mapKey }, key, checkKey)}`);
    }
    const checkVal = checkSingular(field, value);
    if (checkVal !== true) {
      return new FieldError(field, `map entry ${formatVal(key)}: ${reasonSingular(field, value, checkVal)}`);
    }
    return void 0;
  }
  function checkSingular(field, value) {
    if (field.scalar !== void 0) {
      return checkScalarValue(value, field.scalar);
    }
    if (field.enum !== void 0) {
      if (field.enum.open) {
        return Number.isInteger(value);
      }
      return field.enum.values.some((v) => v.number === value);
    }
    return isReflectMessage(value, field.message);
  }
  function checkScalarValue(value, scalar) {
    switch (scalar) {
      case ScalarType.DOUBLE:
        return typeof value == "number";
      case ScalarType.FLOAT:
        if (typeof value != "number") {
          return false;
        }
        if (Number.isNaN(value) || !Number.isFinite(value)) {
          return true;
        }
        if (value > FLOAT32_MAX || value < FLOAT32_MIN) {
          return `${value.toFixed()} out of range`;
        }
        return true;
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        if (typeof value !== "number" || !Number.isInteger(value)) {
          return false;
        }
        if (value > INT32_MAX || value < INT32_MIN) {
          return `${value.toFixed()} out of range`;
        }
        return true;
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        if (typeof value !== "number" || !Number.isInteger(value)) {
          return false;
        }
        if (value > UINT32_MAX || value < 0) {
          return `${value.toFixed()} out of range`;
        }
        return true;
      case ScalarType.BOOL:
        return typeof value == "boolean";
      case ScalarType.STRING:
        if (typeof value != "string") {
          return false;
        }
        return getTextEncoding().checkUtf8(value) || "invalid UTF8";
      case ScalarType.BYTES:
        return value instanceof Uint8Array;
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if (typeof value == "bigint" || typeof value == "number" || typeof value == "string" && value.length > 0) {
          try {
            protoInt64.parse(value);
            return true;
          } catch (_) {
            return `${value} out of range`;
          }
        }
        return false;
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if (typeof value == "bigint" || typeof value == "number" || typeof value == "string" && value.length > 0) {
          try {
            protoInt64.uParse(value);
            return true;
          } catch (_) {
            return `${value} out of range`;
          }
        }
        return false;
    }
  }
  function reasonSingular(field, val, details) {
    details = typeof details == "string" ? `: ${details}` : `, got ${formatVal(val)}`;
    if (field.scalar !== void 0) {
      return `expected ${scalarTypeDescription(field.scalar)}` + details;
    }
    if (field.enum !== void 0) {
      return `expected ${field.enum.toString()}` + details;
    }
    return `expected ${formatReflectMessage(field.message)}` + details;
  }
  function formatVal(val) {
    switch (typeof val) {
      case "object":
        if (val === null) {
          return "null";
        }
        if (val instanceof Uint8Array) {
          return `Uint8Array(${val.length})`;
        }
        if (Array.isArray(val)) {
          return `Array(${val.length})`;
        }
        if (isReflectList(val)) {
          return formatReflectList(val.field());
        }
        if (isReflectMap(val)) {
          return formatReflectMap(val.field());
        }
        if (isReflectMessage(val)) {
          return formatReflectMessage(val.desc);
        }
        if (isMessage(val)) {
          return `message ${val.$typeName}`;
        }
        return "object";
      case "string":
        return val.length > 30 ? "string" : `"${val.split('"').join('\\"')}"`;
      case "boolean":
        return String(val);
      case "number":
        return String(val);
      case "bigint":
        return String(val) + "n";
      default:
        return typeof val;
    }
  }
  function formatReflectMessage(desc) {
    return `ReflectMessage (${desc.typeName})`;
  }
  function formatReflectList(field) {
    switch (field.listKind) {
      case "message":
        return `ReflectList (${field.message.toString()})`;
      case "enum":
        return `ReflectList (${field.enum.toString()})`;
      case "scalar":
        return `ReflectList (${ScalarType[field.scalar]})`;
    }
  }
  function formatReflectMap(field) {
    switch (field.mapKind) {
      case "message":
        return `ReflectMap (${ScalarType[field.mapKey]}, ${field.message.toString()})`;
      case "enum":
        return `ReflectMap (${ScalarType[field.mapKey]}, ${field.enum.toString()})`;
      case "scalar":
        return `ReflectMap (${ScalarType[field.mapKey]}, ${ScalarType[field.scalar]})`;
    }
  }
  function scalarTypeDescription(scalar) {
    switch (scalar) {
      case ScalarType.STRING:
        return "string";
      case ScalarType.BOOL:
        return "boolean";
      case ScalarType.INT64:
      case ScalarType.SINT64:
      case ScalarType.SFIXED64:
        return "bigint (int64)";
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
        return "bigint (uint64)";
      case ScalarType.BYTES:
        return "Uint8Array";
      case ScalarType.DOUBLE:
        return "number (float64)";
      case ScalarType.FLOAT:
        return "number (float32)";
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        return "number (uint32)";
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        return "number (int32)";
    }
  }
  var init_reflect_check = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect-check.js"() {
      init_descriptors();
      init_is_message();
      init_error();
      init_guard();
      init_binary_encoding();
      init_text_encoding();
      init_proto_int64();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wkt/wrappers.js
  function isWrapper(arg) {
    return isWrapperTypeName(arg.$typeName);
  }
  function isWrapperDesc(messageDesc2) {
    const f = messageDesc2.fields[0];
    return isWrapperTypeName(messageDesc2.typeName) && f !== void 0 && f.fieldKind == "scalar" && f.name == "value" && f.number == 1;
  }
  function isWrapperTypeName(name) {
    return name.startsWith("google.protobuf.") && [
      "DoubleValue",
      "FloatValue",
      "Int64Value",
      "UInt64Value",
      "Int32Value",
      "UInt32Value",
      "BoolValue",
      "StringValue",
      "BytesValue"
    ].includes(name.substring(16));
  }
  var init_wrappers = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wkt/wrappers.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/create.js
  function create(schema, init) {
    if (isMessage(init, schema)) {
      return init;
    }
    const message = createZeroMessage(schema);
    if (init !== void 0) {
      initMessage(schema, message, init);
    }
    return message;
  }
  function initMessage(messageDesc2, message, init) {
    for (const member of messageDesc2.members) {
      let value = init[member.localName];
      if (value == null) {
        continue;
      }
      let field;
      if (member.kind == "oneof") {
        const oneofField = unsafeOneofCase(init, member);
        if (!oneofField) {
          continue;
        }
        field = oneofField;
        value = unsafeGet(init, oneofField);
      } else {
        field = member;
      }
      switch (field.fieldKind) {
        case "message":
          value = toMessage(field, value);
          break;
        case "scalar":
          value = initScalar(field, value);
          break;
        case "list":
          value = initList(field, value);
          break;
        case "map":
          value = initMap(field, value);
          break;
      }
      unsafeSet(message, field, value);
    }
    return message;
  }
  function initScalar(field, value) {
    if (field.scalar == ScalarType.BYTES) {
      return toU8Arr(value);
    }
    return value;
  }
  function initMap(field, value) {
    if (isObject(value)) {
      if (field.scalar == ScalarType.BYTES) {
        return convertObjectValues(value, toU8Arr);
      }
      if (field.mapKind == "message") {
        return convertObjectValues(value, (val) => toMessage(field, val));
      }
    }
    return value;
  }
  function initList(field, value) {
    if (Array.isArray(value)) {
      if (field.scalar == ScalarType.BYTES) {
        return value.map(toU8Arr);
      }
      if (field.listKind == "message") {
        return value.map((item) => toMessage(field, item));
      }
    }
    return value;
  }
  function toMessage(field, value) {
    if (field.fieldKind == "message" && !field.oneof && isWrapperDesc(field.message)) {
      return initScalar(field.message.fields[0], value);
    }
    if (isObject(value)) {
      if (field.message.typeName == "google.protobuf.Struct" && field.parent.typeName !== "google.protobuf.Value") {
        return value;
      }
      if (!isMessage(value, field.message)) {
        return create(field.message, value);
      }
    }
    return value;
  }
  function toU8Arr(value) {
    return Array.isArray(value) ? new Uint8Array(value) : value;
  }
  function convertObjectValues(obj, fn) {
    const ret = {};
    for (const entry of Object.entries(obj)) {
      ret[entry[0]] = fn(entry[1]);
    }
    return ret;
  }
  function createZeroMessage(desc) {
    let msg;
    if (!needsPrototypeChain(desc)) {
      msg = {
        $typeName: desc.typeName
      };
      for (const member of desc.members) {
        if (member.kind == "oneof" || member.presence == IMPLICIT3) {
          msg[member.localName] = createZeroField(member);
        }
      }
    } else {
      const cached = messagePrototypes.get(desc);
      let prototype;
      let members;
      if (cached) {
        ({ prototype, members } = cached);
      } else {
        prototype = {};
        members = /* @__PURE__ */ new Set();
        for (const member of desc.members) {
          if (member.kind == "oneof") {
            continue;
          }
          if (member.fieldKind != "scalar" && member.fieldKind != "enum") {
            continue;
          }
          if (member.presence == IMPLICIT3) {
            continue;
          }
          members.add(member);
          prototype[member.localName] = createZeroField(member);
        }
        messagePrototypes.set(desc, { prototype, members });
      }
      msg = Object.create(prototype);
      msg.$typeName = desc.typeName;
      for (const member of desc.members) {
        if (members.has(member)) {
          continue;
        }
        if (member.kind == "field") {
          if (member.fieldKind == "message") {
            continue;
          }
          if (member.fieldKind == "scalar" || member.fieldKind == "enum") {
            if (member.presence != IMPLICIT3) {
              continue;
            }
          }
        }
        msg[member.localName] = createZeroField(member);
      }
    }
    return msg;
  }
  function needsPrototypeChain(desc) {
    switch (desc.file.edition) {
      case EDITION_PROTO32:
        return false;
      case EDITION_PROTO22:
        return true;
      default:
        return desc.fields.some((f) => f.presence != IMPLICIT3 && f.fieldKind != "message" && !f.oneof);
    }
  }
  function createZeroField(field) {
    if (field.kind == "oneof") {
      return { case: void 0 };
    }
    if (field.fieldKind == "list") {
      return [];
    }
    if (field.fieldKind == "map") {
      return {};
    }
    if (field.fieldKind == "message") {
      return tokenZeroMessageField;
    }
    const defaultValue = field.getDefaultValue();
    if (defaultValue !== void 0) {
      return field.fieldKind == "scalar" && field.longAsString ? defaultValue.toString() : defaultValue;
    }
    return field.fieldKind == "scalar" ? scalarZeroValue(field.scalar, field.longAsString) : field.enum.values[0].number;
  }
  var EDITION_PROTO32, EDITION_PROTO22, IMPLICIT3, tokenZeroMessageField, messagePrototypes;
  var init_create = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/create.js"() {
      init_is_message();
      init_descriptors();
      init_scalar();
      init_guard();
      init_unsafe();
      init_wrappers();
      EDITION_PROTO32 = 999;
      EDITION_PROTO22 = 998;
      IMPLICIT3 = 2;
      tokenZeroMessageField = Symbol();
      messagePrototypes = /* @__PURE__ */ new WeakMap();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect.js
  function reflect(messageDesc2, message, check = true) {
    return new ReflectMessageImpl(messageDesc2, message, check);
  }
  function assertOwn(owner, member) {
    if (member.parent.typeName !== owner.$typeName) {
      throw new FieldError(member, `cannot use ${member.toString()} with message ${owner.$typeName}`, "ForeignFieldError");
    }
  }
  function messageToLocal(field, value) {
    if (!isReflectMessage(value)) {
      return value;
    }
    if (isWrapper(value.message) && !field.oneof && field.fieldKind == "message") {
      return value.message.value;
    }
    if (value.desc.typeName == "google.protobuf.Struct" && field.parent.typeName != "google.protobuf.Value") {
      return wktStructToLocal(value.message);
    }
    return value.message;
  }
  function messageToReflect(field, value, check) {
    if (value !== void 0) {
      if (isWrapperDesc(field.message) && !field.oneof && field.fieldKind == "message") {
        value = {
          $typeName: field.message.typeName,
          value: longToReflect(field.message.fields[0], value)
        };
      } else if (field.message.typeName == "google.protobuf.Struct" && field.parent.typeName != "google.protobuf.Value" && isObject(value)) {
        value = wktStructToReflect(value);
      }
    }
    return new ReflectMessageImpl(field.message, value, check);
  }
  function listItemToLocal(field, value) {
    if (field.listKind == "message") {
      return messageToLocal(field, value);
    }
    return longToLocal(field, value);
  }
  function listItemToReflect(field, value, check) {
    if (field.listKind == "message") {
      return messageToReflect(field, value, check);
    }
    return longToReflect(field, value);
  }
  function mapValueToLocal(field, value) {
    if (field.mapKind == "message") {
      return messageToLocal(field, value);
    }
    return longToLocal(field, value);
  }
  function mapValueToReflect(field, value, check) {
    if (field.mapKind == "message") {
      return messageToReflect(field, value, check);
    }
    return value;
  }
  function mapKeyToLocal(key) {
    return typeof key == "string" || typeof key == "number" ? key : String(key);
  }
  function mapKeyToReflect(key, type) {
    switch (type) {
      case ScalarType.STRING:
        return key;
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32: {
        const n = Number.parseInt(key);
        if (Number.isFinite(n)) {
          return n;
        }
        break;
      }
      case ScalarType.BOOL:
        switch (key) {
          case "true":
            return true;
          case "false":
            return false;
        }
        break;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
        try {
          return protoInt64.uParse(key);
        } catch (_a) {
        }
        break;
      default:
        try {
          return protoInt64.parse(key);
        } catch (_b) {
        }
        break;
    }
    return key;
  }
  function longToReflect(field, value) {
    switch (field.scalar) {
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if ("longAsString" in field && field.longAsString && typeof value == "string") {
          value = protoInt64.parse(value);
        }
        break;
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if ("longAsString" in field && field.longAsString && typeof value == "string") {
          value = protoInt64.uParse(value);
        }
        break;
    }
    return value;
  }
  function longToLocal(field, value) {
    switch (field.scalar) {
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if ("longAsString" in field && field.longAsString) {
          value = String(value);
        } else if (typeof value == "string" || typeof value == "number") {
          value = protoInt64.parse(value);
        }
        break;
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if ("longAsString" in field && field.longAsString) {
          value = String(value);
        } else if (typeof value == "string" || typeof value == "number") {
          value = protoInt64.uParse(value);
        }
        break;
    }
    return value;
  }
  function wktStructToReflect(json) {
    const struct = {
      $typeName: "google.protobuf.Struct",
      fields: {}
    };
    if (isObject(json)) {
      for (const [k, v] of Object.entries(json)) {
        struct.fields[k] = wktValueToReflect(v);
      }
    }
    return struct;
  }
  function wktStructToLocal(val) {
    const json = {};
    for (const [k, v] of Object.entries(val.fields)) {
      json[k] = wktValueToLocal(v);
    }
    return json;
  }
  function wktValueToLocal(val) {
    switch (val.kind.case) {
      case "structValue":
        return wktStructToLocal(val.kind.value);
      case "listValue":
        return val.kind.value.values.map(wktValueToLocal);
      case "nullValue":
      case void 0:
        return null;
      default:
        return val.kind.value;
    }
  }
  function wktValueToReflect(json) {
    const value = {
      $typeName: "google.protobuf.Value",
      kind: { case: void 0 }
    };
    switch (typeof json) {
      case "number":
        value.kind = { case: "numberValue", value: json };
        break;
      case "string":
        value.kind = { case: "stringValue", value: json };
        break;
      case "boolean":
        value.kind = { case: "boolValue", value: json };
        break;
      case "object":
        if (json === null) {
          const nullValue = 0;
          value.kind = { case: "nullValue", value: nullValue };
        } else if (Array.isArray(json)) {
          const listValue = {
            $typeName: "google.protobuf.ListValue",
            values: []
          };
          if (Array.isArray(json)) {
            for (const e of json) {
              listValue.values.push(wktValueToReflect(e));
            }
          }
          value.kind = {
            case: "listValue",
            value: listValue
          };
        } else {
          value.kind = {
            case: "structValue",
            value: wktStructToReflect(json)
          };
        }
        break;
    }
    return value;
  }
  var ReflectMessageImpl, ReflectListImpl, ReflectMapImpl;
  var init_reflect = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect.js"() {
      init_descriptors();
      init_reflect_check();
      init_error();
      init_unsafe();
      init_create();
      init_wrappers();
      init_scalar();
      init_proto_int64();
      init_guard();
      ReflectMessageImpl = class {
        get sortedFields() {
          var _a;
          return (_a = this._sortedFields) !== null && _a !== void 0 ? _a : (
            // biome-ignore lint/suspicious/noAssignInExpressions: no
            this._sortedFields = this.desc.fields.concat().sort((a, b) => a.number - b.number)
          );
        }
        constructor(messageDesc2, message, check = true) {
          this.lists = /* @__PURE__ */ new Map();
          this.maps = /* @__PURE__ */ new Map();
          this.check = check;
          this.desc = messageDesc2;
          this.message = this[unsafeLocal] = message !== null && message !== void 0 ? message : create(messageDesc2);
          this.fields = messageDesc2.fields;
          this.oneofs = messageDesc2.oneofs;
          this.members = messageDesc2.members;
        }
        findNumber(number) {
          if (!this._fieldsByNumber) {
            this._fieldsByNumber = new Map(this.desc.fields.map((f) => [f.number, f]));
          }
          return this._fieldsByNumber.get(number);
        }
        oneofCase(oneof) {
          assertOwn(this.message, oneof);
          return unsafeOneofCase(this.message, oneof);
        }
        isSet(field) {
          assertOwn(this.message, field);
          return unsafeIsSet(this.message, field);
        }
        clear(field) {
          assertOwn(this.message, field);
          unsafeClear(this.message, field);
        }
        get(field) {
          assertOwn(this.message, field);
          const value = unsafeGet(this.message, field);
          switch (field.fieldKind) {
            case "list":
              let list = this.lists.get(field);
              if (!list || list[unsafeLocal] !== value) {
                this.lists.set(
                  field,
                  // biome-ignore lint/suspicious/noAssignInExpressions: no
                  list = new ReflectListImpl(field, value, this.check)
                );
              }
              return list;
            case "map":
              let map = this.maps.get(field);
              if (!map || map[unsafeLocal] !== value) {
                this.maps.set(
                  field,
                  // biome-ignore lint/suspicious/noAssignInExpressions: no
                  map = new ReflectMapImpl(field, value, this.check)
                );
              }
              return map;
            case "message":
              return messageToReflect(field, value, this.check);
            case "scalar":
              return value === void 0 ? scalarZeroValue(field.scalar, false) : longToReflect(field, value);
            case "enum":
              return value !== null && value !== void 0 ? value : field.enum.values[0].number;
          }
        }
        set(field, value) {
          assertOwn(this.message, field);
          if (this.check) {
            const err = checkField(field, value);
            if (err) {
              throw err;
            }
          }
          let local;
          if (field.fieldKind == "message") {
            local = messageToLocal(field, value);
          } else if (isReflectMap(value) || isReflectList(value)) {
            local = value[unsafeLocal];
          } else {
            local = longToLocal(field, value);
          }
          unsafeSet(this.message, field, local);
        }
        getUnknown() {
          return this.message.$unknown;
        }
        setUnknown(value) {
          this.message.$unknown = value;
        }
      };
      ReflectListImpl = class {
        field() {
          return this._field;
        }
        get size() {
          return this._arr.length;
        }
        constructor(field, unsafeInput, check) {
          this._field = field;
          this._arr = this[unsafeLocal] = unsafeInput;
          this.check = check;
        }
        get(index) {
          const item = this._arr[index];
          return item === void 0 ? void 0 : listItemToReflect(this._field, item, this.check);
        }
        set(index, item) {
          if (index < 0 || index >= this._arr.length) {
            throw new FieldError(this._field, `list item #${index + 1}: out of range`);
          }
          if (this.check) {
            const err = checkListItem(this._field, index, item);
            if (err) {
              throw err;
            }
          }
          this._arr[index] = listItemToLocal(this._field, item);
        }
        add(item) {
          if (this.check) {
            const err = checkListItem(this._field, this._arr.length, item);
            if (err) {
              throw err;
            }
          }
          this._arr.push(listItemToLocal(this._field, item));
          return void 0;
        }
        clear() {
          this._arr.splice(0, this._arr.length);
        }
        [Symbol.iterator]() {
          return this.values();
        }
        keys() {
          return this._arr.keys();
        }
        *values() {
          for (const item of this._arr) {
            yield listItemToReflect(this._field, item, this.check);
          }
        }
        *entries() {
          for (let i = 0; i < this._arr.length; i++) {
            yield [i, listItemToReflect(this._field, this._arr[i], this.check)];
          }
        }
      };
      ReflectMapImpl = class {
        constructor(field, unsafeInput, check = true) {
          this.obj = this[unsafeLocal] = unsafeInput !== null && unsafeInput !== void 0 ? unsafeInput : {};
          this.check = check;
          this._field = field;
        }
        field() {
          return this._field;
        }
        set(key, value) {
          if (this.check) {
            const err = checkMapEntry(this._field, key, value);
            if (err) {
              throw err;
            }
          }
          this.obj[mapKeyToLocal(key)] = mapValueToLocal(this._field, value);
          return this;
        }
        delete(key) {
          const k = mapKeyToLocal(key);
          const has = Object.prototype.hasOwnProperty.call(this.obj, k);
          if (has) {
            delete this.obj[k];
          }
          return has;
        }
        clear() {
          for (const key of Object.keys(this.obj)) {
            delete this.obj[key];
          }
        }
        get(key) {
          let val = this.obj[mapKeyToLocal(key)];
          if (val !== void 0) {
            val = mapValueToReflect(this._field, val, this.check);
          }
          return val;
        }
        has(key) {
          return Object.prototype.hasOwnProperty.call(this.obj, mapKeyToLocal(key));
        }
        *keys() {
          for (const objKey of Object.keys(this.obj)) {
            yield mapKeyToReflect(objKey, this._field.mapKey);
          }
        }
        *entries() {
          for (const objEntry of Object.entries(this.obj)) {
            yield [
              mapKeyToReflect(objEntry[0], this._field.mapKey),
              mapValueToReflect(this._field, objEntry[1], this.check)
            ];
          }
        }
        [Symbol.iterator]() {
          return this.entries();
        }
        get size() {
          return Object.keys(this.obj).length;
        }
        *values() {
          for (const val of Object.values(this.obj)) {
            yield mapValueToReflect(this._field, val, this.check);
          }
        }
        forEach(callbackfn, thisArg) {
          for (const mapEntry of this.entries()) {
            callbackfn.call(thisArg, mapEntry[1], mapEntry[0], this);
          }
        }
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/to-binary.js
  function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
  }
  function toBinary(schema, message, options) {
    return writeFields(new BinaryWriter(), makeWriteOptions(options), reflect(schema, message)).finish();
  }
  function writeFields(writer, opts, msg) {
    var _a;
    for (const f of msg.sortedFields) {
      if (!msg.isSet(f)) {
        if (f.presence == LEGACY_REQUIRED2) {
          throw new Error(`cannot encode ${f} to binary: required field not set`);
        }
        continue;
      }
      writeField(writer, opts, msg, f);
    }
    if (opts.writeUnknownFields) {
      for (const { no, wireType, data } of (_a = msg.getUnknown()) !== null && _a !== void 0 ? _a : []) {
        writer.tag(no, wireType).raw(data);
      }
    }
    return writer;
  }
  function writeField(writer, opts, msg, field) {
    var _a;
    switch (field.fieldKind) {
      case "scalar":
      case "enum":
        writeScalar(writer, msg.desc.typeName, field.name, (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32, field.number, msg.get(field));
        break;
      case "list":
        writeListField(writer, opts, field, msg.get(field));
        break;
      case "message":
        writeMessageField(writer, opts, field, msg.get(field));
        break;
      case "map":
        for (const [key, val] of msg.get(field)) {
          writeMapEntry(writer, opts, field, key, val);
        }
        break;
    }
  }
  function writeScalar(writer, msgName, fieldName, scalarType, fieldNo, value) {
    writeScalarValue(writer.tag(fieldNo, writeTypeOfScalar(scalarType)), msgName, fieldName, scalarType, value);
  }
  function writeMessageField(writer, opts, field, message) {
    if (field.delimitedEncoding) {
      writeFields(writer.tag(field.number, WireType.StartGroup), opts, message).tag(field.number, WireType.EndGroup);
    } else {
      writeFields(writer.tag(field.number, WireType.LengthDelimited).fork(), opts, message).join();
    }
  }
  function writeListField(writer, opts, field, list) {
    var _a;
    if (field.listKind == "message") {
      for (const item of list) {
        writeMessageField(writer, opts, field, item);
      }
      return;
    }
    const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32;
    if (field.packed) {
      if (!list.size) {
        return;
      }
      writer.tag(field.number, WireType.LengthDelimited).fork();
      for (const item of list) {
        writeScalarValue(writer, field.parent.typeName, field.name, scalarType, item);
      }
      writer.join();
      return;
    }
    for (const item of list) {
      writeScalar(writer, field.parent.typeName, field.name, scalarType, field.number, item);
    }
  }
  function writeMapEntry(writer, opts, field, key, value) {
    var _a;
    writer.tag(field.number, WireType.LengthDelimited).fork();
    writeScalar(writer, field.parent.typeName, field.name, field.mapKey, 1, key);
    switch (field.mapKind) {
      case "scalar":
      case "enum":
        writeScalar(writer, field.parent.typeName, field.name, (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32, 2, value);
        break;
      case "message":
        writeFields(writer.tag(2, WireType.LengthDelimited).fork(), opts, value).join();
        break;
    }
    writer.join();
  }
  function writeScalarValue(writer, msgName, fieldName, type, value) {
    try {
      switch (type) {
        case ScalarType.STRING:
          writer.string(value);
          break;
        case ScalarType.BOOL:
          writer.bool(value);
          break;
        case ScalarType.DOUBLE:
          writer.double(value);
          break;
        case ScalarType.FLOAT:
          writer.float(value);
          break;
        case ScalarType.INT32:
          writer.int32(value);
          break;
        case ScalarType.INT64:
          writer.int64(value);
          break;
        case ScalarType.UINT64:
          writer.uint64(value);
          break;
        case ScalarType.FIXED64:
          writer.fixed64(value);
          break;
        case ScalarType.BYTES:
          writer.bytes(value);
          break;
        case ScalarType.FIXED32:
          writer.fixed32(value);
          break;
        case ScalarType.SFIXED32:
          writer.sfixed32(value);
          break;
        case ScalarType.SFIXED64:
          writer.sfixed64(value);
          break;
        case ScalarType.SINT64:
          writer.sint64(value);
          break;
        case ScalarType.UINT32:
          writer.uint32(value);
          break;
        case ScalarType.SINT32:
          writer.sint32(value);
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw new Error(`cannot encode field ${msgName}.${fieldName} to binary: ${e.message}`);
      }
      throw e;
    }
  }
  function writeTypeOfScalar(type) {
    switch (type) {
      case ScalarType.BYTES:
      case ScalarType.STRING:
        return WireType.LengthDelimited;
      case ScalarType.DOUBLE:
      case ScalarType.FIXED64:
      case ScalarType.SFIXED64:
        return WireType.Bit64;
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.FLOAT:
        return WireType.Bit32;
      default:
        return WireType.Varint;
    }
  }
  var LEGACY_REQUIRED2, writeDefaults;
  var init_to_binary = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/to-binary.js"() {
      init_reflect();
      init_binary_encoding();
      init_descriptors();
      LEGACY_REQUIRED2 = 3;
      writeDefaults = {
        writeUnknownFields: true
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/clone.js
  var init_clone = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/clone.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/message.js
  function messageDesc(file, path, ...paths) {
    return paths.reduce((acc, cur) => acc.nestedMessages[cur], file.messages[path]);
  }
  var init_message = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/message.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/enum.js
  var init_enum = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/enum.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/wkt/gen/google/protobuf/descriptor_pb.js
  var file_google_protobuf_descriptor, FileDescriptorProtoSchema, ExtensionRangeOptions_VerificationState, FieldDescriptorProto_Type, FieldDescriptorProto_Label, FileOptions_OptimizeMode, FieldOptions_CType, FieldOptions_JSType, FieldOptions_OptionRetention, FieldOptions_OptionTargetType, MethodOptions_IdempotencyLevel, FeatureSet_VisibilityFeature_DefaultSymbolVisibility, FeatureSet_FieldPresence, FeatureSet_EnumType, FeatureSet_RepeatedFieldEncoding, FeatureSet_Utf8Validation, FeatureSet_MessageEncoding, FeatureSet_JsonFormat, FeatureSet_EnforceNamingStyle, GeneratedCodeInfo_Annotation_Semantic, Edition, SymbolVisibility;
  var init_descriptor_pb = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/wkt/gen/google/protobuf/descriptor_pb.js"() {
      init_boot();
      init_message();
      file_google_protobuf_descriptor = /* @__PURE__ */ boot({ "name": "google/protobuf/descriptor.proto", "package": "google.protobuf", "messageType": [{ "name": "FileDescriptorSet", "field": [{ "name": "file", "number": 1, "type": 11, "label": 3, "typeName": ".google.protobuf.FileDescriptorProto" }], "extensionRange": [{ "start": 536e6, "end": 536000001 }] }, { "name": "FileDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "package", "number": 2, "type": 9, "label": 1 }, { "name": "dependency", "number": 3, "type": 9, "label": 3 }, { "name": "public_dependency", "number": 10, "type": 5, "label": 3 }, { "name": "weak_dependency", "number": 11, "type": 5, "label": 3 }, { "name": "option_dependency", "number": 15, "type": 9, "label": 3 }, { "name": "message_type", "number": 4, "type": 11, "label": 3, "typeName": ".google.protobuf.DescriptorProto" }, { "name": "enum_type", "number": 5, "type": 11, "label": 3, "typeName": ".google.protobuf.EnumDescriptorProto" }, { "name": "service", "number": 6, "type": 11, "label": 3, "typeName": ".google.protobuf.ServiceDescriptorProto" }, { "name": "extension", "number": 7, "type": 11, "label": 3, "typeName": ".google.protobuf.FieldDescriptorProto" }, { "name": "options", "number": 8, "type": 11, "label": 1, "typeName": ".google.protobuf.FileOptions" }, { "name": "source_code_info", "number": 9, "type": 11, "label": 1, "typeName": ".google.protobuf.SourceCodeInfo" }, { "name": "syntax", "number": 12, "type": 9, "label": 1 }, { "name": "edition", "number": 14, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }] }, { "name": "DescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "field", "number": 2, "type": 11, "label": 3, "typeName": ".google.protobuf.FieldDescriptorProto" }, { "name": "extension", "number": 6, "type": 11, "label": 3, "typeName": ".google.protobuf.FieldDescriptorProto" }, { "name": "nested_type", "number": 3, "type": 11, "label": 3, "typeName": ".google.protobuf.DescriptorProto" }, { "name": "enum_type", "number": 4, "type": 11, "label": 3, "typeName": ".google.protobuf.EnumDescriptorProto" }, { "name": "extension_range", "number": 5, "type": 11, "label": 3, "typeName": ".google.protobuf.DescriptorProto.ExtensionRange" }, { "name": "oneof_decl", "number": 8, "type": 11, "label": 3, "typeName": ".google.protobuf.OneofDescriptorProto" }, { "name": "options", "number": 7, "type": 11, "label": 1, "typeName": ".google.protobuf.MessageOptions" }, { "name": "reserved_range", "number": 9, "type": 11, "label": 3, "typeName": ".google.protobuf.DescriptorProto.ReservedRange" }, { "name": "reserved_name", "number": 10, "type": 9, "label": 3 }, { "name": "visibility", "number": 11, "type": 14, "label": 1, "typeName": ".google.protobuf.SymbolVisibility" }], "nestedType": [{ "name": "ExtensionRange", "field": [{ "name": "start", "number": 1, "type": 5, "label": 1 }, { "name": "end", "number": 2, "type": 5, "label": 1 }, { "name": "options", "number": 3, "type": 11, "label": 1, "typeName": ".google.protobuf.ExtensionRangeOptions" }] }, { "name": "ReservedRange", "field": [{ "name": "start", "number": 1, "type": 5, "label": 1 }, { "name": "end", "number": 2, "type": 5, "label": 1 }] }] }, { "name": "ExtensionRangeOptions", "field": [{ "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }, { "name": "declaration", "number": 2, "type": 11, "label": 3, "typeName": ".google.protobuf.ExtensionRangeOptions.Declaration", "options": { "retention": 2 } }, { "name": "features", "number": 50, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "verification", "number": 3, "type": 14, "label": 1, "typeName": ".google.protobuf.ExtensionRangeOptions.VerificationState", "defaultValue": "UNVERIFIED", "options": { "retention": 2 } }], "nestedType": [{ "name": "Declaration", "field": [{ "name": "number", "number": 1, "type": 5, "label": 1 }, { "name": "full_name", "number": 2, "type": 9, "label": 1 }, { "name": "type", "number": 3, "type": 9, "label": 1 }, { "name": "reserved", "number": 5, "type": 8, "label": 1 }, { "name": "repeated", "number": 6, "type": 8, "label": 1 }] }], "enumType": [{ "name": "VerificationState", "value": [{ "name": "DECLARATION", "number": 0 }, { "name": "UNVERIFIED", "number": 1 }] }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "FieldDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "number", "number": 3, "type": 5, "label": 1 }, { "name": "label", "number": 4, "type": 14, "label": 1, "typeName": ".google.protobuf.FieldDescriptorProto.Label" }, { "name": "type", "number": 5, "type": 14, "label": 1, "typeName": ".google.protobuf.FieldDescriptorProto.Type" }, { "name": "type_name", "number": 6, "type": 9, "label": 1 }, { "name": "extendee", "number": 2, "type": 9, "label": 1 }, { "name": "default_value", "number": 7, "type": 9, "label": 1 }, { "name": "oneof_index", "number": 9, "type": 5, "label": 1 }, { "name": "json_name", "number": 10, "type": 9, "label": 1 }, { "name": "options", "number": 8, "type": 11, "label": 1, "typeName": ".google.protobuf.FieldOptions" }, { "name": "proto3_optional", "number": 17, "type": 8, "label": 1 }], "enumType": [{ "name": "Type", "value": [{ "name": "TYPE_DOUBLE", "number": 1 }, { "name": "TYPE_FLOAT", "number": 2 }, { "name": "TYPE_INT64", "number": 3 }, { "name": "TYPE_UINT64", "number": 4 }, { "name": "TYPE_INT32", "number": 5 }, { "name": "TYPE_FIXED64", "number": 6 }, { "name": "TYPE_FIXED32", "number": 7 }, { "name": "TYPE_BOOL", "number": 8 }, { "name": "TYPE_STRING", "number": 9 }, { "name": "TYPE_GROUP", "number": 10 }, { "name": "TYPE_MESSAGE", "number": 11 }, { "name": "TYPE_BYTES", "number": 12 }, { "name": "TYPE_UINT32", "number": 13 }, { "name": "TYPE_ENUM", "number": 14 }, { "name": "TYPE_SFIXED32", "number": 15 }, { "name": "TYPE_SFIXED64", "number": 16 }, { "name": "TYPE_SINT32", "number": 17 }, { "name": "TYPE_SINT64", "number": 18 }] }, { "name": "Label", "value": [{ "name": "LABEL_OPTIONAL", "number": 1 }, { "name": "LABEL_REPEATED", "number": 3 }, { "name": "LABEL_REQUIRED", "number": 2 }] }] }, { "name": "OneofDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "options", "number": 2, "type": 11, "label": 1, "typeName": ".google.protobuf.OneofOptions" }] }, { "name": "EnumDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "value", "number": 2, "type": 11, "label": 3, "typeName": ".google.protobuf.EnumValueDescriptorProto" }, { "name": "options", "number": 3, "type": 11, "label": 1, "typeName": ".google.protobuf.EnumOptions" }, { "name": "reserved_range", "number": 4, "type": 11, "label": 3, "typeName": ".google.protobuf.EnumDescriptorProto.EnumReservedRange" }, { "name": "reserved_name", "number": 5, "type": 9, "label": 3 }, { "name": "visibility", "number": 6, "type": 14, "label": 1, "typeName": ".google.protobuf.SymbolVisibility" }], "nestedType": [{ "name": "EnumReservedRange", "field": [{ "name": "start", "number": 1, "type": 5, "label": 1 }, { "name": "end", "number": 2, "type": 5, "label": 1 }] }] }, { "name": "EnumValueDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "number", "number": 2, "type": 5, "label": 1 }, { "name": "options", "number": 3, "type": 11, "label": 1, "typeName": ".google.protobuf.EnumValueOptions" }] }, { "name": "ServiceDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "method", "number": 2, "type": 11, "label": 3, "typeName": ".google.protobuf.MethodDescriptorProto" }, { "name": "options", "number": 3, "type": 11, "label": 1, "typeName": ".google.protobuf.ServiceOptions" }] }, { "name": "MethodDescriptorProto", "field": [{ "name": "name", "number": 1, "type": 9, "label": 1 }, { "name": "input_type", "number": 2, "type": 9, "label": 1 }, { "name": "output_type", "number": 3, "type": 9, "label": 1 }, { "name": "options", "number": 4, "type": 11, "label": 1, "typeName": ".google.protobuf.MethodOptions" }, { "name": "client_streaming", "number": 5, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "server_streaming", "number": 6, "type": 8, "label": 1, "defaultValue": "false" }] }, { "name": "FileOptions", "field": [{ "name": "java_package", "number": 1, "type": 9, "label": 1 }, { "name": "java_outer_classname", "number": 8, "type": 9, "label": 1 }, { "name": "java_multiple_files", "number": 10, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "java_generate_equals_and_hash", "number": 20, "type": 8, "label": 1, "options": { "deprecated": true } }, { "name": "java_string_check_utf8", "number": 27, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "optimize_for", "number": 9, "type": 14, "label": 1, "typeName": ".google.protobuf.FileOptions.OptimizeMode", "defaultValue": "SPEED" }, { "name": "go_package", "number": 11, "type": 9, "label": 1 }, { "name": "cc_generic_services", "number": 16, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "java_generic_services", "number": 17, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "py_generic_services", "number": 18, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "deprecated", "number": 23, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "cc_enable_arenas", "number": 31, "type": 8, "label": 1, "defaultValue": "true" }, { "name": "objc_class_prefix", "number": 36, "type": 9, "label": 1 }, { "name": "csharp_namespace", "number": 37, "type": 9, "label": 1 }, { "name": "swift_prefix", "number": 39, "type": 9, "label": 1 }, { "name": "php_class_prefix", "number": 40, "type": 9, "label": 1 }, { "name": "php_namespace", "number": 41, "type": 9, "label": 1 }, { "name": "php_metadata_namespace", "number": 44, "type": 9, "label": 1 }, { "name": "ruby_package", "number": 45, "type": 9, "label": 1 }, { "name": "features", "number": 50, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "enumType": [{ "name": "OptimizeMode", "value": [{ "name": "SPEED", "number": 1 }, { "name": "CODE_SIZE", "number": 2 }, { "name": "LITE_RUNTIME", "number": 3 }] }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "MessageOptions", "field": [{ "name": "message_set_wire_format", "number": 1, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "no_standard_descriptor_accessor", "number": 2, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "deprecated", "number": 3, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "map_entry", "number": 7, "type": 8, "label": 1 }, { "name": "deprecated_legacy_json_field_conflicts", "number": 11, "type": 8, "label": 1, "options": { "deprecated": true } }, { "name": "features", "number": 12, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "FieldOptions", "field": [{ "name": "ctype", "number": 1, "type": 14, "label": 1, "typeName": ".google.protobuf.FieldOptions.CType", "defaultValue": "STRING" }, { "name": "packed", "number": 2, "type": 8, "label": 1 }, { "name": "jstype", "number": 6, "type": 14, "label": 1, "typeName": ".google.protobuf.FieldOptions.JSType", "defaultValue": "JS_NORMAL" }, { "name": "lazy", "number": 5, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "unverified_lazy", "number": 15, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "deprecated", "number": 3, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "weak", "number": 10, "type": 8, "label": 1, "defaultValue": "false", "options": { "deprecated": true } }, { "name": "debug_redact", "number": 16, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "retention", "number": 17, "type": 14, "label": 1, "typeName": ".google.protobuf.FieldOptions.OptionRetention" }, { "name": "targets", "number": 19, "type": 14, "label": 3, "typeName": ".google.protobuf.FieldOptions.OptionTargetType" }, { "name": "edition_defaults", "number": 20, "type": 11, "label": 3, "typeName": ".google.protobuf.FieldOptions.EditionDefault" }, { "name": "features", "number": 21, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "feature_support", "number": 22, "type": 11, "label": 1, "typeName": ".google.protobuf.FieldOptions.FeatureSupport" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "nestedType": [{ "name": "EditionDefault", "field": [{ "name": "edition", "number": 3, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }, { "name": "value", "number": 2, "type": 9, "label": 1 }] }, { "name": "FeatureSupport", "field": [{ "name": "edition_introduced", "number": 1, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }, { "name": "edition_deprecated", "number": 2, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }, { "name": "deprecation_warning", "number": 3, "type": 9, "label": 1 }, { "name": "edition_removed", "number": 4, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }] }], "enumType": [{ "name": "CType", "value": [{ "name": "STRING", "number": 0 }, { "name": "CORD", "number": 1 }, { "name": "STRING_PIECE", "number": 2 }] }, { "name": "JSType", "value": [{ "name": "JS_NORMAL", "number": 0 }, { "name": "JS_STRING", "number": 1 }, { "name": "JS_NUMBER", "number": 2 }] }, { "name": "OptionRetention", "value": [{ "name": "RETENTION_UNKNOWN", "number": 0 }, { "name": "RETENTION_RUNTIME", "number": 1 }, { "name": "RETENTION_SOURCE", "number": 2 }] }, { "name": "OptionTargetType", "value": [{ "name": "TARGET_TYPE_UNKNOWN", "number": 0 }, { "name": "TARGET_TYPE_FILE", "number": 1 }, { "name": "TARGET_TYPE_EXTENSION_RANGE", "number": 2 }, { "name": "TARGET_TYPE_MESSAGE", "number": 3 }, { "name": "TARGET_TYPE_FIELD", "number": 4 }, { "name": "TARGET_TYPE_ONEOF", "number": 5 }, { "name": "TARGET_TYPE_ENUM", "number": 6 }, { "name": "TARGET_TYPE_ENUM_ENTRY", "number": 7 }, { "name": "TARGET_TYPE_SERVICE", "number": 8 }, { "name": "TARGET_TYPE_METHOD", "number": 9 }] }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "OneofOptions", "field": [{ "name": "features", "number": 1, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "EnumOptions", "field": [{ "name": "allow_alias", "number": 2, "type": 8, "label": 1 }, { "name": "deprecated", "number": 3, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "deprecated_legacy_json_field_conflicts", "number": 6, "type": 8, "label": 1, "options": { "deprecated": true } }, { "name": "features", "number": 7, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "EnumValueOptions", "field": [{ "name": "deprecated", "number": 1, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "features", "number": 2, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "debug_redact", "number": 3, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "feature_support", "number": 4, "type": 11, "label": 1, "typeName": ".google.protobuf.FieldOptions.FeatureSupport" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "ServiceOptions", "field": [{ "name": "features", "number": 34, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "deprecated", "number": 33, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "MethodOptions", "field": [{ "name": "deprecated", "number": 33, "type": 8, "label": 1, "defaultValue": "false" }, { "name": "idempotency_level", "number": 34, "type": 14, "label": 1, "typeName": ".google.protobuf.MethodOptions.IdempotencyLevel", "defaultValue": "IDEMPOTENCY_UNKNOWN" }, { "name": "features", "number": 35, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "uninterpreted_option", "number": 999, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption" }], "enumType": [{ "name": "IdempotencyLevel", "value": [{ "name": "IDEMPOTENCY_UNKNOWN", "number": 0 }, { "name": "NO_SIDE_EFFECTS", "number": 1 }, { "name": "IDEMPOTENT", "number": 2 }] }], "extensionRange": [{ "start": 1e3, "end": 536870912 }] }, { "name": "UninterpretedOption", "field": [{ "name": "name", "number": 2, "type": 11, "label": 3, "typeName": ".google.protobuf.UninterpretedOption.NamePart" }, { "name": "identifier_value", "number": 3, "type": 9, "label": 1 }, { "name": "positive_int_value", "number": 4, "type": 4, "label": 1 }, { "name": "negative_int_value", "number": 5, "type": 3, "label": 1 }, { "name": "double_value", "number": 6, "type": 1, "label": 1 }, { "name": "string_value", "number": 7, "type": 12, "label": 1 }, { "name": "aggregate_value", "number": 8, "type": 9, "label": 1 }], "nestedType": [{ "name": "NamePart", "field": [{ "name": "name_part", "number": 1, "type": 9, "label": 2 }, { "name": "is_extension", "number": 2, "type": 8, "label": 2 }] }] }, { "name": "FeatureSet", "field": [{ "name": "field_presence", "number": 1, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.FieldPresence", "options": { "retention": 1, "targets": [4, 1], "editionDefaults": [{ "value": "EXPLICIT", "edition": 900 }, { "value": "IMPLICIT", "edition": 999 }, { "value": "EXPLICIT", "edition": 1e3 }] } }, { "name": "enum_type", "number": 2, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.EnumType", "options": { "retention": 1, "targets": [6, 1], "editionDefaults": [{ "value": "CLOSED", "edition": 900 }, { "value": "OPEN", "edition": 999 }] } }, { "name": "repeated_field_encoding", "number": 3, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.RepeatedFieldEncoding", "options": { "retention": 1, "targets": [4, 1], "editionDefaults": [{ "value": "EXPANDED", "edition": 900 }, { "value": "PACKED", "edition": 999 }] } }, { "name": "utf8_validation", "number": 4, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.Utf8Validation", "options": { "retention": 1, "targets": [4, 1], "editionDefaults": [{ "value": "NONE", "edition": 900 }, { "value": "VERIFY", "edition": 999 }] } }, { "name": "message_encoding", "number": 5, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.MessageEncoding", "options": { "retention": 1, "targets": [4, 1], "editionDefaults": [{ "value": "LENGTH_PREFIXED", "edition": 900 }] } }, { "name": "json_format", "number": 6, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.JsonFormat", "options": { "retention": 1, "targets": [3, 6, 1], "editionDefaults": [{ "value": "LEGACY_BEST_EFFORT", "edition": 900 }, { "value": "ALLOW", "edition": 999 }] } }, { "name": "enforce_naming_style", "number": 7, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.EnforceNamingStyle", "options": { "retention": 2, "targets": [1, 2, 3, 4, 5, 6, 7, 8, 9], "editionDefaults": [{ "value": "STYLE_LEGACY", "edition": 900 }, { "value": "STYLE2024", "edition": 1001 }] } }, { "name": "default_symbol_visibility", "number": 8, "type": 14, "label": 1, "typeName": ".google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility", "options": { "retention": 2, "targets": [1], "editionDefaults": [{ "value": "EXPORT_ALL", "edition": 900 }, { "value": "EXPORT_TOP_LEVEL", "edition": 1001 }] } }], "nestedType": [{ "name": "VisibilityFeature", "enumType": [{ "name": "DefaultSymbolVisibility", "value": [{ "name": "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN", "number": 0 }, { "name": "EXPORT_ALL", "number": 1 }, { "name": "EXPORT_TOP_LEVEL", "number": 2 }, { "name": "LOCAL_ALL", "number": 3 }, { "name": "STRICT", "number": 4 }] }] }], "enumType": [{ "name": "FieldPresence", "value": [{ "name": "FIELD_PRESENCE_UNKNOWN", "number": 0 }, { "name": "EXPLICIT", "number": 1 }, { "name": "IMPLICIT", "number": 2 }, { "name": "LEGACY_REQUIRED", "number": 3 }] }, { "name": "EnumType", "value": [{ "name": "ENUM_TYPE_UNKNOWN", "number": 0 }, { "name": "OPEN", "number": 1 }, { "name": "CLOSED", "number": 2 }] }, { "name": "RepeatedFieldEncoding", "value": [{ "name": "REPEATED_FIELD_ENCODING_UNKNOWN", "number": 0 }, { "name": "PACKED", "number": 1 }, { "name": "EXPANDED", "number": 2 }] }, { "name": "Utf8Validation", "value": [{ "name": "UTF8_VALIDATION_UNKNOWN", "number": 0 }, { "name": "VERIFY", "number": 2 }, { "name": "NONE", "number": 3 }] }, { "name": "MessageEncoding", "value": [{ "name": "MESSAGE_ENCODING_UNKNOWN", "number": 0 }, { "name": "LENGTH_PREFIXED", "number": 1 }, { "name": "DELIMITED", "number": 2 }] }, { "name": "JsonFormat", "value": [{ "name": "JSON_FORMAT_UNKNOWN", "number": 0 }, { "name": "ALLOW", "number": 1 }, { "name": "LEGACY_BEST_EFFORT", "number": 2 }] }, { "name": "EnforceNamingStyle", "value": [{ "name": "ENFORCE_NAMING_STYLE_UNKNOWN", "number": 0 }, { "name": "STYLE2024", "number": 1 }, { "name": "STYLE_LEGACY", "number": 2 }] }], "extensionRange": [{ "start": 1e3, "end": 9995 }, { "start": 9995, "end": 1e4 }, { "start": 1e4, "end": 10001 }] }, { "name": "FeatureSetDefaults", "field": [{ "name": "defaults", "number": 1, "type": 11, "label": 3, "typeName": ".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault" }, { "name": "minimum_edition", "number": 4, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }, { "name": "maximum_edition", "number": 5, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }], "nestedType": [{ "name": "FeatureSetEditionDefault", "field": [{ "name": "edition", "number": 3, "type": 14, "label": 1, "typeName": ".google.protobuf.Edition" }, { "name": "overridable_features", "number": 4, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }, { "name": "fixed_features", "number": 5, "type": 11, "label": 1, "typeName": ".google.protobuf.FeatureSet" }] }] }, { "name": "SourceCodeInfo", "field": [{ "name": "location", "number": 1, "type": 11, "label": 3, "typeName": ".google.protobuf.SourceCodeInfo.Location" }], "nestedType": [{ "name": "Location", "field": [{ "name": "path", "number": 1, "type": 5, "label": 3, "options": { "packed": true } }, { "name": "span", "number": 2, "type": 5, "label": 3, "options": { "packed": true } }, { "name": "leading_comments", "number": 3, "type": 9, "label": 1 }, { "name": "trailing_comments", "number": 4, "type": 9, "label": 1 }, { "name": "leading_detached_comments", "number": 6, "type": 9, "label": 3 }] }], "extensionRange": [{ "start": 536e6, "end": 536000001 }] }, { "name": "GeneratedCodeInfo", "field": [{ "name": "annotation", "number": 1, "type": 11, "label": 3, "typeName": ".google.protobuf.GeneratedCodeInfo.Annotation" }], "nestedType": [{ "name": "Annotation", "field": [{ "name": "path", "number": 1, "type": 5, "label": 3, "options": { "packed": true } }, { "name": "source_file", "number": 2, "type": 9, "label": 1 }, { "name": "begin", "number": 3, "type": 5, "label": 1 }, { "name": "end", "number": 4, "type": 5, "label": 1 }, { "name": "semantic", "number": 5, "type": 14, "label": 1, "typeName": ".google.protobuf.GeneratedCodeInfo.Annotation.Semantic" }], "enumType": [{ "name": "Semantic", "value": [{ "name": "NONE", "number": 0 }, { "name": "SET", "number": 1 }, { "name": "ALIAS", "number": 2 }] }] }] }], "enumType": [{ "name": "Edition", "value": [{ "name": "EDITION_UNKNOWN", "number": 0 }, { "name": "EDITION_LEGACY", "number": 900 }, { "name": "EDITION_PROTO2", "number": 998 }, { "name": "EDITION_PROTO3", "number": 999 }, { "name": "EDITION_2023", "number": 1e3 }, { "name": "EDITION_2024", "number": 1001 }, { "name": "EDITION_1_TEST_ONLY", "number": 1 }, { "name": "EDITION_2_TEST_ONLY", "number": 2 }, { "name": "EDITION_99997_TEST_ONLY", "number": 99997 }, { "name": "EDITION_99998_TEST_ONLY", "number": 99998 }, { "name": "EDITION_99999_TEST_ONLY", "number": 99999 }, { "name": "EDITION_MAX", "number": 2147483647 }] }, { "name": "SymbolVisibility", "value": [{ "name": "VISIBILITY_UNSET", "number": 0 }, { "name": "VISIBILITY_LOCAL", "number": 1 }, { "name": "VISIBILITY_EXPORT", "number": 2 }] }] });
      FileDescriptorProtoSchema = /* @__PURE__ */ messageDesc(file_google_protobuf_descriptor, 1);
      (function(ExtensionRangeOptions_VerificationState2) {
        ExtensionRangeOptions_VerificationState2[ExtensionRangeOptions_VerificationState2["DECLARATION"] = 0] = "DECLARATION";
        ExtensionRangeOptions_VerificationState2[ExtensionRangeOptions_VerificationState2["UNVERIFIED"] = 1] = "UNVERIFIED";
      })(ExtensionRangeOptions_VerificationState || (ExtensionRangeOptions_VerificationState = {}));
      (function(FieldDescriptorProto_Type2) {
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["DOUBLE"] = 1] = "DOUBLE";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["FLOAT"] = 2] = "FLOAT";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["INT64"] = 3] = "INT64";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["UINT64"] = 4] = "UINT64";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["INT32"] = 5] = "INT32";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["FIXED64"] = 6] = "FIXED64";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["FIXED32"] = 7] = "FIXED32";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["BOOL"] = 8] = "BOOL";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["STRING"] = 9] = "STRING";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["GROUP"] = 10] = "GROUP";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["MESSAGE"] = 11] = "MESSAGE";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["BYTES"] = 12] = "BYTES";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["UINT32"] = 13] = "UINT32";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["ENUM"] = 14] = "ENUM";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["SFIXED32"] = 15] = "SFIXED32";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["SFIXED64"] = 16] = "SFIXED64";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["SINT32"] = 17] = "SINT32";
        FieldDescriptorProto_Type2[FieldDescriptorProto_Type2["SINT64"] = 18] = "SINT64";
      })(FieldDescriptorProto_Type || (FieldDescriptorProto_Type = {}));
      (function(FieldDescriptorProto_Label2) {
        FieldDescriptorProto_Label2[FieldDescriptorProto_Label2["OPTIONAL"] = 1] = "OPTIONAL";
        FieldDescriptorProto_Label2[FieldDescriptorProto_Label2["REPEATED"] = 3] = "REPEATED";
        FieldDescriptorProto_Label2[FieldDescriptorProto_Label2["REQUIRED"] = 2] = "REQUIRED";
      })(FieldDescriptorProto_Label || (FieldDescriptorProto_Label = {}));
      (function(FileOptions_OptimizeMode2) {
        FileOptions_OptimizeMode2[FileOptions_OptimizeMode2["SPEED"] = 1] = "SPEED";
        FileOptions_OptimizeMode2[FileOptions_OptimizeMode2["CODE_SIZE"] = 2] = "CODE_SIZE";
        FileOptions_OptimizeMode2[FileOptions_OptimizeMode2["LITE_RUNTIME"] = 3] = "LITE_RUNTIME";
      })(FileOptions_OptimizeMode || (FileOptions_OptimizeMode = {}));
      (function(FieldOptions_CType2) {
        FieldOptions_CType2[FieldOptions_CType2["STRING"] = 0] = "STRING";
        FieldOptions_CType2[FieldOptions_CType2["CORD"] = 1] = "CORD";
        FieldOptions_CType2[FieldOptions_CType2["STRING_PIECE"] = 2] = "STRING_PIECE";
      })(FieldOptions_CType || (FieldOptions_CType = {}));
      (function(FieldOptions_JSType2) {
        FieldOptions_JSType2[FieldOptions_JSType2["JS_NORMAL"] = 0] = "JS_NORMAL";
        FieldOptions_JSType2[FieldOptions_JSType2["JS_STRING"] = 1] = "JS_STRING";
        FieldOptions_JSType2[FieldOptions_JSType2["JS_NUMBER"] = 2] = "JS_NUMBER";
      })(FieldOptions_JSType || (FieldOptions_JSType = {}));
      (function(FieldOptions_OptionRetention2) {
        FieldOptions_OptionRetention2[FieldOptions_OptionRetention2["RETENTION_UNKNOWN"] = 0] = "RETENTION_UNKNOWN";
        FieldOptions_OptionRetention2[FieldOptions_OptionRetention2["RETENTION_RUNTIME"] = 1] = "RETENTION_RUNTIME";
        FieldOptions_OptionRetention2[FieldOptions_OptionRetention2["RETENTION_SOURCE"] = 2] = "RETENTION_SOURCE";
      })(FieldOptions_OptionRetention || (FieldOptions_OptionRetention = {}));
      (function(FieldOptions_OptionTargetType2) {
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_UNKNOWN"] = 0] = "TARGET_TYPE_UNKNOWN";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_FILE"] = 1] = "TARGET_TYPE_FILE";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_EXTENSION_RANGE"] = 2] = "TARGET_TYPE_EXTENSION_RANGE";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_MESSAGE"] = 3] = "TARGET_TYPE_MESSAGE";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_FIELD"] = 4] = "TARGET_TYPE_FIELD";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_ONEOF"] = 5] = "TARGET_TYPE_ONEOF";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_ENUM"] = 6] = "TARGET_TYPE_ENUM";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_ENUM_ENTRY"] = 7] = "TARGET_TYPE_ENUM_ENTRY";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_SERVICE"] = 8] = "TARGET_TYPE_SERVICE";
        FieldOptions_OptionTargetType2[FieldOptions_OptionTargetType2["TARGET_TYPE_METHOD"] = 9] = "TARGET_TYPE_METHOD";
      })(FieldOptions_OptionTargetType || (FieldOptions_OptionTargetType = {}));
      (function(MethodOptions_IdempotencyLevel2) {
        MethodOptions_IdempotencyLevel2[MethodOptions_IdempotencyLevel2["IDEMPOTENCY_UNKNOWN"] = 0] = "IDEMPOTENCY_UNKNOWN";
        MethodOptions_IdempotencyLevel2[MethodOptions_IdempotencyLevel2["NO_SIDE_EFFECTS"] = 1] = "NO_SIDE_EFFECTS";
        MethodOptions_IdempotencyLevel2[MethodOptions_IdempotencyLevel2["IDEMPOTENT"] = 2] = "IDEMPOTENT";
      })(MethodOptions_IdempotencyLevel || (MethodOptions_IdempotencyLevel = {}));
      (function(FeatureSet_VisibilityFeature_DefaultSymbolVisibility2) {
        FeatureSet_VisibilityFeature_DefaultSymbolVisibility2[FeatureSet_VisibilityFeature_DefaultSymbolVisibility2["DEFAULT_SYMBOL_VISIBILITY_UNKNOWN"] = 0] = "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN";
        FeatureSet_VisibilityFeature_DefaultSymbolVisibility2[FeatureSet_VisibilityFeature_DefaultSymbolVisibility2["EXPORT_ALL"] = 1] = "EXPORT_ALL";
        FeatureSet_VisibilityFeature_DefaultSymbolVisibility2[FeatureSet_VisibilityFeature_DefaultSymbolVisibility2["EXPORT_TOP_LEVEL"] = 2] = "EXPORT_TOP_LEVEL";
        FeatureSet_VisibilityFeature_DefaultSymbolVisibility2[FeatureSet_VisibilityFeature_DefaultSymbolVisibility2["LOCAL_ALL"] = 3] = "LOCAL_ALL";
        FeatureSet_VisibilityFeature_DefaultSymbolVisibility2[FeatureSet_VisibilityFeature_DefaultSymbolVisibility2["STRICT"] = 4] = "STRICT";
      })(FeatureSet_VisibilityFeature_DefaultSymbolVisibility || (FeatureSet_VisibilityFeature_DefaultSymbolVisibility = {}));
      (function(FeatureSet_FieldPresence2) {
        FeatureSet_FieldPresence2[FeatureSet_FieldPresence2["FIELD_PRESENCE_UNKNOWN"] = 0] = "FIELD_PRESENCE_UNKNOWN";
        FeatureSet_FieldPresence2[FeatureSet_FieldPresence2["EXPLICIT"] = 1] = "EXPLICIT";
        FeatureSet_FieldPresence2[FeatureSet_FieldPresence2["IMPLICIT"] = 2] = "IMPLICIT";
        FeatureSet_FieldPresence2[FeatureSet_FieldPresence2["LEGACY_REQUIRED"] = 3] = "LEGACY_REQUIRED";
      })(FeatureSet_FieldPresence || (FeatureSet_FieldPresence = {}));
      (function(FeatureSet_EnumType2) {
        FeatureSet_EnumType2[FeatureSet_EnumType2["ENUM_TYPE_UNKNOWN"] = 0] = "ENUM_TYPE_UNKNOWN";
        FeatureSet_EnumType2[FeatureSet_EnumType2["OPEN"] = 1] = "OPEN";
        FeatureSet_EnumType2[FeatureSet_EnumType2["CLOSED"] = 2] = "CLOSED";
      })(FeatureSet_EnumType || (FeatureSet_EnumType = {}));
      (function(FeatureSet_RepeatedFieldEncoding2) {
        FeatureSet_RepeatedFieldEncoding2[FeatureSet_RepeatedFieldEncoding2["REPEATED_FIELD_ENCODING_UNKNOWN"] = 0] = "REPEATED_FIELD_ENCODING_UNKNOWN";
        FeatureSet_RepeatedFieldEncoding2[FeatureSet_RepeatedFieldEncoding2["PACKED"] = 1] = "PACKED";
        FeatureSet_RepeatedFieldEncoding2[FeatureSet_RepeatedFieldEncoding2["EXPANDED"] = 2] = "EXPANDED";
      })(FeatureSet_RepeatedFieldEncoding || (FeatureSet_RepeatedFieldEncoding = {}));
      (function(FeatureSet_Utf8Validation2) {
        FeatureSet_Utf8Validation2[FeatureSet_Utf8Validation2["UTF8_VALIDATION_UNKNOWN"] = 0] = "UTF8_VALIDATION_UNKNOWN";
        FeatureSet_Utf8Validation2[FeatureSet_Utf8Validation2["VERIFY"] = 2] = "VERIFY";
        FeatureSet_Utf8Validation2[FeatureSet_Utf8Validation2["NONE"] = 3] = "NONE";
      })(FeatureSet_Utf8Validation || (FeatureSet_Utf8Validation = {}));
      (function(FeatureSet_MessageEncoding2) {
        FeatureSet_MessageEncoding2[FeatureSet_MessageEncoding2["MESSAGE_ENCODING_UNKNOWN"] = 0] = "MESSAGE_ENCODING_UNKNOWN";
        FeatureSet_MessageEncoding2[FeatureSet_MessageEncoding2["LENGTH_PREFIXED"] = 1] = "LENGTH_PREFIXED";
        FeatureSet_MessageEncoding2[FeatureSet_MessageEncoding2["DELIMITED"] = 2] = "DELIMITED";
      })(FeatureSet_MessageEncoding || (FeatureSet_MessageEncoding = {}));
      (function(FeatureSet_JsonFormat2) {
        FeatureSet_JsonFormat2[FeatureSet_JsonFormat2["JSON_FORMAT_UNKNOWN"] = 0] = "JSON_FORMAT_UNKNOWN";
        FeatureSet_JsonFormat2[FeatureSet_JsonFormat2["ALLOW"] = 1] = "ALLOW";
        FeatureSet_JsonFormat2[FeatureSet_JsonFormat2["LEGACY_BEST_EFFORT"] = 2] = "LEGACY_BEST_EFFORT";
      })(FeatureSet_JsonFormat || (FeatureSet_JsonFormat = {}));
      (function(FeatureSet_EnforceNamingStyle2) {
        FeatureSet_EnforceNamingStyle2[FeatureSet_EnforceNamingStyle2["ENFORCE_NAMING_STYLE_UNKNOWN"] = 0] = "ENFORCE_NAMING_STYLE_UNKNOWN";
        FeatureSet_EnforceNamingStyle2[FeatureSet_EnforceNamingStyle2["STYLE2024"] = 1] = "STYLE2024";
        FeatureSet_EnforceNamingStyle2[FeatureSet_EnforceNamingStyle2["STYLE_LEGACY"] = 2] = "STYLE_LEGACY";
      })(FeatureSet_EnforceNamingStyle || (FeatureSet_EnforceNamingStyle = {}));
      (function(GeneratedCodeInfo_Annotation_Semantic2) {
        GeneratedCodeInfo_Annotation_Semantic2[GeneratedCodeInfo_Annotation_Semantic2["NONE"] = 0] = "NONE";
        GeneratedCodeInfo_Annotation_Semantic2[GeneratedCodeInfo_Annotation_Semantic2["SET"] = 1] = "SET";
        GeneratedCodeInfo_Annotation_Semantic2[GeneratedCodeInfo_Annotation_Semantic2["ALIAS"] = 2] = "ALIAS";
      })(GeneratedCodeInfo_Annotation_Semantic || (GeneratedCodeInfo_Annotation_Semantic = {}));
      (function(Edition2) {
        Edition2[Edition2["EDITION_UNKNOWN"] = 0] = "EDITION_UNKNOWN";
        Edition2[Edition2["EDITION_LEGACY"] = 900] = "EDITION_LEGACY";
        Edition2[Edition2["EDITION_PROTO2"] = 998] = "EDITION_PROTO2";
        Edition2[Edition2["EDITION_PROTO3"] = 999] = "EDITION_PROTO3";
        Edition2[Edition2["EDITION_2023"] = 1e3] = "EDITION_2023";
        Edition2[Edition2["EDITION_2024"] = 1001] = "EDITION_2024";
        Edition2[Edition2["EDITION_1_TEST_ONLY"] = 1] = "EDITION_1_TEST_ONLY";
        Edition2[Edition2["EDITION_2_TEST_ONLY"] = 2] = "EDITION_2_TEST_ONLY";
        Edition2[Edition2["EDITION_99997_TEST_ONLY"] = 99997] = "EDITION_99997_TEST_ONLY";
        Edition2[Edition2["EDITION_99998_TEST_ONLY"] = 99998] = "EDITION_99998_TEST_ONLY";
        Edition2[Edition2["EDITION_99999_TEST_ONLY"] = 99999] = "EDITION_99999_TEST_ONLY";
        Edition2[Edition2["EDITION_MAX"] = 2147483647] = "EDITION_MAX";
      })(Edition || (Edition = {}));
      (function(SymbolVisibility2) {
        SymbolVisibility2[SymbolVisibility2["VISIBILITY_UNSET"] = 0] = "VISIBILITY_UNSET";
        SymbolVisibility2[SymbolVisibility2["VISIBILITY_LOCAL"] = 1] = "VISIBILITY_LOCAL";
        SymbolVisibility2[SymbolVisibility2["VISIBILITY_EXPORT"] = 2] = "VISIBILITY_EXPORT";
      })(SymbolVisibility || (SymbolVisibility = {}));
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/embed.js
  var init_embed = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/embed.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/extension.js
  var init_extension = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/extension.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/from-binary.js
  function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
  }
  function fromBinary(schema, bytes, options) {
    const msg = reflect(schema, void 0, false);
    readMessage(msg, new BinaryReader(bytes), makeReadOptions(options), false, bytes.byteLength);
    return msg.message;
  }
  function readMessage(message, reader, options, delimited, lengthOrDelimitedFieldNo) {
    var _a;
    const end = delimited ? reader.len : reader.pos + lengthOrDelimitedFieldNo;
    let fieldNo;
    let wireType;
    const unknownFields = (_a = message.getUnknown()) !== null && _a !== void 0 ? _a : [];
    while (reader.pos < end) {
      [fieldNo, wireType] = reader.tag();
      if (delimited && wireType == WireType.EndGroup) {
        break;
      }
      const field = message.findNumber(fieldNo);
      if (!field) {
        const data = reader.skip(wireType, fieldNo);
        if (options.readUnknownFields) {
          unknownFields.push({ no: fieldNo, wireType, data });
        }
        continue;
      }
      readField(message, reader, field, wireType, options);
    }
    if (delimited) {
      if (wireType != WireType.EndGroup || fieldNo !== lengthOrDelimitedFieldNo) {
        throw new Error("invalid end group tag");
      }
    }
    if (unknownFields.length > 0) {
      message.setUnknown(unknownFields);
    }
  }
  function readField(message, reader, field, wireType, options) {
    var _a;
    switch (field.fieldKind) {
      case "scalar":
        message.set(field, readScalar(reader, field.scalar));
        break;
      case "enum":
        const val = readScalar(reader, ScalarType.INT32);
        if (field.enum.open) {
          message.set(field, val);
        } else {
          const ok = field.enum.values.some((v) => v.number === val);
          if (ok) {
            message.set(field, val);
          } else if (options.readUnknownFields) {
            const bytes = [];
            varint32write(val, bytes);
            const unknownFields = (_a = message.getUnknown()) !== null && _a !== void 0 ? _a : [];
            unknownFields.push({
              no: field.number,
              wireType,
              data: new Uint8Array(bytes)
            });
            message.setUnknown(unknownFields);
          }
        }
        break;
      case "message":
        message.set(field, readMessageField(reader, options, field, message.get(field)));
        break;
      case "list":
        readListField(reader, wireType, message.get(field), options);
        break;
      case "map":
        readMapEntry(reader, message.get(field), options);
        break;
    }
  }
  function readMapEntry(reader, map, options) {
    const field = map.field();
    let key;
    let val;
    const len = reader.uint32();
    const end = reader.pos + len;
    while (reader.pos < end) {
      const [fieldNo] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = readScalar(reader, field.mapKey);
          break;
        case 2:
          switch (field.mapKind) {
            case "scalar":
              val = readScalar(reader, field.scalar);
              break;
            case "enum":
              val = reader.int32();
              break;
            case "message":
              val = readMessageField(reader, options, field);
              break;
          }
          break;
      }
    }
    if (key === void 0) {
      key = scalarZeroValue(field.mapKey, false);
    }
    if (val === void 0) {
      switch (field.mapKind) {
        case "scalar":
          val = scalarZeroValue(field.scalar, false);
          break;
        case "enum":
          val = field.enum.values[0].number;
          break;
        case "message":
          val = reflect(field.message, void 0, false);
          break;
      }
    }
    map.set(key, val);
  }
  function readListField(reader, wireType, list, options) {
    var _a;
    const field = list.field();
    if (field.listKind === "message") {
      list.add(readMessageField(reader, options, field));
      return;
    }
    const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32;
    const packed = wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES;
    if (!packed) {
      list.add(readScalar(reader, scalarType));
      return;
    }
    const e = reader.uint32() + reader.pos;
    while (reader.pos < e) {
      list.add(readScalar(reader, scalarType));
    }
  }
  function readMessageField(reader, options, field, mergeMessage) {
    const delimited = field.delimitedEncoding;
    const message = mergeMessage !== null && mergeMessage !== void 0 ? mergeMessage : reflect(field.message, void 0, false);
    readMessage(message, reader, options, delimited, delimited ? field.number : reader.uint32());
    return message;
  }
  function readScalar(reader, type) {
    switch (type) {
      case ScalarType.STRING:
        return reader.string();
      case ScalarType.BOOL:
        return reader.bool();
      case ScalarType.DOUBLE:
        return reader.double();
      case ScalarType.FLOAT:
        return reader.float();
      case ScalarType.INT32:
        return reader.int32();
      case ScalarType.INT64:
        return reader.int64();
      case ScalarType.UINT64:
        return reader.uint64();
      case ScalarType.FIXED64:
        return reader.fixed64();
      case ScalarType.BYTES:
        return reader.bytes();
      case ScalarType.FIXED32:
        return reader.fixed32();
      case ScalarType.SFIXED32:
        return reader.sfixed32();
      case ScalarType.SFIXED64:
        return reader.sfixed64();
      case ScalarType.SINT64:
        return reader.sint64();
      case ScalarType.UINT32:
        return reader.uint32();
      case ScalarType.SINT32:
        return reader.sint32();
    }
  }
  var readDefaults;
  var init_from_binary = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/from-binary.js"() {
      init_descriptors();
      init_scalar();
      init_reflect();
      init_binary_encoding();
      init_varint();
      readDefaults = {
        readUnknownFields: true
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/file.js
  function fileDesc(b64, imports) {
    var _a;
    const root = fromBinary(FileDescriptorProtoSchema, base64Decode(b64));
    root.messageType.forEach(restoreJsonNames);
    root.dependency = (_a = imports === null || imports === void 0 ? void 0 : imports.map((f) => f.proto.name)) !== null && _a !== void 0 ? _a : [];
    const reg = createFileRegistry(root, (protoFileName) => imports === null || imports === void 0 ? void 0 : imports.find((f) => f.proto.name === protoFileName));
    return reg.getFile(root.name);
  }
  var init_file = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/file.js"() {
      init_base64_encoding();
      init_descriptor_pb();
      init_registry();
      init_restore_json_names();
      init_from_binary();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/service.js
  var init_service = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/service.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/symbols.js
  var packageName, wktPublicImportPaths, symbols;
  var init_symbols = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/symbols.js"() {
      packageName = "@bufbuild/protobuf";
      wktPublicImportPaths = {
        "google/protobuf/compiler/plugin.proto": packageName + "/wkt",
        "google/protobuf/any.proto": packageName + "/wkt",
        "google/protobuf/api.proto": packageName + "/wkt",
        "google/protobuf/cpp_features.proto": packageName + "/wkt",
        "google/protobuf/descriptor.proto": packageName + "/wkt",
        "google/protobuf/duration.proto": packageName + "/wkt",
        "google/protobuf/empty.proto": packageName + "/wkt",
        "google/protobuf/field_mask.proto": packageName + "/wkt",
        "google/protobuf/go_features.proto": packageName + "/wkt",
        "google/protobuf/java_features.proto": packageName + "/wkt",
        "google/protobuf/source_context.proto": packageName + "/wkt",
        "google/protobuf/struct.proto": packageName + "/wkt",
        "google/protobuf/timestamp.proto": packageName + "/wkt",
        "google/protobuf/type.proto": packageName + "/wkt",
        "google/protobuf/wrappers.proto": packageName + "/wkt"
      };
      symbols = {
        isMessage: { typeOnly: false, bootstrapWktFrom: "../../is-message.js", from: packageName },
        Message: { typeOnly: true, bootstrapWktFrom: "../../types.js", from: packageName },
        create: { typeOnly: false, bootstrapWktFrom: "../../create.js", from: packageName },
        fromJson: { typeOnly: false, bootstrapWktFrom: "../../from-json.js", from: packageName },
        fromJsonString: { typeOnly: false, bootstrapWktFrom: "../../from-json.js", from: packageName },
        fromBinary: { typeOnly: false, bootstrapWktFrom: "../../from-binary.js", from: packageName },
        toBinary: { typeOnly: false, bootstrapWktFrom: "../../to-binary.js", from: packageName },
        toJson: { typeOnly: false, bootstrapWktFrom: "../../to-json.js", from: packageName },
        toJsonString: { typeOnly: false, bootstrapWktFrom: "../../to-json.js", from: packageName },
        protoInt64: { typeOnly: false, bootstrapWktFrom: "../../proto-int64.js", from: packageName },
        JsonValue: { typeOnly: true, bootstrapWktFrom: "../../json-value.js", from: packageName },
        JsonObject: { typeOnly: true, bootstrapWktFrom: "../../json-value.js", from: packageName },
        codegen: {
          boot: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/boot.js", from: packageName + "/codegenv2" },
          fileDesc: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/file.js", from: packageName + "/codegenv2" },
          enumDesc: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/enum.js", from: packageName + "/codegenv2" },
          extDesc: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/extension.js", from: packageName + "/codegenv2" },
          messageDesc: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/message.js", from: packageName + "/codegenv2" },
          serviceDesc: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/service.js", from: packageName + "/codegenv2" },
          tsEnum: { typeOnly: false, bootstrapWktFrom: "../../codegenv2/enum.js", from: packageName + "/codegenv2" },
          GenFile: { typeOnly: true, bootstrapWktFrom: "../../codegenv2/types.js", from: packageName + "/codegenv2" },
          GenEnum: { typeOnly: true, bootstrapWktFrom: "../../codegenv2/types.js", from: packageName + "/codegenv2" },
          GenExtension: { typeOnly: true, bootstrapWktFrom: "../../codegenv2/types.js", from: packageName + "/codegenv2" },
          GenMessage: { typeOnly: true, bootstrapWktFrom: "../../codegenv2/types.js", from: packageName + "/codegenv2" },
          GenService: { typeOnly: true, bootstrapWktFrom: "../../codegenv2/types.js", from: packageName + "/codegenv2" }
        }
      };
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/scalar.js
  var init_scalar2 = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/scalar.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/types.js
  var init_types = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/types.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/index.js
  var init_codegenv2 = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/codegenv2/index.js"() {
      init_boot();
      init_embed();
      init_enum();
      init_extension();
      init_file();
      init_message();
      init_service();
      init_symbols();
      init_scalar2();
      init_types();
    }
  });

  // web/src/proto/proto/ws_messages_pb.ts
  var file_proto_ws_messages, WsEnvelopeSchema;
  var init_ws_messages_pb = __esm({
    "web/src/proto/proto/ws_messages_pb.ts"() {
      "use strict";
      init_codegenv2();
      file_proto_ws_messages = /* @__PURE__ */ fileDesc("");
      WsEnvelopeSchema = /* @__PURE__ */ messageDesc(file_proto_ws_messages, 0);
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/types.js
  var init_types2 = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/types.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/equals.js
  var init_equals = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/equals.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/to-json.js
  var init_to_json = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/to-json.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/from-json.js
  var tokenIgnoredUnknownEnum, tokenNull;
  var init_from_json = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/from-json.js"() {
      tokenIgnoredUnknownEnum = Symbol();
      tokenNull = Symbol();
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/merge.js
  var init_merge = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/merge.js"() {
    }
  });

  // web/node_modules/@bufbuild/protobuf/dist/esm/index.js
  var init_esm = __esm({
    "web/node_modules/@bufbuild/protobuf/dist/esm/index.js"() {
      init_types2();
      init_is_message();
      init_create();
      init_clone();
      init_descriptors();
      init_equals();
      init_fields();
      init_registry();
      init_to_binary();
      init_from_binary();
      init_to_json();
      init_from_json();
      init_merge();
      init_proto_int64();
    }
  });

  // web/src/proto_helpers.ts
  function protoToGhost(proto) {
    var _a;
    return {
      id: proto.id,
      x: proto.x,
      y: proto.y,
      vx: proto.vx,
      vy: proto.vy,
      t: proto.t,
      self: proto.self,
      waypoints: (_a = proto.waypoints) == null ? void 0 : _a.map((wp) => ({ x: wp.x, y: wp.y, speed: wp.speed })),
      currentWaypointIndex: proto.currentWaypointIndex,
      hp: proto.hp,
      kills: proto.kills,
      heat: proto.heat ? {
        v: proto.heat.v,
        m: proto.heat.m,
        w: proto.heat.w,
        o: proto.heat.o,
        ms: proto.heat.ms,
        su: proto.heat.su,
        ku: proto.heat.ku,
        kd: proto.heat.kd,
        ex: proto.heat.ex
      } : void 0
    };
  }
  function protoToMissile(proto) {
    return {
      id: proto.id,
      owner: proto.owner,
      self: proto.self,
      x: proto.x,
      y: proto.y,
      vx: proto.vx,
      vy: proto.vy,
      t: proto.t,
      agroRadius: proto.agroRadius,
      lifetime: proto.lifetime,
      launch: proto.launchTime,
      expires: proto.expiresAt,
      targetId: proto.targetId || void 0,
      heat: proto.heat ? {
        v: proto.heat.v,
        m: proto.heat.m,
        w: proto.heat.w,
        o: proto.heat.o,
        ms: proto.heat.ms,
        su: proto.heat.su,
        ku: proto.heat.ku,
        kd: proto.heat.kd,
        ex: proto.heat.ex
      } : void 0
    };
  }
  function protoToState(proto) {
    const base = {
      now: proto.now,
      me: proto.me ? protoToGhost(proto.me) : null,
      ghosts: proto.ghosts.map(protoToGhost),
      missiles: proto.missiles.map(protoToMissile),
      meta: proto.meta ? {
        c: proto.meta.c,
        w: proto.meta.w,
        h: proto.meta.h
      } : { c: 299, w: 16e3, h: 9e3 },
      missileConfig: proto.missileConfig ? {
        speed: proto.missileConfig.speed,
        speedMin: proto.missileConfig.speedMin,
        speedMax: proto.missileConfig.speedMax,
        agroMin: proto.missileConfig.agroMin,
        agroRadius: proto.missileConfig.agroRadius,
        lifetime: proto.missileConfig.lifetime,
        heatConfig: proto.missileConfig.heatConfig ? {
          max: proto.missileConfig.heatConfig.max,
          warnAt: proto.missileConfig.heatConfig.warnAt,
          overheatAt: proto.missileConfig.heatConfig.overheatAt,
          markerSpeed: proto.missileConfig.heatConfig.markerSpeed,
          kUp: proto.missileConfig.heatConfig.kUp,
          kDown: proto.missileConfig.heatConfig.kDown,
          exp: proto.missileConfig.heatConfig.exp
        } : void 0
      } : {
        speed: 0,
        speedMin: 0,
        speedMax: 0,
        agroMin: 0,
        agroRadius: 0,
        lifetime: 0
      },
      missileWaypoints: proto.missileWaypoints.map((wp) => ({ x: wp.x, y: wp.y, speed: wp.speed })),
      missileRoutes: proto.missileRoutes.map((r) => ({
        id: r.id,
        name: r.name,
        waypoints: r.waypoints.map((wp) => ({ x: wp.x, y: wp.y, speed: wp.speed }))
      })),
      activeMissileRoute: proto.activeMissileRoute,
      nextMissileReady: proto.nextMissileReady
    };
    return {
      ...base,
      dag: proto.dag ? protoToDagState(proto.dag) : void 0,
      inventory: proto.inventory ? protoToInventory(proto.inventory) : void 0,
      story: proto.story ? protoToStoryState(proto.story) : void 0,
      capabilities: proto.capabilities ? protoToPlayerCapabilities(proto.capabilities) : void 0
    };
  }
  function protoStatusToString(status) {
    switch (status) {
      case 1 /* LOCKED */:
        return "locked";
      case 2 /* AVAILABLE */:
        return "available";
      case 3 /* IN_PROGRESS */:
        return "in_progress";
      case 4 /* COMPLETED */:
        return "completed";
      default:
        return "unknown";
    }
  }
  function protoKindToString(kind) {
    switch (kind) {
      case 1 /* FACTORY */:
        return "factory";
      case 2 /* UNIT */:
        return "unit";
      case 3 /* STORY */:
        return "story";
      case 4 /* CRAFT */:
        return "craft";
      default:
        return "unknown";
    }
  }
  function protoIntentToString(intent) {
    switch (intent) {
      case 1 /* FACTORY */:
        return "factory";
      case 2 /* UNIT */:
        return "unit";
      default:
        return "";
    }
  }
  function protoEffectTypeToString(type) {
    const typeMap = {
      1: "speed_multiplier",
      2: "missile_unlock",
      3: "heat_capacity",
      4: "heat_efficiency"
    };
    return typeMap[type] || "unknown";
  }
  function protoToUpgradeEffect(proto) {
    return {
      type: protoEffectTypeToString(proto.type),
      value: proto.value.case === "multiplier" ? proto.value.value : proto.value.value
    };
  }
  function protoToPlayerCapabilities(proto) {
    return {
      speedMultiplier: proto.speedMultiplier,
      unlockedMissiles: proto.unlockedMissiles,
      heatCapacity: proto.heatCapacity,
      heatEfficiency: proto.heatEfficiency
    };
  }
  function protoToDagNode(proto) {
    var _a;
    return {
      id: proto.id,
      kind: protoKindToString(proto.kind),
      label: proto.label,
      status: protoStatusToString(proto.status),
      remainingS: proto.remainingS,
      durationS: proto.durationS,
      repeatable: proto.repeatable,
      effects: ((_a = proto.effects) == null ? void 0 : _a.map(protoToUpgradeEffect)) || []
    };
  }
  function protoToDagState(proto) {
    return {
      nodes: proto.nodes.map(protoToDagNode)
    };
  }
  function protoToInventoryItem(proto) {
    return {
      type: proto.type,
      variantId: proto.variantId,
      heatCapacity: proto.heatCapacity,
      quantity: proto.quantity
    };
  }
  function protoToInventory(proto) {
    return {
      items: proto.items.map(protoToInventoryItem)
    };
  }
  function protoToStoryDialogue(proto) {
    return {
      speaker: proto.speaker,
      text: proto.text,
      intent: protoIntentToString(proto.intent),
      continueLabel: proto.continueLabel,
      choices: proto.choices.map((c) => ({ id: c.id, text: c.text })),
      tutorialTip: proto.tutorialTip ? {
        title: proto.tutorialTip.title,
        text: proto.tutorialTip.text
      } : void 0
    };
  }
  function protoToStoryState(proto) {
    return {
      activeNode: proto.activeNode,
      dialogue: proto.dialogue ? protoToStoryDialogue(proto.dialogue) : void 0,
      available: proto.available,
      flags: proto.flags,
      recentEvents: proto.recentEvents.map((e) => ({
        chapterId: e.chapterId,
        nodeId: e.nodeId,
        timestamp: e.timestamp
      }))
    };
  }
  var init_proto_helpers = __esm({
    "web/src/proto_helpers.ts"() {
      "use strict";
      init_ws_messages_pb();
    }
  });

  // web/src/net.ts
  function sendProto(envelope) {
    if (!ws || ws.readyState !== WebSocket.OPEN) return;
    const bytes = toBinary(WsEnvelopeSchema, envelope);
    ws.send(bytes);
  }
  function sendDagStart(nodeId) {
    if (!ws || ws.readyState !== WebSocket.OPEN) return;
    sendProto(create(WsEnvelopeSchema, {
      payload: {
        case: "dagStart",
        value: { nodeId }
      }
    }));
  }
  function connectWebSocket({
    room,
    state,
    bus,
    onStateUpdated,
    onOpen,
    mapW,
    mapH,
    mode,
    missionId
  }) {
    const protocol = window.location.protocol === "https:" ? "wss://" : "ws://";
    let wsUrl = `${protocol}${window.location.host}/ws?room=${encodeURIComponent(room)}`;
    if (mapW && mapW > 0) {
      wsUrl += `&mapW=${mapW}`;
    }
    if (mapH && mapH > 0) {
      wsUrl += `&mapH=${mapH}`;
    }
    if (mode) {
      wsUrl += `&mode=${encodeURIComponent(mode)}`;
    }
    if (missionId) {
      wsUrl += `&mission=${encodeURIComponent(missionId)}`;
    }
    ws = new WebSocket(wsUrl);
    connectedState = state;
    connectedBus = bus;
    ws.binaryType = "arraybuffer";
    ws.addEventListener("open", () => {
      console.log("[ws] open");
      const socket = ws;
      if (socket && onOpen) {
        onOpen(socket);
      }
    });
    ws.addEventListener("close", () => {
      console.log("[ws] close");
      connectedState = null;
      connectedBus = null;
    });
    let prevRoutes = /* @__PURE__ */ new Map();
    let prevActiveRoute = null;
    let prevMissileCount = 0;
    ws.addEventListener("message", (event) => {
      if (event.data instanceof ArrayBuffer) {
        try {
          const envelope = fromBinary(WsEnvelopeSchema, new Uint8Array(event.data));
          if (envelope.payload.case === "stateUpdate") {
            const protoState = protoToState(envelope.payload.value);
            handleProtoStateMessage(state, protoState, bus, prevRoutes, prevActiveRoute, prevMissileCount);
            prevRoutes = new Map(state.missileRoutes.map((route) => [route.id, cloneRoute(route)]));
            prevActiveRoute = state.activeMissileRouteId;
            prevMissileCount = state.missiles.length;
            bus.emit("state:updated");
            onStateUpdated == null ? void 0 : onStateUpdated();
          } else if (envelope.payload.case === "roomFull") {
            console.error("[ws] Room full:", envelope.payload.value.message);
            bus.emit("connection:error", { message: envelope.payload.value.message });
          } else if (envelope.payload.case === "dagListResponse") {
            const dagData = envelope.payload.value.dag;
            if (dagData) {
              bus.emit("dag:list", protoToDagState(dagData));
            }
          } else if (envelope.payload.case === "missionBeaconSnapshot") {
            handleMissionSnapshot(state, envelope.payload.value, bus);
          } else if (envelope.payload.case === "missionBeaconDelta") {
            handleMissionDelta(state, envelope.payload.value, bus);
          } else {
            console.warn("[ws] Unknown protobuf message type:", envelope.payload.case);
          }
        } catch (err) {
          console.error("[ws] Failed to decode protobuf message:", err);
        }
        return;
      }
      if (typeof event.data === "string") {
        handleJsonMessage(state, bus, event.data);
        return;
      }
      if (event.data instanceof Blob) {
        event.data.text().then((text) => handleJsonMessage(state, bus, text)).catch((err) => console.error("[ws] Failed to read text message:", err));
        return;
      }
    });
  }
  function handleJsonMessage(state, bus, raw) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!raw) {
      return;
    }
    let msg;
    try {
      msg = JSON.parse(raw);
    } catch (err) {
      console.error("[ws] Failed to parse JSON message:", err);
      return;
    }
    if (!msg || typeof msg.type !== "string") {
      return;
    }
    switch (msg.type) {
      case "mission:offer": {
        const payload = msg.payload;
        if (!payload) {
          return;
        }
        const mission = ensureMissionState(state);
        mission.missionId = (_b = (_a = payload.missionId) != null ? _a : mission.missionId) != null ? _b : "";
        mission.templateId = (_c = payload.templateId) != null ? _c : "";
        mission.displayName = (_e = (_d = payload.displayName) != null ? _d : mission.displayName) != null ? _e : "";
        mission.archetype = (_g = (_f = payload.archetype) != null ? _f : mission.archetype) != null ? _g : "";
        mission.timeout = Number.isFinite(payload.timeout) ? Number(payload.timeout) : 0;
        mission.status = "idle";
        mission.startTime = null;
        mission.completionTime = null;
        mission.progress = 0;
        mission.objectives = [];
        mission.objectiveSummaries = Array.isArray(payload.objectives) ? [...payload.objectives] : [];
        mission.serverTime = getApproxServerNow(state);
        bus.emit("mission:offered", {
          missionId: mission.missionId,
          templateId: mission.templateId,
          displayName: mission.displayName,
          archetype: mission.archetype,
          objectives: mission.objectiveSummaries,
          timeout: mission.timeout
        });
        break;
      }
      case "mission:update": {
        const payload = msg.payload;
        if (!payload) {
          return;
        }
        const mission = ensureMissionState(state);
        if (payload.missionId) {
          mission.missionId = payload.missionId;
        }
        if (Number.isFinite(payload.serverTime)) {
          mission.serverTime = Number(payload.serverTime);
        }
        if (typeof payload.status === "string") {
          mission.status = payload.status;
        }
        if (mission.status === "active" && mission.startTime == null) {
          mission.startTime = getApproxServerNow(state);
        }
        if (payload.objectives) {
          const objectives = updateMissionObjectives(state, bus, payload.objectives);
          bus.emit("mission:update", {
            missionId: mission.missionId,
            status: mission.status,
            objectives,
            serverTime: mission.serverTime
          });
        } else {
          bus.emit("mission:update", {
            missionId: mission.missionId,
            status: mission.status,
            objectives: mission.objectives,
            serverTime: mission.serverTime
          });
        }
        if (mission.status === "completed") {
          mission.completionTime = mission.serverTime;
          mission.progress = 1;
          bus.emit("mission:completed", { missionId: mission.missionId });
        } else if (mission.status === "failed") {
          mission.completionTime = mission.serverTime;
          bus.emit("mission:failed", { missionId: mission.missionId });
        }
        break;
      }
      default:
        break;
    }
  }
  function updateMissionObjectives(state, bus, objectiveDTOs) {
    const mission = ensureMissionState(state);
    const objectives = Array.isArray(objectiveDTOs) ? objectiveDTOs.map((obj) => {
      var _a, _b, _c, _d;
      return {
        id: (_a = obj.id) != null ? _a : "",
        type: (_b = obj.type) != null ? _b : "unknown",
        progress: clampProgress((_c = obj.progress) != null ? _c : 0),
        complete: Boolean(obj.complete),
        description: (_d = obj.description) != null ? _d : ""
      };
    }) : [];
    mission.objectives = objectives;
    mission.progress = calculateMissionProgress(objectives);
    bus.emit("mission:objectives-updated", { objectives });
    bus.emit("mission:progress-changed", { progress: mission.progress, objectives });
    return objectives;
  }
  function calculateMissionProgress(objectives) {
    if (!objectives || objectives.length === 0) {
      return 0;
    }
    const total = objectives.reduce((sum, obj) => sum + clampProgress(obj.progress), 0);
    const mean = total / objectives.length;
    return clampProgress(mean);
  }
  function handleProtoStateMessage(state, msg, bus, prevRoutes, prevActiveRoute, prevMissileCount) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
    state.now = msg.now;
    state.nowSyncedAt = monotonicNow();
    state.nextMissileReadyAt = msg.nextMissileReady;
    if (msg.me) {
      state.me = {
        x: msg.me.x,
        y: msg.me.y,
        vx: msg.me.vx,
        vy: msg.me.vy,
        hp: msg.me.hp,
        kills: msg.me.kills,
        waypoints: (_a = msg.me.waypoints) != null ? _a : [],
        currentWaypointIndex: (_b = msg.me.currentWaypointIndex) != null ? _b : 0,
        heat: msg.me.heat ? convertHeatView(msg.me.heat, state.nowSyncedAt, state.now) : void 0
      };
    } else {
      state.me = null;
    }
    state.ghosts = msg.ghosts;
    state.missiles = msg.missiles;
    const newRoutes = msg.missileRoutes;
    diffRoutes(prevRoutes, newRoutes, bus);
    state.missileRoutes = newRoutes;
    const nextActive = msg.activeMissileRoute || (newRoutes.length > 0 ? newRoutes[0].id : null);
    state.activeMissileRouteId = nextActive;
    if (nextActive !== prevActiveRoute) {
      bus.emit("missile:activeRouteChanged", { routeId: nextActive });
    }
    if (msg.missileConfig) {
      updateMissileLimits(state, {
        speedMin: msg.missileConfig.speedMin,
        speedMax: msg.missileConfig.speedMax,
        agroMin: msg.missileConfig.agroMin
      });
      const prevHeat = state.missileConfig.heatParams;
      let heatParams;
      if (msg.missileConfig.heatConfig) {
        const heatConfig = msg.missileConfig.heatConfig;
        heatParams = {
          max: (_d = (_c = heatConfig.max) != null ? _c : prevHeat == null ? void 0 : prevHeat.max) != null ? _d : 0,
          warnAt: (_f = (_e = heatConfig.warnAt) != null ? _e : prevHeat == null ? void 0 : prevHeat.warnAt) != null ? _f : 0,
          overheatAt: (_h = (_g = heatConfig.overheatAt) != null ? _g : prevHeat == null ? void 0 : prevHeat.overheatAt) != null ? _h : 0,
          markerSpeed: (_j = (_i = heatConfig.markerSpeed) != null ? _i : prevHeat == null ? void 0 : prevHeat.markerSpeed) != null ? _j : 0,
          kUp: (_l = (_k = heatConfig.kUp) != null ? _k : prevHeat == null ? void 0 : prevHeat.kUp) != null ? _l : 0,
          kDown: (_n = (_m = heatConfig.kDown) != null ? _m : prevHeat == null ? void 0 : prevHeat.kDown) != null ? _n : 0,
          exp: (_p = (_o = heatConfig.exp) != null ? _o : prevHeat == null ? void 0 : prevHeat.exp) != null ? _p : 1
        };
      }
      const sanitized = sanitizeMissileConfig({
        speed: msg.missileConfig.speed,
        agroRadius: msg.missileConfig.agroRadius,
        heatParams
      }, state.missileConfig, state.missileLimits);
      sanitized.lifetime = msg.missileConfig.lifetime;
      state.missileConfig = sanitized;
    }
    state.worldMeta = {
      c: msg.meta.c,
      w: msg.meta.w,
      h: msg.meta.h
    };
    if (msg.inventory) {
      state.inventory = {
        items: msg.inventory.items.map((item) => ({
          type: item.type,
          variant_id: item.variantId,
          heat_capacity: item.heatCapacity,
          quantity: item.quantity
        }))
      };
    }
    if (msg.dag) {
      state.dag = {
        nodes: msg.dag.nodes.map((n) => ({
          id: n.id,
          kind: n.kind,
          label: n.label,
          status: n.status,
          remaining_s: n.remainingS,
          duration_s: n.durationS,
          repeatable: n.repeatable,
          effects: n.effects
        }))
      };
    }
    if (msg.capabilities) {
      state.capabilities = {
        speedMultiplier: msg.capabilities.speedMultiplier,
        unlockedMissiles: msg.capabilities.unlockedMissiles,
        heatCapacity: msg.capabilities.heatCapacity,
        heatEfficiency: msg.capabilities.heatEfficiency
      };
    }
    if (msg.story) {
      const prevActiveNode = (_r = (_q = state.story) == null ? void 0 : _q.activeNode) != null ? _r : null;
      let dialogue = null;
      if (msg.story.dialogue) {
        const d = msg.story.dialogue;
        dialogue = {
          speaker: d.speaker,
          text: d.text,
          intent: d.intent,
          typingSpeedMs: 18,
          continueLabel: d.continueLabel,
          choices: (_s = d.choices) == null ? void 0 : _s.map((c) => ({ id: c.id, text: c.text })),
          tutorialTip: d.tutorialTip ? {
            title: d.tutorialTip.title,
            text: d.tutorialTip.text
          } : void 0
        };
      }
      state.story = {
        activeNode: msg.story.activeNode || null,
        dialogue,
        available: msg.story.available,
        flags: msg.story.flags,
        recentEvents: msg.story.recentEvents.map((evt) => ({
          chapter: evt.chapterId,
          node: evt.nodeId,
          timestamp: evt.timestamp
        }))
      };
      if (state.story.activeNode !== prevActiveNode && state.story.activeNode) {
        bus.emit("story:nodeActivated", {
          nodeId: state.story.activeNode,
          dialogue: (_t = state.story.dialogue) != null ? _t : void 0
        });
      }
    }
    const newMissileCount = state.missiles.length;
    if (newMissileCount > prevMissileCount) {
      for (let i = prevMissileCount; i < newMissileCount; i++) {
        const m = state.missiles[i];
        if (m && m.self) {
          bus.emit("missile:launched", { routeId: msg.activeMissileRoute || "" });
        }
      }
    }
    const cooldownRemaining = Math.max(0, state.nextMissileReadyAt - getApproxServerNow(state));
    bus.emit("missile:cooldownUpdated", { secondsRemaining: cooldownRemaining });
  }
  function handleMissionSnapshot(state, snapshot, bus) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    const mission = ensureMissionState(state);
    const previousMissionId = mission.missionId;
    mission.missionId = snapshot.missionId || mission.missionId || "";
    mission.layoutSeed = Number((_b = (_a = snapshot.layoutSeed) != null ? _a : mission.layoutSeed) != null ? _b : 0);
    mission.serverTime = Number.isFinite(snapshot.serverTime) ? snapshot.serverTime : mission.serverTime;
    const previousBeacons = new Map(mission.beacons.map((b) => [b.id, b]));
    mission.beacons = snapshot.beacons.slice().sort((a, b) => a.ordinal - b.ordinal).map((def) => {
      var _a2, _b2, _c2;
      const prev = previousBeacons.get(def.id);
      return {
        id: def.id,
        ordinal: def.ordinal,
        x: def.x,
        y: def.y,
        radius: def.radius,
        seed: Number(def.seed || 0),
        discovered: (_a2 = prev == null ? void 0 : prev.discovered) != null ? _a2 : false,
        completed: (_b2 = prev == null ? void 0 : prev.completed) != null ? _b2 : false,
        cooldownUntil: (_c2 = prev == null ? void 0 : prev.cooldownUntil) != null ? _c2 : null
      };
    });
    const localPlayerId = getLocalPlayerId(state);
    let playerProto = localPlayerId ? snapshot.players.find((p) => p.playerId === localPlayerId) || null : null;
    if (!playerProto && snapshot.players.length === 1) {
      playerProto = snapshot.players[0];
    }
    if (playerProto) {
      const nowMs = monotonicNow();
      const discoveredSet = new Set((_c = playerProto.discovered) != null ? _c : []);
      const completedSet = new Set((_d = playerProto.completed) != null ? _d : []);
      for (const beacon of mission.beacons) {
        beacon.discovered = discoveredSet.has(beacon.id);
        beacon.completed = completedSet.has(beacon.id);
        const cooldown = (_e = playerProto.cooldowns) == null ? void 0 : _e[beacon.id];
        beacon.cooldownUntil = Number.isFinite(cooldown) ? cooldown : null;
      }
      let player = mission.player;
      if (!player || player.playerId !== playerProto.playerId) {
        player = {
          playerId: playerProto.playerId,
          currentIndex: (_f = playerProto.currentIndex) != null ? _f : 0,
          activeBeaconId: playerProto.activeBeacon || null,
          holdAccum: (_g = playerProto.holdAccum) != null ? _g : 0,
          holdRequired: Math.max(0, (_h = playerProto.holdRequired) != null ? _h : 0),
          displayHold: (_i = playerProto.holdAccum) != null ? _i : 0,
          lastServerUpdate: Number.isFinite(snapshot.serverTime) ? snapshot.serverTime : getApproxServerNow(state),
          lastDisplaySync: nowMs,
          insideActiveBeacon: false
        };
        mission.player = player;
      } else {
        player.currentIndex = (_j = playerProto.currentIndex) != null ? _j : player.currentIndex;
        player.activeBeaconId = playerProto.activeBeacon || null;
        player.holdAccum = (_k = playerProto.holdAccum) != null ? _k : player.holdAccum;
        player.holdRequired = Math.max(0, (_l = playerProto.holdRequired) != null ? _l : player.holdRequired);
        player.displayHold = (_n = (_m = playerProto.holdAccum) != null ? _m : player.displayHold) != null ? _n : 0;
        player.lastServerUpdate = Number.isFinite(snapshot.serverTime) ? snapshot.serverTime : getApproxServerNow(state);
        player.lastDisplaySync = nowMs;
      }
      mission.status = completedSet.size > 0 && completedSet.size >= mission.beacons.length && mission.beacons.length > 0 ? "completed" : "active";
    } else if (!mission.player || mission.player.playerId === "") {
      mission.player = null;
      mission.status = "idle";
      for (const beacon of mission.beacons) {
        beacon.discovered = false;
        beacon.completed = false;
        beacon.cooldownUntil = null;
      }
    }
    mission.encounters = snapshot.encounters.map((enc) => ({
      id: enc.encounterId,
      beaconId: enc.beaconId,
      waveIndex: enc.waveIndex,
      spawnedAt: enc.spawnedAt,
      expiresAt: enc.expiresAt,
      active: true
    }));
    if (mission.player && mission.missionId !== previousMissionId) {
      mission.player.displayHold = mission.player.holdAccum;
      mission.player.lastDisplaySync = monotonicNow();
      mission.player.insideActiveBeacon = false;
    }
    alignMissionProgress(mission);
    bus.emit("mission:update", { reason: "snapshot" });
  }
  function handleMissionDelta(state, delta, bus) {
    var _a, _b, _c, _d, _e;
    const mission = ensureMissionState(state);
    const nowMs = monotonicNow();
    const approxNow = getApproxServerNow(state);
    const localPlayerId = (_c = (_b = getLocalPlayerId(state)) != null ? _b : (_a = mission.player) == null ? void 0 : _a.playerId) != null ? _c : null;
    let changed = false;
    for (const entry of (_d = delta.players) != null ? _d : []) {
      if (localPlayerId && entry.playerId !== localPlayerId) {
        continue;
      }
      const player = ensureMissionPlayer(mission, entry.playerId);
      if (Number.isFinite(entry.holdRequired) && entry.holdRequired > 0) {
        player.holdRequired = entry.holdRequired;
      }
      if (Number.isFinite(entry.holdAccum)) {
        player.holdAccum = entry.holdAccum;
      }
      player.lastServerUpdate = Number.isFinite(entry.serverTime) ? entry.serverTime : approxNow;
      player.lastDisplaySync = nowMs;
      const beacon = findBeaconForDelta(mission, entry);
      switch (entry.type) {
        case 1 /* MISSION_BEACON_DELTA_DISCOVERED */:
          if (beacon) {
            beacon.discovered = true;
            changed = true;
          }
          break;
        case 2 /* MISSION_BEACON_DELTA_HOLD_PROGRESS */:
          changed = true;
          break;
        case 3 /* MISSION_BEACON_DELTA_HOLD_RESET */:
          player.holdAccum = 0;
          player.displayHold = Math.min(player.displayHold, 0);
          changed = true;
          break;
        case 4 /* MISSION_BEACON_DELTA_LOCKED */:
          if (beacon) {
            beacon.completed = true;
            const cooldown = Number.isFinite(entry.cooldownUntil) ? entry.cooldownUntil : null;
            beacon.cooldownUntil = cooldown;
            changed = true;
          }
          player.holdAccum = 0;
          player.displayHold = 0;
          break;
        case 5 /* MISSION_BEACON_DELTA_COOLDOWN */:
          if (beacon) {
            const cooldown = Number.isFinite(entry.cooldownUntil) ? entry.cooldownUntil : null;
            beacon.cooldownUntil = cooldown;
            changed = true;
          }
          break;
        case 6 /* MISSION_BEACON_DELTA_MISSION_COMPLETED */:
          mission.status = "completed";
          player.holdAccum = 0;
          player.displayHold = 0;
          player.activeBeaconId = null;
          changed = true;
          break;
        default:
          break;
      }
    }
    if (delta.encounters && delta.encounters.length > 0) {
      const encounterMap = /* @__PURE__ */ new Map();
      for (const enc of mission.encounters) {
        encounterMap.set(enc.id, { ...enc });
      }
      for (const event of delta.encounters) {
        let encounter = encounterMap.get(event.encounterId);
        if (!encounter) {
          encounter = {
            id: event.encounterId,
            beaconId: event.beaconId,
            waveIndex: event.waveIndex,
            spawnedAt: event.spawnedAt,
            expiresAt: event.expiresAt,
            active: false
          };
          encounterMap.set(event.encounterId, encounter);
        }
        encounter.beaconId = event.beaconId || encounter.beaconId;
        encounter.waveIndex = (_e = event.waveIndex) != null ? _e : encounter.waveIndex;
        encounter.spawnedAt = Number.isFinite(event.spawnedAt) ? event.spawnedAt : encounter.spawnedAt;
        encounter.expiresAt = Number.isFinite(event.expiresAt) ? event.expiresAt : encounter.expiresAt;
        switch (event.type) {
          case 1 /* MISSION_ENCOUNTER_EVENT_SPAWNED */:
            encounter.active = true;
            encounter.reason = void 0;
            break;
          case 2 /* MISSION_ENCOUNTER_EVENT_CLEARED */:
            encounter.active = false;
            encounter.reason = event.reason || "cleared";
            break;
          case 3 /* MISSION_ENCOUNTER_EVENT_TIMEOUT */:
            encounter.active = false;
            encounter.reason = event.reason || "timeout";
            break;
          case 4 /* MISSION_ENCOUNTER_EVENT_PURGED */:
            encounter.active = false;
            encounter.reason = event.reason || "purged";
            break;
          default:
            break;
        }
      }
      mission.encounters = Array.from(encounterMap.values()).sort((a, b) => a.spawnedAt - b.spawnedAt);
      changed = true;
    }
    if (mission.player) {
      mission.player.displayHold = Math.min(mission.player.displayHold, mission.player.holdAccum);
    }
    if (changed) {
      alignMissionProgress(mission);
      bus.emit("mission:update", { reason: "delta" });
    }
  }
  function ensureMissionState(state) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    if (!state.mission) {
      state.mission = {
        missionId: "",
        templateId: "",
        displayName: "",
        archetype: "",
        layoutSeed: 0,
        serverTime: 0,
        status: "idle",
        timeout: 0,
        startTime: null,
        completionTime: null,
        progress: 0,
        beacons: [],
        player: null,
        encounters: [],
        objectives: [],
        objectiveSummaries: []
      };
    } else {
      state.mission.templateId = (_a = state.mission.templateId) != null ? _a : "";
      state.mission.displayName = (_b = state.mission.displayName) != null ? _b : "";
      state.mission.archetype = (_c = state.mission.archetype) != null ? _c : "";
      state.mission.timeout = (_d = state.mission.timeout) != null ? _d : 0;
      state.mission.startTime = (_e = state.mission.startTime) != null ? _e : null;
      state.mission.completionTime = (_f = state.mission.completionTime) != null ? _f : null;
      state.mission.progress = (_g = state.mission.progress) != null ? _g : 0;
      state.mission.objectives = (_h = state.mission.objectives) != null ? _h : [];
      state.mission.objectiveSummaries = (_i = state.mission.objectiveSummaries) != null ? _i : [];
    }
    return state.mission;
  }
  function ensureMissionPlayer(mission, playerId) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    const nowMs = monotonicNow();
    if (!mission.player || mission.player.playerId !== playerId) {
      mission.player = {
        playerId,
        currentIndex: (_b = (_a = mission.player) == null ? void 0 : _a.currentIndex) != null ? _b : 0,
        activeBeaconId: (_d = (_c = mission.player) == null ? void 0 : _c.activeBeaconId) != null ? _d : null,
        holdAccum: (_f = (_e = mission.player) == null ? void 0 : _e.holdAccum) != null ? _f : 0,
        holdRequired: (_h = (_g = mission.player) == null ? void 0 : _g.holdRequired) != null ? _h : 0,
        displayHold: (_j = (_i = mission.player) == null ? void 0 : _i.displayHold) != null ? _j : 0,
        lastServerUpdate: (_l = (_k = mission.player) == null ? void 0 : _k.lastServerUpdate) != null ? _l : 0,
        lastDisplaySync: nowMs,
        insideActiveBeacon: (_n = (_m = mission.player) == null ? void 0 : _m.insideActiveBeacon) != null ? _n : false
      };
    }
    return mission.player;
  }
  function getLocalPlayerId(state) {
    var _a, _b, _c;
    if ((_b = (_a = state.mission) == null ? void 0 : _a.player) == null ? void 0 : _b.playerId) {
      return state.mission.player.playerId;
    }
    const id = (_c = state.me) == null ? void 0 : _c.id;
    if (!id) return null;
    if (id.startsWith("ship-")) {
      return id.slice("ship-".length);
    }
    return id;
  }
  function findBeaconForDelta(mission, delta) {
    if (!mission.beacons.length) return void 0;
    if (delta.beaconId) {
      const beacon = mission.beacons.find((b) => b.id === delta.beaconId);
      if (beacon) return beacon;
    }
    return mission.beacons.find((b) => b.ordinal === delta.ordinal);
  }
  function alignMissionProgress(mission) {
    if (mission.objectives && mission.objectives.length > 0) {
      return;
    }
    const player = mission.player;
    if (!player) {
      mission.status = "idle";
      return;
    }
    const nextBeacon = mission.beacons.find((b) => !b.completed);
    if (!nextBeacon) {
      mission.status = "completed";
      player.currentIndex = mission.beacons.length;
      player.activeBeaconId = null;
      player.insideActiveBeacon = false;
      return;
    }
    mission.status = "active";
    player.currentIndex = nextBeacon.ordinal;
    player.activeBeaconId = nextBeacon.id;
  }
  function diffRoutes(prevRoutes, nextRoutes, bus) {
    const seen = /* @__PURE__ */ new Set();
    for (const route of nextRoutes) {
      seen.add(route.id);
      const prev = prevRoutes.get(route.id);
      if (!prev) {
        bus.emit("missile:routeAdded", { routeId: route.id });
        continue;
      }
      if (route.name !== prev.name) {
        bus.emit("missile:routeRenamed", { routeId: route.id, name: route.name });
      }
      if (route.waypoints.length > prev.waypoints.length) {
        bus.emit("missile:waypointAdded", { routeId: route.id, index: route.waypoints.length - 1 });
      } else if (route.waypoints.length < prev.waypoints.length) {
        bus.emit("missile:waypointDeleted", { routeId: route.id, index: prev.waypoints.length - 1 });
      }
      if (prev.waypoints.length > 0 && route.waypoints.length === 0) {
        bus.emit("missile:waypointsCleared", { routeId: route.id });
      }
    }
    for (const [routeId] of prevRoutes) {
      if (!seen.has(routeId)) {
        bus.emit("missile:routeDeleted", { routeId });
      }
    }
  }
  function cloneRoute(route) {
    return {
      id: route.id,
      name: route.name,
      waypoints: route.waypoints.map((wp) => ({ ...wp }))
    };
  }
  function getApproxServerNow(state) {
    if (!Number.isFinite(state.now)) {
      return 0;
    }
    const syncedAt = Number.isFinite(state.nowSyncedAt) ? state.nowSyncedAt : null;
    if (!syncedAt) {
      return state.now;
    }
    const elapsedMs = monotonicNow() - syncedAt;
    if (!Number.isFinite(elapsedMs) || elapsedMs < 0) {
      return state.now;
    }
    return state.now + elapsedMs / 1e3;
  }
  function convertHeatView(serverHeat, nowSyncedAtMs, serverNowSec) {
    const serverStallUntilSec = serverHeat.su;
    const offsetFromNowSec = serverStallUntilSec - serverNowSec;
    const stallUntilMs = nowSyncedAtMs + offsetFromNowSec * 1e3;
    const heatView = {
      value: serverHeat.v,
      max: serverHeat.m,
      warnAt: serverHeat.w,
      overheatAt: serverHeat.o,
      markerSpeed: serverHeat.ms,
      stallUntilMs,
      kUp: serverHeat.ku,
      kDown: serverHeat.kd,
      exp: serverHeat.ex
    };
    return heatView;
  }
  var ws, connectedState, connectedBus;
  var init_net = __esm({
    "web/src/net.ts"() {
      "use strict";
      init_state();
      init_esm();
      init_ws_messages_pb();
      init_proto_helpers();
      ws = null;
      connectedState = null;
      connectedBus = null;
    }
  });

  // web/src/upgrades.ts
  function initUpgradesPanel(state, bus) {
    const panel = createPanelElement();
    document.body.appendChild(panel);
    const container = panel.querySelector(".tech-tree-container");
    const closeBtn = panel.querySelector(".close-btn");
    const overlay = panel.querySelector(".panel-overlay");
    let lastSig = "";
    function computeSig(nodes) {
      return nodes.slice().sort((a, b) => a.id.localeCompare(b.id)).map((n) => `${n.id}:${n.status}`).join("|");
    }
    function renderUpgrades(force = false) {
      var _a;
      const all = ((_a = state.dag) == null ? void 0 : _a.nodes) || [];
      const upgradeNodes = all.filter((n) => n.kind === "unit" || n.id.startsWith("upgrade."));
      const sig = computeSig(upgradeNodes);
      if (!force && sig === lastSig) return;
      lastSig = sig;
      renderTechTree(upgradeNodes, container);
    }
    function togglePanel(visible) {
      panel.classList.toggle("visible", visible);
      if (visible) {
        renderUpgrades();
      }
    }
    bus.on("upgrades:toggle", () => {
      const next = !panel.classList.contains("visible");
      togglePanel(next);
      if (next) renderUpgrades(true);
    });
    bus.on("upgrades:show", () => {
      togglePanel(true);
      renderUpgrades(true);
    });
    bus.on("upgrades:hide", () => togglePanel(false));
    closeBtn.addEventListener("click", () => togglePanel(false));
    overlay.addEventListener("click", () => togglePanel(false));
    bus.on("state:updated", () => {
      if (panel.classList.contains("visible")) {
        renderUpgrades(false);
      }
    });
    container.addEventListener("click", (e) => {
      var _a;
      const nodeEl = e.target.closest("[data-node-id]");
      if (!nodeEl) return;
      const nodeId = nodeEl.getAttribute("data-node-id");
      const node = (_a = state.dag) == null ? void 0 : _a.nodes.find((n) => n.id === nodeId);
      if ((node == null ? void 0 : node.status) === "available") {
        sendDagStart(nodeId);
      }
    });
  }
  function createPanelElement() {
    const panel = document.createElement("div");
    panel.className = "upgrades-panel";
    panel.innerHTML = `
    <div class="panel-overlay"></div>
    <div class="panel-content">
      <div class="panel-header">
        <h2>Ship Upgrades</h2>
        <button class="close-btn">\xD7</button>
      </div>
      <div class="tech-tree-container"></div>
    </div>
  `;
    return panel;
  }
  function renderTechTree(nodes, container) {
    const sorted = nodes.slice().sort((a, b) => a.id.localeCompare(b.id));
    container.innerHTML = `
    <div class="tech-tree">
      ${sorted.length > 0 ? sorted.map(renderNode).join("") : '<div class="muted">No upgrades available</div>'}
    </div>
  `;
  }
  function effectTypeToString(t) {
    if (typeof t === "string") return t;
    if (typeof t === "number") {
      switch (t) {
        case 1 /* SPEED_MULTIPLIER */:
          return "speed_multiplier";
        case 2 /* MISSILE_UNLOCK */:
          return "missile_unlock";
        case 3 /* HEAT_CAPACITY */:
          return "heat_capacity";
        case 4 /* HEAT_EFFICIENCY */:
          return "heat_efficiency";
        default:
          return "unknown";
      }
    }
    return "unknown";
  }
  function renderNode(node) {
    var _a;
    const statusClass = `node-${node.status}`;
    const effectsHtml = ((_a = node.effects) == null ? void 0 : _a.map((e) => {
      const type = effectTypeToString(e.type);
      const value = e.value;
      const isShip = node.id.startsWith("upgrade.ship.");
      const isMissile = node.id.startsWith("upgrade.missile.");
      if (type === "missile_unlock") {
        return `Unlock ${value}`;
      }
      if (typeof value === "number") {
        const pct = (value - 1) * 100;
        const pctStr = Number.isFinite(pct) ? pct.toFixed(0) : "0";
        if (type === "speed_multiplier") {
          return isShip ? `+${pctStr}% Ship Speed` : isMissile ? `+${pctStr}% Missile Speed` : `+${pctStr}% Speed`;
        }
        if (type === "heat_capacity") {
          return isShip ? `+${pctStr}% Ship Heat` : isMissile ? `+${pctStr}% Missile Heat` : `+${pctStr}% Heat Capacity`;
        }
        if (type === "heat_efficiency") {
          return `+${pctStr}% Cooling`;
        }
      }
      return "";
    }).join(", ")) || "";
    const countdownHtml = node.status === "in_progress" ? `<div class="countdown">${formatTime(node.remaining_s)}</div>` : "";
    return `
    <div class="node ${statusClass}" data-node-id="${node.id}">
      <h3>${node.label}</h3>
      ${effectsHtml ? `<p class="effects">${effectsHtml}</p>` : ""}
      <p class="duration">Duration: ${formatTime(node.duration_s)}</p>
      ${countdownHtml}
      ${node.status === "available" ? "<button>Start</button>" : ""}
      ${node.status === "completed" ? '<div class="checkmark">\u2713</div>' : ""}
    </div>
  `;
  }
  function formatTime(seconds) {
    if (seconds < 60) return `${Math.floor(seconds)}s`;
    if (seconds < 3600) return `${Math.floor(seconds / 60)}m`;
    return `${Math.floor(seconds / 3600)}h ${Math.floor(seconds % 3600 / 60)}m`;
  }
  function startCountdownTimer(state, bus) {
    if (countdownInterval) {
      clearInterval(countdownInterval);
    }
    countdownInterval = window.setInterval(() => {
      var _a;
      const upgradeNodes = ((_a = state.dag) == null ? void 0 : _a.nodes.filter(
        (n) => n.kind === "unit" && n.status === "in_progress"
      )) || [];
      upgradeNodes.forEach((node) => {
        const el = document.querySelector(`[data-node-id="${node.id}"] .countdown`);
        if (el && node.remaining_s > 0) {
          el.textContent = formatTime(node.remaining_s);
        }
      });
      const inProgressCount = upgradeNodes.length;
      bus.emit("upgrades:countUpdated", { count: inProgressCount });
    }, 1e3);
  }
  var countdownInterval;
  var init_upgrades = __esm({
    "web/src/upgrades.ts"() {
      "use strict";
      init_ws_messages_pb();
      init_net();
      countdownInterval = null;
    }
  });

  // web/src/lobby.ts
  var require_lobby = __commonJS({
    "web/src/lobby.ts"() {
      init_bus();
      init_state();
      init_upgrades();
      init_net();
      var STORAGE_KEY = "lsd:callsign";
      var saveStatusTimer = null;
      var callSignInput = document.querySelector("#call-sign-input");
      var saveStatus = document.getElementById("save-status");
      var campaignButton = document.getElementById("campaign-button");
      var tutorialButton = document.getElementById("tutorial-button");
      var freeplayButton = document.getElementById("freeplay-button");
      var mapSizeSelect = document.querySelector("#map-size-select");
      var upgradesBtn = document.getElementById("upgrades-btn");
      var bus = createEventBus();
      var state = createInitialState();
      initUpgradesPanel(state, bus);
      startCountdownTimer(state, bus);
      upgradesBtn == null ? void 0 : upgradesBtn.addEventListener("click", () => {
        bus.emit("upgrades:toggle");
      });
      bus.on("upgrades:countUpdated", ({ count }) => {
        const badge = document.getElementById("upgrades-badge");
        if (badge) {
          badge.textContent = count > 0 ? `\u2699\uFE0F ${count}` : "";
          badge.style.display = count > 0 ? "inline" : "none";
        }
      });
      var urlParams = new URLSearchParams(window.location.search);
      var lobbyRoom = urlParams.get("lobbyRoom") || "lobby-shared";
      if (typeof WebSocket !== "undefined") {
        connectWebSocket({
          room: lobbyRoom,
          state,
          bus,
          onStateUpdated: () => {
            bus.emit("state:updated");
          }
        });
      }
      bootstrap();
      function bootstrap() {
        var _a;
        const initialName = resolveInitialCallSign();
        if (callSignInput) {
          callSignInput.value = initialName;
        }
        (_a = document.getElementById("call-sign-form")) == null ? void 0 : _a.addEventListener("submit", (event) => {
          event.preventDefault();
          const name = ensureCallSign();
          if (name) {
            showSaveStatus("Saved call sign");
          } else {
            showSaveStatus("Cleared call sign");
          }
        });
        campaignButton == null ? void 0 : campaignButton.addEventListener("click", () => {
          const name = ensureCallSign();
          const roomId = generateRoomId("campaign");
          const missionId = "1";
          const url = buildRoomUrl(
            roomId,
            name,
            "campaign",
            { w: 32e3, h: 18e3 },
            missionId
          );
          window.location.href = url;
        });
        tutorialButton == null ? void 0 : tutorialButton.addEventListener("click", () => {
          const name = ensureCallSign();
          const mapSize = getSelectedMapSize();
          const roomId = generateRoomId("tutorial");
          const url = buildRoomUrl(roomId, name, "tutorial", mapSize);
          window.location.href = url;
        });
        freeplayButton == null ? void 0 : freeplayButton.addEventListener("click", () => {
          const name = ensureCallSign();
          const mapSize = getSelectedMapSize();
          const roomId = generateRoomId("freeplay");
          const url = buildRoomUrl(roomId, name, "freeplay", mapSize);
          window.location.href = url;
        });
      }
      function getSelectedMapSize() {
        const selected = (mapSizeSelect == null ? void 0 : mapSizeSelect.value) || "medium";
        switch (selected) {
          case "small":
            return { w: 4e3, h: 2250 };
          case "medium":
            return { w: 8e3, h: 4500 };
          case "large":
            return { w: 16e3, h: 9e3 };
          case "huge":
            return { w: 32e3, h: 18e3 };
          default:
            return { w: 8e3, h: 4500 };
        }
      }
      function ensureCallSign() {
        const inputName = callSignInput ? callSignInput.value : "";
        const sanitized = sanitizeCallSign(inputName);
        if (callSignInput) {
          callSignInput.value = sanitized;
        }
        persistCallSign(sanitized);
        return sanitized;
      }
      function resolveInitialCallSign() {
        const fromQuery = sanitizeCallSign(new URLSearchParams(window.location.search).get("name"));
        const stored = sanitizeCallSign(readStoredCallSign());
        if (fromQuery) {
          if (fromQuery !== stored) {
            persistCallSign(fromQuery);
          }
          return fromQuery;
        }
        return stored;
      }
      function sanitizeCallSign(value) {
        if (!value) {
          return "";
        }
        const trimmed = value.trim();
        if (!trimmed) {
          return "";
        }
        return trimmed.slice(0, 24);
      }
      function persistCallSign(name) {
        try {
          if (name) {
            window.localStorage.setItem(STORAGE_KEY, name);
          } else {
            window.localStorage.removeItem(STORAGE_KEY);
          }
        } catch (e) {
        }
      }
      function readStoredCallSign() {
        var _a;
        try {
          return (_a = window.localStorage.getItem(STORAGE_KEY)) != null ? _a : "";
        } catch (e) {
          return "";
        }
      }
      function buildRoomUrl(roomId, callSign, mode, mapSize, missionId) {
        let url = `${window.location.origin}/?room=${encodeURIComponent(roomId)}`;
        if (mode) {
          url += `&mode=${encodeURIComponent(mode)}`;
        }
        if (missionId) {
          url += `&mission=${encodeURIComponent(missionId)}`;
        }
        if (callSign) {
          url += `&name=${encodeURIComponent(callSign)}`;
        }
        if (mapSize) {
          url += `&mapW=${mapSize.w}&mapH=${mapSize.h}`;
        }
        return url;
      }
      function generateRoomId(prefix) {
        let slug = "";
        while (slug.length < 6) {
          slug = Math.random().toString(36).slice(2, 8);
        }
        if (prefix) {
          return `${prefix}-${slug}`;
        }
        return `r-${slug}`;
      }
      function showSaveStatus(message) {
        if (!saveStatus) {
          return;
        }
        saveStatus.textContent = message;
        if (saveStatusTimer !== null) {
          window.clearTimeout(saveStatusTimer);
        }
        saveStatusTimer = window.setTimeout(() => {
          if (saveStatus) {
            saveStatus.textContent = "";
          }
          saveStatusTimer = null;
        }, 2e3);
      }
    }
  });
  require_lobby();
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2J1cy50cyIsICJzcmMvc3RhdGUudHMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9yZWZsZWN0L25hbWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vd2lyZS92YXJpbnQuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90by1pbnQ2NC5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2Rlc2NyaXB0b3JzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcmVmbGVjdC9zY2FsYXIuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9yZWZsZWN0L3Vuc2FmZS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2NvZGVnZW52Mi9yZXN0b3JlLWpzb24tbmFtZXMuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS93aXJlL3RleHQtZm9ybWF0LmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcmVmbGVjdC9uZXN0ZWQtdHlwZXMuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9yZWdpc3RyeS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2NvZGVnZW52Mi9ib290LmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vZmllbGRzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vd2lyZS9iYXNlNjQtZW5jb2RpbmcuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9pcy1tZXNzYWdlLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcmVmbGVjdC9lcnJvci5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3JlZmxlY3QvZ3VhcmQuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS93aXJlL3RleHQtZW5jb2RpbmcuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS93aXJlL2JpbmFyeS1lbmNvZGluZy5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3JlZmxlY3QvcmVmbGVjdC1jaGVjay5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3drdC93cmFwcGVycy5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2NyZWF0ZS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3JlZmxlY3QvcmVmbGVjdC5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3RvLWJpbmFyeS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2Nsb25lLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vY29kZWdlbnYyL21lc3NhZ2UuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9jb2RlZ2VudjIvZW51bS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3drdC9nZW4vZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3JfcGIuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9jb2RlZ2VudjIvZW1iZWQuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9jb2RlZ2VudjIvZXh0ZW5zaW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vZnJvbS1iaW5hcnkuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9jb2RlZ2VudjIvZmlsZS5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2NvZGVnZW52Mi9zZXJ2aWNlLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vY29kZWdlbnYyL3N5bWJvbHMuanMiLCAibm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9jb2RlZ2VudjIvc2NhbGFyLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vY29kZWdlbnYyL3R5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vY29kZWdlbnYyL2luZGV4LmpzIiwgInNyYy9wcm90by9wcm90by93c19tZXNzYWdlc19wYi50cyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3R5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vZXF1YWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vdG8tanNvbi5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2Zyb20tanNvbi5qcyIsICJub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL21lcmdlLmpzIiwgIm5vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vaW5kZXguanMiLCAic3JjL3Byb3RvX2hlbHBlcnMudHMiLCAic3JjL25ldC50cyIsICJzcmMvdXBncmFkZXMudHMiLCAic3JjL2xvYmJ5LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IE1pc3NpbGVTZWxlY3Rpb24sIE1pc3Npb25PYmplY3RpdmVTdGF0ZSB9IGZyb20gXCIuL3N0YXRlXCI7XG5pbXBvcnQgdHlwZSB7IERpYWxvZ3VlQ29udGVudCB9IGZyb20gXCIuL3N0b3J5L3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFNoaXBDb250ZXh0ID0gXCJzaGlwXCIgfCBcIm1pc3NpbGVcIjtcbmV4cG9ydCB0eXBlIFNoaXBUb29sID0gXCJzZXRcIiB8IFwic2VsZWN0XCIgfCBudWxsO1xuZXhwb3J0IHR5cGUgTWlzc2lsZVRvb2wgPSBcInNldFwiIHwgXCJzZWxlY3RcIiB8IG51bGw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRNYXAge1xuICBcImNvbnRleHQ6Y2hhbmdlZFwiOiB7IGNvbnRleHQ6IFNoaXBDb250ZXh0IH07XG4gIFwic2hpcDp0b29sQ2hhbmdlZFwiOiB7IHRvb2w6IFNoaXBUb29sIH07XG4gIFwic2hpcDp3YXlwb2ludEFkZGVkXCI6IHsgaW5kZXg6IG51bWJlciB9O1xuICBcInNoaXA6d2F5cG9pbnRNb3ZlZFwiOiB7IGluZGV4OiBudW1iZXI7IHg6IG51bWJlcjsgeTogbnVtYmVyIH07XG4gIFwic2hpcDpsZWdTZWxlY3RlZFwiOiB7IGluZGV4OiBudW1iZXIgfCBudWxsIH07XG4gIFwic2hpcDp3YXlwb2ludERlbGV0ZWRcIjogeyBpbmRleDogbnVtYmVyIH07XG4gIFwic2hpcDp3YXlwb2ludHNDbGVhcmVkXCI6IHZvaWQ7XG4gIFwic2hpcDpjbGVhckludm9rZWRcIjogdm9pZDtcbiAgXCJzaGlwOnNwZWVkQ2hhbmdlZFwiOiB7IHZhbHVlOiBudW1iZXIgfTtcbiAgXCJzaGlwOmhlYXRQcm9qZWN0aW9uVXBkYXRlZFwiOiB7IGhlYXRWYWx1ZXM6IG51bWJlcltdIH07XG4gIFwiaGVhdDptYXJrZXJBbGlnbmVkXCI6IHsgdmFsdWU6IG51bWJlcjsgbWFya2VyOiBudW1iZXIgfTtcbiAgXCJoZWF0Ondhcm5FbnRlcmVkXCI6IHsgdmFsdWU6IG51bWJlcjsgd2FybkF0OiBudW1iZXIgfTtcbiAgXCJoZWF0OmNvb2xlZEJlbG93V2FyblwiOiB7IHZhbHVlOiBudW1iZXI7IHdhcm5BdDogbnVtYmVyIH07XG4gIFwiaGVhdDpzdGFsbFRyaWdnZXJlZFwiOiB7IHN0YWxsVW50aWw6IG51bWJlciB9O1xuICBcImhlYXQ6c3RhbGxSZWNvdmVyZWRcIjogeyB2YWx1ZTogbnVtYmVyIH07XG4gIFwiaGVhdDpkdWFsTWV0ZXJEaXZlcmdlZFwiOiB7IHBsYW5uZWQ6IG51bWJlcjsgYWN0dWFsOiBudW1iZXIgfTtcbiAgXCJ1aTp3YXlwb2ludEhvdmVyU3RhcnRcIjogeyBpbmRleDogbnVtYmVyIH07XG4gIFwidWk6d2F5cG9pbnRIb3ZlckVuZFwiOiB7IGluZGV4OiBudW1iZXIgfTtcbiAgXCJtaXNzaWxlOnJvdXRlQWRkZWRcIjogeyByb3V0ZUlkOiBzdHJpbmcgfTtcbiAgXCJtaXNzaWxlOnJvdXRlRGVsZXRlZFwiOiB7IHJvdXRlSWQ6IHN0cmluZyB9O1xuICBcIm1pc3NpbGU6cm91dGVSZW5hbWVkXCI6IHsgcm91dGVJZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfTtcbiAgXCJtaXNzaWxlOmFjdGl2ZVJvdXRlQ2hhbmdlZFwiOiB7IHJvdXRlSWQ6IHN0cmluZyB8IG51bGwgfTtcbiAgXCJtaXNzaWxlOnRvb2xDaGFuZ2VkXCI6IHsgdG9vbDogTWlzc2lsZVRvb2wgfTtcbiAgXCJtaXNzaWxlOnNlbGVjdGlvbkNoYW5nZWRcIjogeyBzZWxlY3Rpb246IE1pc3NpbGVTZWxlY3Rpb24gfCBudWxsIH07XG4gIFwibWlzc2lsZTp3YXlwb2ludEFkZGVkXCI6IHsgcm91dGVJZDogc3RyaW5nOyBpbmRleDogbnVtYmVyIH07XG4gIFwibWlzc2lsZTp3YXlwb2ludE1vdmVkXCI6IHsgcm91dGVJZDogc3RyaW5nOyBpbmRleDogbnVtYmVyOyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICBcIm1pc3NpbGU6d2F5cG9pbnREZWxldGVkXCI6IHsgcm91dGVJZDogc3RyaW5nOyBpbmRleDogbnVtYmVyIH07XG4gIFwibWlzc2lsZTp3YXlwb2ludHNDbGVhcmVkXCI6IHsgcm91dGVJZDogc3RyaW5nIH07XG4gIFwibWlzc2lsZTpzcGVlZENoYW5nZWRcIjogeyB2YWx1ZTogbnVtYmVyOyBpbmRleDogbnVtYmVyIH07XG4gIFwibWlzc2lsZTphZ3JvQ2hhbmdlZFwiOiB7IHZhbHVlOiBudW1iZXIgfTtcbiAgXCJtaXNzaWxlOmxhdW5jaFJlcXVlc3RlZFwiOiB7IHJvdXRlSWQ6IHN0cmluZyB9O1xuICBcIm1pc3NpbGU6bGF1bmNoZWRcIjogeyByb3V0ZUlkOiBzdHJpbmcgfTtcbiAgXCJtaXNzaWxlOmNvb2xkb3duVXBkYXRlZFwiOiB7IHNlY29uZHNSZW1haW5pbmc6IG51bWJlciB9O1xuICBcIm1pc3NpbGU6ZGVsZXRlSW52b2tlZFwiOiB2b2lkO1xuICBcIm1pc3NpbGU6cHJlc2V0U2VsZWN0ZWRcIjogeyBwcmVzZXROYW1lOiBzdHJpbmcgfTtcbiAgXCJtaXNzaWxlOmhlYXRQcm9qZWN0aW9uVXBkYXRlZFwiOiB7IHdpbGxPdmVyaGVhdDogYm9vbGVhbjsgb3ZlcmhlYXRBdD86IG51bWJlciB9O1xuICBcIm1pc3NpbGU6b3ZlcmhlYXRlZFwiOiB7IG1pc3NpbGVJZDogc3RyaW5nOyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICBcIm1pc3NpbGU6Y3JhZnRSZXF1ZXN0ZWRcIjogeyBub2RlSWQ6IHN0cmluZzsgaGVhdENhcGFjaXR5OiBudW1iZXIgfTtcbiAgXCJoZWxwOnZpc2libGVDaGFuZ2VkXCI6IHsgdmlzaWJsZTogYm9vbGVhbiB9O1xuICBcInN0YXRlOnVwZGF0ZWRcIjogdm9pZDtcbiAgXCJjb25uZWN0aW9uOmVycm9yXCI6IHsgbWVzc2FnZTogc3RyaW5nIH07XG4gIFwiZGFnOmxpc3RcIjogeyBub2RlczogQXJyYXk8eyBpZDogc3RyaW5nOyBraW5kOiBzdHJpbmc7IGxhYmVsOiBzdHJpbmc7IHN0YXR1czogc3RyaW5nOyByZW1haW5pbmdfczogbnVtYmVyOyBkdXJhdGlvbl9zOiBudW1iZXI7IHJlcGVhdGFibGU6IGJvb2xlYW4gfT4gfTtcbiAgXCJ0dXRvcmlhbDpzdGFydGVkXCI6IHsgaWQ6IHN0cmluZyB9O1xuICBcInR1dG9yaWFsOnN0ZXBDaGFuZ2VkXCI6IHsgaWQ6IHN0cmluZzsgc3RlcEluZGV4OiBudW1iZXI7IHRvdGFsOiBudW1iZXIgfTtcbiAgXCJ0dXRvcmlhbDpjb21wbGV0ZWRcIjogeyBpZDogc3RyaW5nIH07XG4gIFwidHV0b3JpYWw6c2tpcHBlZFwiOiB7IGlkOiBzdHJpbmc7IGF0U3RlcDogbnVtYmVyIH07XG4gIFwiYm90OnNwYXduUmVxdWVzdGVkXCI6IHZvaWQ7XG4gIFwiZGlhbG9ndWU6b3BlbmVkXCI6IHsgbm9kZUlkOiBzdHJpbmc7IGNoYXB0ZXJJZDogc3RyaW5nIH07XG4gIFwiZGlhbG9ndWU6Y2xvc2VkXCI6IHsgbm9kZUlkOiBzdHJpbmc7IGNoYXB0ZXJJZDogc3RyaW5nIH07XG4gIFwiZGlhbG9ndWU6Y2hvaWNlXCI6IHsgbm9kZUlkOiBzdHJpbmc7IGNob2ljZUlkOiBzdHJpbmc7IGNoYXB0ZXJJZDogc3RyaW5nIH07XG4gIFwic3Rvcnk6ZmxhZ1VwZGF0ZWRcIjogeyBmbGFnOiBzdHJpbmc7IHZhbHVlOiBib29sZWFuIH07XG4gIFwic3Rvcnk6cHJvZ3Jlc3NlZFwiOiB7IGNoYXB0ZXJJZDogc3RyaW5nOyBub2RlSWQ6IHN0cmluZyB9O1xuICBcInN0b3J5Om5vZGVBY3RpdmF0ZWRcIjogeyBub2RlSWQ6IHN0cmluZzsgZGlhbG9ndWU/OiBEaWFsb2d1ZUNvbnRlbnQgfTtcbiAgXCJtaXNzaW9uOnVwZGF0ZVwiOlxuICAgIHwgeyByZWFzb246IFwic25hcHNob3RcIiB8IFwiZGVsdGFcIiB9XG4gICAgfCB7XG4gICAgICAgIG1pc3Npb25JZDogc3RyaW5nO1xuICAgICAgICBzdGF0dXM6IHN0cmluZztcbiAgICAgICAgb2JqZWN0aXZlczogTWlzc2lvbk9iamVjdGl2ZVN0YXRlW107XG4gICAgICAgIHNlcnZlclRpbWU6IG51bWJlcjtcbiAgICAgIH07XG4gIFwibWlzc2lvbjpvZmZlcmVkXCI6IHtcbiAgICBtaXNzaW9uSWQ6IHN0cmluZztcbiAgICB0ZW1wbGF0ZUlkOiBzdHJpbmc7XG4gICAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgICBhcmNoZXR5cGU6IHN0cmluZztcbiAgICBvYmplY3RpdmVzOiBzdHJpbmdbXTtcbiAgICB0aW1lb3V0OiBudW1iZXI7XG4gIH07XG4gIFwibWlzc2lvbjpzdGFydFwiOiB7IG1pc3Npb25JZDogc3RyaW5nIH07XG4gIFwibWlzc2lvbjpvYmplY3RpdmVzLXVwZGF0ZWRcIjogeyBvYmplY3RpdmVzOiBNaXNzaW9uT2JqZWN0aXZlU3RhdGVbXSB9O1xuICBcIm1pc3Npb246cHJvZ3Jlc3MtY2hhbmdlZFwiOiB7IHByb2dyZXNzOiBudW1iZXI7IG9iamVjdGl2ZXM6IE1pc3Npb25PYmplY3RpdmVTdGF0ZVtdIH07XG4gIFwibWlzc2lvbjpiZWFjb24tbG9ja2VkXCI6IHsgaW5kZXg6IG51bWJlciB9O1xuICBcIm1pc3Npb246Y29tcGxldGVkXCI6IHsgbWlzc2lvbklkOiBzdHJpbmcgfTtcbiAgXCJtaXNzaW9uOmZhaWxlZFwiOiB7IG1pc3Npb25JZDogc3RyaW5nOyByZWFzb24/OiBzdHJpbmcgfTtcbiAgXCJiZWFjb246ZGlzY292ZXJlZFwiOiB7IGlkOiBzdHJpbmc7IG9yZGluYWw6IG51bWJlciB9O1xuICBcImJlYWNvbjphY3RpdmF0ZWRcIjogeyBpZDogc3RyaW5nOyBvcmRpbmFsOiBudW1iZXIgfTtcbiAgXCJhdWRpbzpyZXN1bWVcIjogdm9pZDtcbiAgXCJhdWRpbzptdXRlXCI6IHZvaWQ7XG4gIFwiYXVkaW86dW5tdXRlXCI6IHZvaWQ7XG4gIFwiYXVkaW86c2V0LW1hc3Rlci1nYWluXCI6IHsgZ2FpbjogbnVtYmVyIH07XG4gIFwiYXVkaW86c2Z4XCI6IHsgbmFtZTogXCJ1aVwiIHwgXCJsYXNlclwiIHwgXCJ0aHJ1c3RcIiB8IFwiZXhwbG9zaW9uXCIgfCBcImxvY2tcIiB8IFwiZGlhbG9ndWVcIjsgdmVsb2NpdHk/OiBudW1iZXI7IHBhbj86IG51bWJlciB9O1xuICBcImF1ZGlvOm11c2ljOnNldC1zY2VuZVwiOiB7IHNjZW5lOiBcImFtYmllbnRcIiB8IFwiY29tYmF0XCIgfCBcImxvYmJ5XCI7IHNlZWQ/OiBudW1iZXIgfTtcbiAgXCJhdWRpbzptdXNpYzpwYXJhbVwiOiB7IGtleTogc3RyaW5nOyB2YWx1ZTogbnVtYmVyIH07XG4gIFwiYXVkaW86bXVzaWM6dHJhbnNwb3J0XCI6IHsgY21kOiBcInN0YXJ0XCIgfCBcInN0b3BcIiB8IFwicGF1c2VcIiB9O1xuICBcInVwZ3JhZGVzOnRvZ2dsZVwiOiB2b2lkO1xuICBcInVwZ3JhZGVzOnNob3dcIjogdm9pZDtcbiAgXCJ1cGdyYWRlczpoaWRlXCI6IHZvaWQ7XG4gIFwidXBncmFkZXM6Y291bnRVcGRhdGVkXCI6IHsgY291bnQ6IG51bWJlciB9O1xufVxuXG5leHBvcnQgdHlwZSBFdmVudEtleSA9IGtleW9mIEV2ZW50TWFwO1xuZXhwb3J0IHR5cGUgRXZlbnRQYXlsb2FkPEsgZXh0ZW5kcyBFdmVudEtleT4gPSBFdmVudE1hcFtLXTtcbmV4cG9ydCB0eXBlIEhhbmRsZXI8SyBleHRlbmRzIEV2ZW50S2V5PiA9IChwYXlsb2FkOiBFdmVudFBheWxvYWQ8Sz4pID0+IHZvaWQ7XG5cbnR5cGUgVm9pZEtleXMgPSB7XG4gIFtLIGluIEV2ZW50S2V5XTogRXZlbnRNYXBbS10gZXh0ZW5kcyB2b2lkID8gSyA6IG5ldmVyXG59W0V2ZW50S2V5XTtcblxudHlwZSBOb25Wb2lkS2V5cyA9IEV4Y2x1ZGU8RXZlbnRLZXksIFZvaWRLZXlzPjtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudEJ1cyB7XG4gIG9uPEsgZXh0ZW5kcyBFdmVudEtleT4oZXZlbnQ6IEssIGhhbmRsZXI6IEhhbmRsZXI8Sz4pOiAoKSA9PiB2b2lkO1xuICBlbWl0PEsgZXh0ZW5kcyBOb25Wb2lkS2V5cz4oZXZlbnQ6IEssIHBheWxvYWQ6IEV2ZW50UGF5bG9hZDxLPik6IHZvaWQ7XG4gIGVtaXQ8SyBleHRlbmRzIFZvaWRLZXlzPihldmVudDogSyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFdmVudEJ1cygpOiBFdmVudEJ1cyB7XG4gIGNvbnN0IGhhbmRsZXJzID0gbmV3IE1hcDxFdmVudEtleSwgU2V0PEZ1bmN0aW9uPj4oKTtcbiAgcmV0dXJuIHtcbiAgICBvbihldmVudCwgaGFuZGxlcikge1xuICAgICAgbGV0IHNldCA9IGhhbmRsZXJzLmdldChldmVudCk7XG4gICAgICBpZiAoIXNldCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgIGhhbmRsZXJzLnNldChldmVudCwgc2V0KTtcbiAgICAgIH1cbiAgICAgIHNldC5hZGQoaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4gc2V0IS5kZWxldGUoaGFuZGxlcik7XG4gICAgfSxcbiAgICBlbWl0KGV2ZW50OiBFdmVudEtleSwgcGF5bG9hZD86IHVua25vd24pIHtcbiAgICAgIGNvbnN0IHNldCA9IGhhbmRsZXJzLmdldChldmVudCk7XG4gICAgICBpZiAoIXNldCB8fCBzZXQuc2l6ZSA9PT0gMCkgcmV0dXJuO1xuICAgICAgZm9yIChjb25zdCBmbiBvZiBzZXQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAoZm4gYXMgKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZCkocGF5bG9hZCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtidXNdIGhhbmRsZXIgZm9yICR7ZXZlbnR9IGZhaWxlZGAsIGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2hpcENvbnRleHQsIFNoaXBUb29sLCBNaXNzaWxlVG9vbCB9IGZyb20gXCIuL2J1c1wiO1xuaW1wb3J0IHR5cGUgeyBEaWFsb2d1ZUNvbnRlbnQgfSBmcm9tIFwiLi9zdG9yeS90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgTUlTU0lMRV9NSU5fU1BFRUQgPSA0MDtcbmV4cG9ydCBjb25zdCBNSVNTSUxFX01BWF9TUEVFRCA9IDI1MDtcbmV4cG9ydCBjb25zdCBNSVNTSUxFX01JTl9BR1JPID0gMTAwO1xuZXhwb3J0IGNvbnN0IE1JU1NJTEVfTUFYX0xJRkVUSU1FID0gMTIwO1xuZXhwb3J0IGNvbnN0IE1JU1NJTEVfTUlOX0xJRkVUSU1FID0gMjA7XG5leHBvcnQgY29uc3QgTUlTU0lMRV9MSUZFVElNRV9TUEVFRF9QRU5BTFRZID0gODA7XG5leHBvcnQgY29uc3QgTUlTU0lMRV9MSUZFVElNRV9BR1JPX1BFTkFMVFkgPSA0MDtcbmV4cG9ydCBjb25zdCBNSVNTSUxFX0xJRkVUSU1FX0FHUk9fUkVGID0gMjAwMDtcblxuZXhwb3J0IGludGVyZmFjZSBNaXNzaWxlTGltaXRzIHtcbiAgc3BlZWRNaW46IG51bWJlcjtcbiAgc3BlZWRNYXg6IG51bWJlcjtcbiAgYWdyb01pbjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdheXBvaW50IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHNwZWVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhdFZpZXcge1xuICB2YWx1ZTogbnVtYmVyO1xuICBtYXg6IG51bWJlcjtcbiAgd2FybkF0OiBudW1iZXI7XG4gIG92ZXJoZWF0QXQ6IG51bWJlcjtcbiAgbWFya2VyU3BlZWQ6IG51bWJlcjtcbiAgc3RhbGxVbnRpbE1zOiBudW1iZXI7IC8vIGNsaWVudC1zeW5jZWQgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAga1VwOiBudW1iZXI7XG4gIGtEb3duOiBudW1iZXI7XG4gIGV4cDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNoaXBTbmFwc2hvdCB7XG4gIGlkPzogc3RyaW5nO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgdng6IG51bWJlcjtcbiAgdnk6IG51bWJlcjtcbiAgaHA/OiBudW1iZXI7XG4gIGtpbGxzPzogbnVtYmVyO1xuICB3YXlwb2ludHM6IFdheXBvaW50W107XG4gIGN1cnJlbnRXYXlwb2ludEluZGV4PzogbnVtYmVyO1xuICBoZWF0PzogSGVhdFZpZXc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2hvc3RTbmFwc2hvdCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB2eDogbnVtYmVyO1xuICB2eTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbGVTbmFwc2hvdCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB2eDogbnVtYmVyO1xuICB2eTogbnVtYmVyO1xuICBzZWxmPzogYm9vbGVhbjtcbiAgYWdyb19yYWRpdXM6IG51bWJlcjtcbiAgaGVhdD86IEhlYXRWaWV3OyAvLyBNaXNzaWxlIGhlYXQgZGF0YVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbGVSb3V0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgd2F5cG9pbnRzOiBXYXlwb2ludFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhlYXRQYXJhbXMge1xuICBtYXg6IG51bWJlcjtcbiAgd2FybkF0OiBudW1iZXI7XG4gIG92ZXJoZWF0QXQ6IG51bWJlcjtcbiAgbWFya2VyU3BlZWQ6IG51bWJlcjtcbiAga1VwOiBudW1iZXI7XG4gIGtEb3duOiBudW1iZXI7XG4gIGV4cDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbGVDb25maWcge1xuICBzcGVlZDogbnVtYmVyO1xuICBhZ3JvUmFkaXVzOiBudW1iZXI7XG4gIGxpZmV0aW1lOiBudW1iZXI7XG4gIGhlYXRQYXJhbXM/OiBIZWF0UGFyYW1zOyAvLyBPcHRpb25hbCBjdXN0b20gaGVhdCBjb25maWd1cmF0aW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlzc2lsZVByZXNldCB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc3BlZWQ6IG51bWJlcjtcbiAgYWdyb1JhZGl1czogbnVtYmVyO1xuICBoZWF0UGFyYW1zOiBIZWF0UGFyYW1zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludmVudG9yeUl0ZW0ge1xuICB0eXBlOiBzdHJpbmc7XG4gIHZhcmlhbnRfaWQ6IHN0cmluZztcbiAgaGVhdF9jYXBhY2l0eTogbnVtYmVyO1xuICBxdWFudGl0eTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludmVudG9yeSB7XG4gIGl0ZW1zOiBJbnZlbnRvcnlJdGVtW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBncmFkZUVmZmVjdERhdGEge1xuICB0eXBlOiBzdHJpbmc7IC8vICdzcGVlZF9tdWx0aXBsaWVyJywgJ21pc3NpbGVfdW5sb2NrJywgZXRjLlxuICB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhZ05vZGUge1xuICBpZDogc3RyaW5nO1xuICBraW5kOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nOyAvLyBcImxvY2tlZFwiIHwgXCJhdmFpbGFibGVcIiB8IFwiaW5fcHJvZ3Jlc3NcIiB8IFwiY29tcGxldGVkXCJcbiAgcmVtYWluaW5nX3M6IG51bWJlcjtcbiAgZHVyYXRpb25fczogbnVtYmVyO1xuICByZXBlYXRhYmxlOiBib29sZWFuO1xuICBlZmZlY3RzPzogVXBncmFkZUVmZmVjdERhdGFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYWdTdGF0ZSB7XG4gIG5vZGVzOiBEYWdOb2RlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVyQ2FwYWJpbGl0aWVzIHtcbiAgc3BlZWRNdWx0aXBsaWVyOiBudW1iZXI7XG4gIHVubG9ja2VkTWlzc2lsZXM6IHN0cmluZ1tdO1xuICBoZWF0Q2FwYWNpdHk6IG51bWJlcjtcbiAgaGVhdEVmZmljaWVuY3k6IG51bWJlcjtcbn1cblxuLy8gTWlzc2lsZSBwcmVzZXQgZGVmaW5pdGlvbnMgbWF0Y2hpbmcgYmFja2VuZFxuZXhwb3J0IGNvbnN0IE1JU1NJTEVfUFJFU0VUUzogTWlzc2lsZVByZXNldFtdID0gW1xuICB7XG4gICAgbmFtZTogXCJTY291dFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlNsb3csIGVmZmljaWVudCwgbG9uZy1yYW5nZS4gSGlnaCBoZWF0IGNhcGFjaXR5LlwiLFxuICAgIHNwZWVkOiA4MCxcbiAgICBhZ3JvUmFkaXVzOiAxNTAwLFxuICAgIGhlYXRQYXJhbXM6IHtcbiAgICAgIG1heDogNjAsXG4gICAgICB3YXJuQXQ6IDQyLFxuICAgICAgb3ZlcmhlYXRBdDogNjAsXG4gICAgICBtYXJrZXJTcGVlZDogNzAsXG4gICAgICBrVXA6IDIwLFxuICAgICAga0Rvd246IDE1LFxuICAgICAgZXhwOiAxLjUsXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiSHVudGVyXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQmFsYW5jZWQgc3BlZWQgYW5kIGRldGVjdGlvbi4gU3RhbmRhcmQgaGVhdC5cIixcbiAgICBzcGVlZDogMTUwLFxuICAgIGFncm9SYWRpdXM6IDgwMCxcbiAgICBoZWF0UGFyYW1zOiB7XG4gICAgICBtYXg6IDUwLFxuICAgICAgd2FybkF0OiAzNSxcbiAgICAgIG92ZXJoZWF0QXQ6IDUwLFxuICAgICAgbWFya2VyU3BlZWQ6IDEyMCxcbiAgICAgIGtVcDogMjgsXG4gICAgICBrRG93bjogMTIsXG4gICAgICBleHA6IDEuNSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTbmlwZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJGYXN0LCBuYXJyb3cgZGV0ZWN0aW9uLiBMb3cgaGVhdCBjYXBhY2l0eS5cIixcbiAgICBzcGVlZDogMjIwLFxuICAgIGFncm9SYWRpdXM6IDMwMCxcbiAgICBoZWF0UGFyYW1zOiB7XG4gICAgICBtYXg6IDQwLFxuICAgICAgd2FybkF0OiAyOCxcbiAgICAgIG92ZXJoZWF0QXQ6IDQwLFxuICAgICAgbWFya2VyU3BlZWQ6IDE4MCxcbiAgICAgIGtVcDogMzUsXG4gICAgICBrRG93bjogOCxcbiAgICAgIGV4cDogMS41LFxuICAgIH0sXG4gIH0sXG5dO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmxkTWV0YSB7XG4gIGM/OiBudW1iZXI7XG4gIHc/OiBudW1iZXI7XG4gIGg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmVhY29uRGVmaW5pdGlvbiB7XG4gIGN4OiBudW1iZXI7XG4gIGN5OiBudW1iZXI7XG4gIHJhZGl1czogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1pc3Npb25CZWFjb24ge1xuICBpZDogc3RyaW5nO1xuICBvcmRpbmFsOiBudW1iZXI7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICByYWRpdXM6IG51bWJlcjtcbiAgc2VlZDogbnVtYmVyO1xuICBkaXNjb3ZlcmVkOiBib29sZWFuO1xuICBjb21wbGV0ZWQ6IGJvb2xlYW47XG4gIGNvb2xkb3duVW50aWw6IG51bWJlciB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlzc2lvbkVuY291bnRlclN0YXRlIHtcbiAgaWQ6IHN0cmluZztcbiAgYmVhY29uSWQ6IHN0cmluZztcbiAgd2F2ZUluZGV4OiBudW1iZXI7XG4gIHNwYXduZWRBdDogbnVtYmVyO1xuICBleHBpcmVzQXQ6IG51bWJlcjtcbiAgYWN0aXZlOiBib29sZWFuO1xuICByZWFzb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlzc2lvblBsYXllclN0YXRlIHtcbiAgcGxheWVySWQ6IHN0cmluZztcbiAgY3VycmVudEluZGV4OiBudW1iZXI7XG4gIGFjdGl2ZUJlYWNvbklkOiBzdHJpbmcgfCBudWxsO1xuICBob2xkQWNjdW06IG51bWJlcjtcbiAgaG9sZFJlcXVpcmVkOiBudW1iZXI7XG4gIGRpc3BsYXlIb2xkOiBudW1iZXI7XG4gIGxhc3RTZXJ2ZXJVcGRhdGU6IG51bWJlcjtcbiAgbGFzdERpc3BsYXlTeW5jOiBudW1iZXI7XG4gIGluc2lkZUFjdGl2ZUJlYWNvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaXNzaW9uT2JqZWN0aXZlU3RhdGUge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIGNvbXBsZXRlOiBib29sZWFuO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBNaXNzaW9uU3RhdHVzID0gXCJpZGxlXCIgfCBcImFjdGl2ZVwiIHwgXCJjb21wbGV0ZWRcIiB8IFwiZmFpbGVkXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlzc2lvblN0YXRlIHtcbiAgbWlzc2lvbklkOiBzdHJpbmc7XG4gIHRlbXBsYXRlSWQ6IHN0cmluZztcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgYXJjaGV0eXBlOiBzdHJpbmc7XG4gIGxheW91dFNlZWQ6IG51bWJlcjtcbiAgc2VydmVyVGltZTogbnVtYmVyO1xuICBzdGF0dXM6IE1pc3Npb25TdGF0dXM7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsO1xuICBjb21wbGV0aW9uVGltZTogbnVtYmVyIHwgbnVsbDtcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgYmVhY29uczogTWlzc2lvbkJlYWNvbltdO1xuICBwbGF5ZXI6IE1pc3Npb25QbGF5ZXJTdGF0ZSB8IG51bGw7XG4gIGVuY291bnRlcnM6IE1pc3Npb25FbmNvdW50ZXJTdGF0ZVtdO1xuICBvYmplY3RpdmVzOiBNaXNzaW9uT2JqZWN0aXZlU3RhdGVbXTtcbiAgb2JqZWN0aXZlU3VtbWFyaWVzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TWlzc2lvblN0YXRlKG1pc3Npb246IE1pc3Npb25TdGF0ZSk6IHZvaWQge1xuICBtaXNzaW9uLm1pc3Npb25JZCA9IFwiXCI7XG4gIG1pc3Npb24udGVtcGxhdGVJZCA9IFwiXCI7XG4gIG1pc3Npb24uZGlzcGxheU5hbWUgPSBcIlwiO1xuICBtaXNzaW9uLmFyY2hldHlwZSA9IFwiXCI7XG4gIG1pc3Npb24uc3RhdHVzID0gXCJpZGxlXCI7XG4gIG1pc3Npb24udGltZW91dCA9IDA7XG4gIG1pc3Npb24uc3RhcnRUaW1lID0gbnVsbDtcbiAgbWlzc2lvbi5jb21wbGV0aW9uVGltZSA9IG51bGw7XG4gIG1pc3Npb24ucHJvZ3Jlc3MgPSAwO1xuICBtaXNzaW9uLm9iamVjdGl2ZXMgPSBbXTtcbiAgbWlzc2lvbi5vYmplY3RpdmVTdW1tYXJpZXMgPSBbXTtcbiAgbWlzc2lvbi5wbGF5ZXIgPSBudWxsO1xuICBtaXNzaW9uLmJlYWNvbnMgPSBbXTtcbiAgbWlzc2lvbi5lbmNvdW50ZXJzID0gW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFByb2dyZXNzKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAodmFsdWUgPD0gMCkgcmV0dXJuIDA7XG4gIGlmICh2YWx1ZSA+PSAxKSByZXR1cm4gMTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5RXZlbnQge1xuICBjaGFwdGVyOiBzdHJpbmc7XG4gIG5vZGU6IHN0cmluZztcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcnlTdGF0ZSB7XG4gIGFjdGl2ZU5vZGU6IHN0cmluZyB8IG51bGw7XG4gIGRpYWxvZ3VlOiBEaWFsb2d1ZUNvbnRlbnQgfCBudWxsO1xuICBhdmFpbGFibGU6IHN0cmluZ1tdO1xuICBmbGFnczogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gIHJlY2VudEV2ZW50czogU3RvcnlFdmVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAgbm93OiBudW1iZXI7XG4gIG5vd1N5bmNlZEF0OiBudW1iZXI7XG4gIG1lOiBTaGlwU25hcHNob3QgfCBudWxsO1xuICBnaG9zdHM6IEdob3N0U25hcHNob3RbXTtcbiAgbWlzc2lsZXM6IE1pc3NpbGVTbmFwc2hvdFtdO1xuICBtaXNzaWxlUm91dGVzOiBNaXNzaWxlUm91dGVbXTtcbiAgYWN0aXZlTWlzc2lsZVJvdXRlSWQ6IHN0cmluZyB8IG51bGw7XG4gIG5leHRNaXNzaWxlUmVhZHlBdDogbnVtYmVyO1xuICBtaXNzaWxlQ29uZmlnOiBNaXNzaWxlQ29uZmlnO1xuICBtaXNzaWxlTGltaXRzOiBNaXNzaWxlTGltaXRzO1xuICB3b3JsZE1ldGE6IFdvcmxkTWV0YTtcbiAgaW52ZW50b3J5OiBJbnZlbnRvcnkgfCBudWxsO1xuICBkYWc6IERhZ1N0YXRlIHwgbnVsbDtcbiAgbWlzc2lvbjogTWlzc2lvblN0YXRlIHwgbnVsbDtcbiAgc3Rvcnk6IFN0b3J5U3RhdGUgfCBudWxsO1xuICBjcmFmdEhlYXRDYXBhY2l0eTogbnVtYmVyOyAvLyBIZWF0IGNhcGFjaXR5IHNsaWRlciB2YWx1ZSBmb3IgY3JhZnRpbmdcbiAgY2FwYWJpbGl0aWVzOiBQbGF5ZXJDYXBhYmlsaXRpZXMgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvbiB7XG4gIHR5cGU6IFwid2F5cG9pbnRcIiB8IFwibGVnXCI7XG4gIGluZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlzc2lsZVNlbGVjdGlvbiB7XG4gIHR5cGU6IFwid2F5cG9pbnRcIiB8IFwibGVnXCI7XG4gIGluZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIEFjdGl2ZVRvb2wgPVxuICB8IFwic2hpcC1zZXRcIlxuICB8IFwic2hpcC1zZWxlY3RcIlxuICB8IFwibWlzc2lsZS1zZXRcIlxuICB8IFwibWlzc2lsZS1zZWxlY3RcIlxuICB8IG51bGw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVUlTdGF0ZSB7XG4gIGlucHV0Q29udGV4dDogU2hpcENvbnRleHQ7XG4gIHNoaXBUb29sOiBTaGlwVG9vbDtcbiAgbWlzc2lsZVRvb2w6IE1pc3NpbGVUb29sO1xuICBhY3RpdmVUb29sOiBBY3RpdmVUb29sO1xuICBzaG93U2hpcFJvdXRlOiBib29sZWFuO1xuICBoZWxwVmlzaWJsZTogYm9vbGVhbjtcbiAgem9vbTogbnVtYmVyO1xuICBwYW5YOiBudW1iZXI7XG4gIHBhblk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxVSVN0YXRlKCk6IFVJU3RhdGUge1xuICByZXR1cm4ge1xuICAgIGlucHV0Q29udGV4dDogXCJzaGlwXCIsXG4gICAgc2hpcFRvb2w6IFwic2V0XCIsXG4gICAgbWlzc2lsZVRvb2w6IG51bGwsXG4gICAgYWN0aXZlVG9vbDogXCJzaGlwLXNldFwiLFxuICAgIHNob3dTaGlwUm91dGU6IHRydWUsXG4gICAgaGVscFZpc2libGU6IGZhbHNlLFxuICAgIHpvb206IDEuMCxcbiAgICBwYW5YOiAwLFxuICAgIHBhblk6IDAsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGUobGltaXRzOiBNaXNzaWxlTGltaXRzID0ge1xuICBzcGVlZE1pbjogTUlTU0lMRV9NSU5fU1BFRUQsXG4gIHNwZWVkTWF4OiBNSVNTSUxFX01BWF9TUEVFRCxcbiAgYWdyb01pbjogTUlTU0lMRV9NSU5fQUdSTyxcbn0pOiBBcHBTdGF0ZSB7XG4gIHJldHVybiB7XG4gICAgbm93OiAwLFxuICAgIG5vd1N5bmNlZEF0OiB0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICA6IERhdGUubm93KCksXG4gICAgbWU6IG51bGwsXG4gICAgZ2hvc3RzOiBbXSxcbiAgICBtaXNzaWxlczogW10sXG4gICAgbWlzc2lsZVJvdXRlczogW10sXG4gICAgYWN0aXZlTWlzc2lsZVJvdXRlSWQ6IG51bGwsXG4gICAgbmV4dE1pc3NpbGVSZWFkeUF0OiAwLFxuICAgIG1pc3NpbGVDb25maWc6IHtcbiAgICAgIHNwZWVkOiAxODAsXG4gICAgICBhZ3JvUmFkaXVzOiA4MDAsXG4gICAgICBsaWZldGltZTogbWlzc2lsZUxpZmV0aW1lRm9yKDE4MCwgODAwLCBsaW1pdHMpLFxuICAgICAgaGVhdFBhcmFtczogTUlTU0lMRV9QUkVTRVRTWzFdLmhlYXRQYXJhbXMsIC8vIERlZmF1bHQgdG8gSHVudGVyIHByZXNldFxuICAgIH0sXG4gICAgbWlzc2lsZUxpbWl0czogbGltaXRzLFxuICAgIHdvcmxkTWV0YToge30sXG4gICAgaW52ZW50b3J5OiBudWxsLFxuICAgIGRhZzogbnVsbCxcbiAgICBtaXNzaW9uOiBudWxsLFxuICAgIHN0b3J5OiBudWxsLFxuICAgIGNyYWZ0SGVhdENhcGFjaXR5OiA4MCwgLy8gRGVmYXVsdCB0byBiYXNpYyBtaXNzaWxlIGhlYXQgY2FwYWNpdHlcbiAgICBjYXBhYmlsaXRpZXM6IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaXNzaWxlTGlmZXRpbWVGb3Ioc3BlZWQ6IG51bWJlciwgYWdyb1JhZGl1czogbnVtYmVyLCBsaW1pdHM6IE1pc3NpbGVMaW1pdHMgPSB7XG4gIHNwZWVkTWluOiBNSVNTSUxFX01JTl9TUEVFRCxcbiAgc3BlZWRNYXg6IE1JU1NJTEVfTUFYX1NQRUVELFxuICBhZ3JvTWluOiBNSVNTSUxFX01JTl9BR1JPLFxufSk6IG51bWJlciB7XG4gIGNvbnN0IG1pblNwZWVkID0gTnVtYmVyLmlzRmluaXRlKGxpbWl0cy5zcGVlZE1pbikgPyBsaW1pdHMuc3BlZWRNaW4gOiBNSVNTSUxFX01JTl9TUEVFRDtcbiAgY29uc3QgbWF4U3BlZWQgPSBOdW1iZXIuaXNGaW5pdGUobGltaXRzLnNwZWVkTWF4KSA/IGxpbWl0cy5zcGVlZE1heCA6IE1JU1NJTEVfTUFYX1NQRUVEO1xuICBjb25zdCBtaW5BZ3JvID0gTnVtYmVyLmlzRmluaXRlKGxpbWl0cy5hZ3JvTWluKSA/IGxpbWl0cy5hZ3JvTWluIDogTUlTU0lMRV9NSU5fQUdSTztcbiAgY29uc3Qgc3BhbiA9IG1heFNwZWVkIC0gbWluU3BlZWQ7XG4gIGNvbnN0IHNwZWVkTm9ybSA9IHNwYW4gPiAwID8gY2xhbXAoKHNwZWVkIC0gbWluU3BlZWQpIC8gc3BhbiwgMCwgMSkgOiAwO1xuICBjb25zdCBhZGp1c3RlZEFncm8gPSBNYXRoLm1heCgwLCBhZ3JvUmFkaXVzIC0gbWluQWdybyk7XG4gIGNvbnN0IGFncm9Ob3JtID0gY2xhbXAoYWRqdXN0ZWRBZ3JvIC8gTUlTU0lMRV9MSUZFVElNRV9BR1JPX1JFRiwgMCwgMSk7XG4gIGNvbnN0IHJlZHVjdGlvbiA9IHNwZWVkTm9ybSAqIE1JU1NJTEVfTElGRVRJTUVfU1BFRURfUEVOQUxUWSArIGFncm9Ob3JtICogTUlTU0lMRV9MSUZFVElNRV9BR1JPX1BFTkFMVFk7XG4gIGNvbnN0IGJhc2UgPSBNSVNTSUxFX01BWF9MSUZFVElNRTtcbiAgcmV0dXJuIGNsYW1wKGJhc2UgLSByZWR1Y3Rpb24sIE1JU1NJTEVfTUlOX0xJRkVUSU1FLCBNSVNTSUxFX01BWF9MSUZFVElNRSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZU1pc3NpbGVDb25maWcoXG4gIGNmZzogUGFydGlhbDxQaWNrPE1pc3NpbGVDb25maWcsIFwic3BlZWRcIiB8IFwiYWdyb1JhZGl1c1wiIHwgXCJoZWF0UGFyYW1zXCI+PixcbiAgZmFsbGJhY2s6IE1pc3NpbGVDb25maWcsXG4gIGxpbWl0czogTWlzc2lsZUxpbWl0cyxcbik6IE1pc3NpbGVDb25maWcge1xuICBjb25zdCBtaW5TcGVlZCA9IE51bWJlci5pc0Zpbml0ZShsaW1pdHMuc3BlZWRNaW4pID8gbGltaXRzLnNwZWVkTWluIDogTUlTU0lMRV9NSU5fU1BFRUQ7XG4gIGNvbnN0IG1heFNwZWVkID0gTnVtYmVyLmlzRmluaXRlKGxpbWl0cy5zcGVlZE1heCkgPyBsaW1pdHMuc3BlZWRNYXggOiBNSVNTSUxFX01BWF9TUEVFRDtcbiAgY29uc3QgbWluQWdybyA9IE51bWJlci5pc0Zpbml0ZShsaW1pdHMuYWdyb01pbikgPyBsaW1pdHMuYWdyb01pbiA6IE1JU1NJTEVfTUlOX0FHUk87XG4gIGNvbnN0IGJhc2UgPSBmYWxsYmFjayA/PyB7XG4gICAgc3BlZWQ6IG1pblNwZWVkLFxuICAgIGFncm9SYWRpdXM6IG1pbkFncm8sXG4gICAgbGlmZXRpbWU6IG1pc3NpbGVMaWZldGltZUZvcihtaW5TcGVlZCwgbWluQWdybywgbGltaXRzKSxcbiAgfTtcbiAgY29uc3QgbWVyZ2VkU3BlZWQgPSBOdW1iZXIuaXNGaW5pdGUoY2ZnLnNwZWVkID8/IGJhc2Uuc3BlZWQpID8gKGNmZy5zcGVlZCA/PyBiYXNlLnNwZWVkKSA6IGJhc2Uuc3BlZWQ7XG4gIGNvbnN0IG1lcmdlZEFncm8gPSBOdW1iZXIuaXNGaW5pdGUoY2ZnLmFncm9SYWRpdXMgPz8gYmFzZS5hZ3JvUmFkaXVzKSA/IChjZmcuYWdyb1JhZGl1cyA/PyBiYXNlLmFncm9SYWRpdXMpIDogYmFzZS5hZ3JvUmFkaXVzO1xuICBjb25zdCBzcGVlZCA9IGNsYW1wKG1lcmdlZFNwZWVkLCBtaW5TcGVlZCwgbWF4U3BlZWQpO1xuICBjb25zdCBhZ3JvUmFkaXVzID0gTWF0aC5tYXgobWluQWdybywgbWVyZ2VkQWdybyk7XG4gIGNvbnN0IGhlYXRQYXJhbXMgPSBjZmcuaGVhdFBhcmFtcyA/IHsgLi4uY2ZnLmhlYXRQYXJhbXMgfSA6IGJhc2UuaGVhdFBhcmFtcyA/IHsgLi4uYmFzZS5oZWF0UGFyYW1zIH0gOiB1bmRlZmluZWQ7XG4gIHJldHVybiB7XG4gICAgc3BlZWQsXG4gICAgYWdyb1JhZGl1cyxcbiAgICBsaWZldGltZTogbWlzc2lsZUxpZmV0aW1lRm9yKHNwZWVkLCBhZ3JvUmFkaXVzLCBsaW1pdHMpLFxuICAgIGhlYXRQYXJhbXMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uaWNOb3coKTogbnVtYmVyIHtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH1cbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVdheXBvaW50TGlzdChsaXN0OiBXYXlwb2ludFtdIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFdheXBvaW50W10ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHJldHVybiBbXTtcbiAgcmV0dXJuIGxpc3QubWFwKCh3cCkgPT4gKHsgLi4ud3AgfSkpO1xufVxuXG4vLyBQcm9qZWN0IGhlYXQgYWxvbmcgYSBtaXNzaWxlIHJvdXRlXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbGVSb3V0ZVByb2plY3Rpb24ge1xuICB3YXlwb2ludHM6IFdheXBvaW50W107XG4gIGhlYXRBdFdheXBvaW50czogbnVtYmVyW107XG4gIHdpbGxPdmVyaGVhdDogYm9vbGVhbjtcbiAgb3ZlcmhlYXRBdD86IG51bWJlcjsgLy8gSW5kZXggd2hlcmUgb3ZlcmhlYXQgb2NjdXJzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0TWlzc2lsZUhlYXQoXG4gIHJvdXRlOiBXYXlwb2ludFtdLFxuICBkZWZhdWx0U3BlZWQ6IG51bWJlcixcbiAgaGVhdFBhcmFtczogSGVhdFBhcmFtc1xuKTogTWlzc2lsZVJvdXRlUHJvamVjdGlvbiB7XG4gIGNvbnN0IHByb2plY3Rpb246IE1pc3NpbGVSb3V0ZVByb2plY3Rpb24gPSB7XG4gICAgd2F5cG9pbnRzOiByb3V0ZSxcbiAgICBoZWF0QXRXYXlwb2ludHM6IFtdLFxuICAgIHdpbGxPdmVyaGVhdDogZmFsc2UsXG4gIH07XG5cbiAgaWYgKHJvdXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgbGV0IGhlYXQgPSAwOyAvLyBNaXNzaWxlcyBzdGFydCBhdCB6ZXJvIGhlYXRcbiAgbGV0IHBvcyA9IHsgeDogcm91dGVbMF0ueCwgeTogcm91dGVbMF0ueSB9O1xuICBsZXQgY3VycmVudFNwZWVkID0gcm91dGVbMF0uc3BlZWQgPiAwID8gcm91dGVbMF0uc3BlZWQgOiBkZWZhdWx0U3BlZWQ7XG5cbiAgcHJvamVjdGlvbi5oZWF0QXRXYXlwb2ludHMucHVzaChoZWF0KTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHJvdXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdGFyZ2V0UG9zID0gcm91dGVbaV07XG4gICAgY29uc3QgdGFyZ2V0U3BlZWQgPSB0YXJnZXRQb3Muc3BlZWQgPiAwID8gdGFyZ2V0UG9zLnNwZWVkIDogZGVmYXVsdFNwZWVkO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGFuZCB0aW1lXG4gICAgY29uc3QgZHggPSB0YXJnZXRQb3MueCAtIHBvcy54O1xuICAgIGNvbnN0IGR5ID0gdGFyZ2V0UG9zLnkgLSBwb3MueTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwLjAwMSkge1xuICAgICAgcHJvamVjdGlvbi5oZWF0QXRXYXlwb2ludHMucHVzaChoZWF0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEF2ZXJhZ2Ugc3BlZWQgZHVyaW5nIHNlZ21lbnRcbiAgICBjb25zdCBhdmdTcGVlZCA9IChjdXJyZW50U3BlZWQgKyB0YXJnZXRTcGVlZCkgKiAwLjU7XG4gICAgY29uc3Qgc2VnbWVudFRpbWUgPSBkaXN0YW5jZSAvIE1hdGgubWF4KGF2Z1NwZWVkLCAxKTtcblxuICAgIC8vIENhbGN1bGF0ZSBoZWF0IHJhdGUgKG1hdGNoIHNlcnZlciBmb3JtdWxhKVxuICAgIGNvbnN0IFZuID0gTWF0aC5tYXgoaGVhdFBhcmFtcy5tYXJrZXJTcGVlZCwgMC4wMDAwMDEpO1xuICAgIGNvbnN0IGRldiA9IGF2Z1NwZWVkIC0gaGVhdFBhcmFtcy5tYXJrZXJTcGVlZDtcbiAgICBjb25zdCBwID0gaGVhdFBhcmFtcy5leHA7XG5cbiAgICBsZXQgaGRvdDogbnVtYmVyO1xuICAgIGlmIChkZXYgPj0gMCkge1xuICAgICAgLy8gSGVhdGluZ1xuICAgICAgaGRvdCA9IGhlYXRQYXJhbXMua1VwICogTWF0aC5wb3coZGV2IC8gVm4sIHApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb29saW5nXG4gICAgICBoZG90ID0gLWhlYXRQYXJhbXMua0Rvd24gKiBNYXRoLnBvdyhNYXRoLmFicyhkZXYpIC8gVm4sIHApO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBoZWF0XG4gICAgaGVhdCArPSBoZG90ICogc2VnbWVudFRpbWU7XG4gICAgaGVhdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGhlYXQsIGhlYXRQYXJhbXMubWF4KSk7XG5cbiAgICBwcm9qZWN0aW9uLmhlYXRBdFdheXBvaW50cy5wdXNoKGhlYXQpO1xuICAgIHBvcyA9IHsgeDogdGFyZ2V0UG9zLngsIHk6IHRhcmdldFBvcy55IH07XG4gICAgY3VycmVudFNwZWVkID0gdGFyZ2V0U3BlZWQ7XG5cbiAgICAvLyBDaGVjayBmb3Igb3ZlcmhlYXRcbiAgICBpZiAoaGVhdCA+PSBoZWF0UGFyYW1zLm92ZXJoZWF0QXQgJiYgIXByb2plY3Rpb24ud2lsbE92ZXJoZWF0KSB7XG4gICAgICBwcm9qZWN0aW9uLndpbGxPdmVyaGVhdCA9IHRydWU7XG4gICAgICBwcm9qZWN0aW9uLm92ZXJoZWF0QXQgPSBpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBwb3NpdGlvbiBhbmQgc3BlZWRcbiAgICBwb3MgPSB0YXJnZXRQb3M7XG4gICAgY3VycmVudFNwZWVkID0gdGFyZ2V0U3BlZWQ7XG4gIH1cblxuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU1pc3NpbGVMaW1pdHMoc3RhdGU6IEFwcFN0YXRlLCBsaW1pdHM6IFBhcnRpYWw8TWlzc2lsZUxpbWl0cz4pOiB2b2lkIHtcbiAgc3RhdGUubWlzc2lsZUxpbWl0cyA9IHtcbiAgICBzcGVlZE1pbjogTnVtYmVyLmlzRmluaXRlKGxpbWl0cy5zcGVlZE1pbikgPyBsaW1pdHMuc3BlZWRNaW4hIDogc3RhdGUubWlzc2lsZUxpbWl0cy5zcGVlZE1pbixcbiAgICBzcGVlZE1heDogTnVtYmVyLmlzRmluaXRlKGxpbWl0cy5zcGVlZE1heCkgPyBsaW1pdHMuc3BlZWRNYXghIDogc3RhdGUubWlzc2lsZUxpbWl0cy5zcGVlZE1heCxcbiAgICBhZ3JvTWluOiBOdW1iZXIuaXNGaW5pdGUobGltaXRzLmFncm9NaW4pID8gbGltaXRzLmFncm9NaW4hIDogc3RhdGUubWlzc2lsZUxpbWl0cy5hZ3JvTWluLFxuICB9O1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFJldHVybiBhIGZ1bGx5LXF1YWxpZmllZCBuYW1lIGZvciBhIFByb3RvYnVmIGRlc2NyaXB0b3IuXG4gKiBGb3IgYSBmaWxlIGRlc2NyaXB0b3IsIHJldHVybiB0aGUgb3JpZ2luYWwgZmlsZSBwYXRoLlxuICpcbiAqIFNlZSBodHRwczovL3Byb3RvYnVmLmNvbS9kb2NzL2xhbmd1YWdlLXNwZWMjZnVsbHktcXVhbGlmaWVkLW5hbWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFsaWZpZWROYW1lKGRlc2MpIHtcbiAgICBzd2l0Y2ggKGRlc2Mua2luZCkge1xuICAgICAgICBjYXNlIFwiZmllbGRcIjpcbiAgICAgICAgY2FzZSBcIm9uZW9mXCI6XG4gICAgICAgIGNhc2UgXCJycGNcIjpcbiAgICAgICAgICAgIHJldHVybiBkZXNjLnBhcmVudC50eXBlTmFtZSArIFwiLlwiICsgZGVzYy5uYW1lO1xuICAgICAgICBjYXNlIFwiZW51bV92YWx1ZVwiOiB7XG4gICAgICAgICAgICBjb25zdCBwID0gZGVzYy5wYXJlbnQucGFyZW50XG4gICAgICAgICAgICAgICAgPyBkZXNjLnBhcmVudC5wYXJlbnQudHlwZU5hbWVcbiAgICAgICAgICAgICAgICA6IGRlc2MucGFyZW50LmZpbGUucHJvdG8ucGFja2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwICsgKHAubGVuZ3RoID4gMCA/IFwiLlwiIDogXCJcIikgKyBkZXNjLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInNlcnZpY2VcIjpcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgY2FzZSBcImV4dGVuc2lvblwiOlxuICAgICAgICAgICAgcmV0dXJuIGRlc2MudHlwZU5hbWU7XG4gICAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgICAgICByZXR1cm4gZGVzYy5wcm90by5uYW1lO1xuICAgIH1cbn1cbi8qKlxuICogQ29udmVydHMgc25ha2VfY2FzZSB0byBwcm90b0NhbWVsQ2FzZSBhY2NvcmRpbmcgdG8gdGhlIGNvbnZlbnRpb25cbiAqIHVzZWQgYnkgcHJvdG9jIHRvIGNvbnZlcnQgYSBmaWVsZCBuYW1lIHRvIGEgSlNPTiBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9DYW1lbENhc2Uoc25ha2VDYXNlKSB7XG4gICAgbGV0IGNhcE5leHQgPSBmYWxzZTtcbiAgICBjb25zdCBiID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFrZUNhc2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGMgPSBzbmFrZUNhc2UuY2hhckF0KGkpO1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJfXCI6XG4gICAgICAgICAgICAgICAgY2FwTmV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgY2FzZSBcIjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCI1XCI6XG4gICAgICAgICAgICBjYXNlIFwiNlwiOlxuICAgICAgICAgICAgY2FzZSBcIjdcIjpcbiAgICAgICAgICAgIGNhc2UgXCI4XCI6XG4gICAgICAgICAgICBjYXNlIFwiOVwiOlxuICAgICAgICAgICAgICAgIGIucHVzaChjKTtcbiAgICAgICAgICAgICAgICBjYXBOZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChjYXBOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcE5leHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYyA9IGMudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYi5wdXNoKGMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiLmpvaW4oXCJcIik7XG59XG4vKipcbiAqIE5hbWVzIHRoYXQgY2Fubm90IGJlIHVzZWQgZm9yIG9iamVjdCBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBhcmUgcmVzZXJ2ZWRcbiAqIGJ5IGJ1aWx0LWluIEphdmFTY3JpcHQgcHJvcGVydGllcy5cbiAqL1xuY29uc3QgcmVzZXJ2ZWRPYmplY3RQcm9wZXJ0aWVzID0gbmV3IFNldChbXG4gICAgLy8gbmFtZXMgcmVzZXJ2ZWQgYnkgSmF2YVNjcmlwdFxuICAgIFwiY29uc3RydWN0b3JcIixcbiAgICBcInRvU3RyaW5nXCIsXG4gICAgXCJ0b0pTT05cIixcbiAgICBcInZhbHVlT2ZcIixcbl0pO1xuLyoqXG4gKiBFc2NhcGVzIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGZvciBFQ01BU2NyaXB0IGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzLlxuICpcbiAqIEFsc28gc2VlIHNhZmVJZGVudGlmaWVyKCkgZnJvbSBAYnVmYnVpbGQvcHJvdG9wbHVnaW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlT2JqZWN0UHJvcGVydHkobmFtZSkge1xuICAgIHJldHVybiByZXNlcnZlZE9iamVjdFByb3BlcnRpZXMuaGFzKG5hbWUpID8gbmFtZSArIFwiJFwiIDogbmFtZTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbi8vIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbi8vIG1ldDpcbi8vXG4vLyAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4vLyBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbi8vIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXJcbi8vIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbi8vIGRpc3RyaWJ1dGlvbi5cbi8vICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuLy8gY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbi8vIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vL1xuLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuLy8gXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuLy8gTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4vLyBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuLy8gT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4vLyBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4vLyBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbi8vIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuLy8gVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuLy8gKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4vLyBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuLy9cbi8vIENvZGUgZ2VuZXJhdGVkIGJ5IHRoZSBQcm90b2NvbCBCdWZmZXIgY29tcGlsZXIgaXMgb3duZWQgYnkgdGhlIG93bmVyXG4vLyBvZiB0aGUgaW5wdXQgZmlsZSB1c2VkIHdoZW4gZ2VuZXJhdGluZyBpdC4gIFRoaXMgY29kZSBpcyBub3Rcbi8vIHN0YW5kYWxvbmUgYW5kIHJlcXVpcmVzIGEgc3VwcG9ydCBsaWJyYXJ5IHRvIGJlIGxpbmtlZCB3aXRoIGl0LiAgVGhpc1xuLy8gc3VwcG9ydCBsaWJyYXJ5IGlzIGl0c2VsZiBjb3ZlcmVkIGJ5IHRoZSBhYm92ZSBsaWNlbnNlLlxuLyoqXG4gKiBSZWFkIGEgNjQgYml0IHZhcmludCBhcyB0d28gSlMgbnVtYmVycy5cbiAqXG4gKiBSZXR1cm5zIHR1cGxlOlxuICogWzBdOiBsb3cgYml0c1xuICogWzFdOiBoaWdoIGJpdHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9ibG9iLzhhNzE5MjdkNzRhNGNlMzRlZmUyZDg3NjlmZGExOThmNTJkMjBkMTIvanMvZXhwZXJpbWVudGFsL3J1bnRpbWUva2VybmVsL2J1ZmZlcl9kZWNvZGVyLmpzI0wxNzVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhcmludDY0cmVhZCgpIHtcbiAgICBsZXQgbG93Qml0cyA9IDA7XG4gICAgbGV0IGhpZ2hCaXRzID0gMDtcbiAgICBmb3IgKGxldCBzaGlmdCA9IDA7IHNoaWZ0IDwgMjg7IHNoaWZ0ICs9IDcpIHtcbiAgICAgICAgbGV0IGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICAgICAgbG93Qml0cyB8PSAoYiAmIDB4N2YpIDw8IHNoaWZ0O1xuICAgICAgICBpZiAoKGIgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICAgICAgcmV0dXJuIFtsb3dCaXRzLCBoaWdoQml0c107XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1pZGRsZUJ5dGUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICAvLyBsYXN0IGZvdXIgYml0cyBvZiB0aGUgZmlyc3QgMzIgYml0IG51bWJlclxuICAgIGxvd0JpdHMgfD0gKG1pZGRsZUJ5dGUgJiAweDBmKSA8PCAyODtcbiAgICAvLyAzIHVwcGVyIGJpdHMgYXJlIHBhcnQgb2YgdGhlIG5leHQgMzIgYml0IG51bWJlclxuICAgIGhpZ2hCaXRzID0gKG1pZGRsZUJ5dGUgJiAweDcwKSA+PiA0O1xuICAgIGlmICgobWlkZGxlQnl0ZSAmIDB4ODApID09IDApIHtcbiAgICAgICAgdGhpcy5hc3NlcnRCb3VuZHMoKTtcbiAgICAgICAgcmV0dXJuIFtsb3dCaXRzLCBoaWdoQml0c107XG4gICAgfVxuICAgIGZvciAobGV0IHNoaWZ0ID0gMzsgc2hpZnQgPD0gMzE7IHNoaWZ0ICs9IDcpIHtcbiAgICAgICAgbGV0IGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICAgICAgaGlnaEJpdHMgfD0gKGIgJiAweDdmKSA8PCBzaGlmdDtcbiAgICAgICAgaWYgKChiICYgMHg4MCkgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRCb3VuZHMoKTtcbiAgICAgICAgICAgIHJldHVybiBbbG93Qml0cywgaGlnaEJpdHNdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdmFyaW50XCIpO1xufVxuLyoqXG4gKiBXcml0ZSBhIDY0IGJpdCB2YXJpbnQsIGdpdmVuIGFzIHR3byBKUyBudW1iZXJzLCB0byB0aGUgZ2l2ZW4gYnl0ZXMgYXJyYXkuXG4gKlxuICogQ29weXJpZ2h0IDIwMDggR29vZ2xlIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm90b2NvbGJ1ZmZlcnMvcHJvdG9idWYvYmxvYi84YTcxOTI3ZDc0YTRjZTM0ZWZlMmQ4NzY5ZmRhMTk4ZjUyZDIwZDEyL2pzL2V4cGVyaW1lbnRhbC9ydW50aW1lL2tlcm5lbC93cml0ZXIuanMjTDM0NFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyaW50NjR3cml0ZShsbywgaGksIGJ5dGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyODsgaSA9IGkgKyA3KSB7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gbG8gPj4+IGk7XG4gICAgICAgIGNvbnN0IGhhc05leHQgPSAhKHNoaWZ0ID4+PiA3ID09IDAgJiYgaGkgPT0gMCk7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSAoaGFzTmV4dCA/IHNoaWZ0IHwgMHg4MCA6IHNoaWZ0KSAmIDB4ZmY7XG4gICAgICAgIGJ5dGVzLnB1c2goYnl0ZSk7XG4gICAgICAgIGlmICghaGFzTmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNwbGl0Qml0cyA9ICgobG8gPj4+IDI4KSAmIDB4MGYpIHwgKChoaSAmIDB4MDcpIDw8IDQpO1xuICAgIGNvbnN0IGhhc01vcmVCaXRzID0gIShoaSA+PiAzID09IDApO1xuICAgIGJ5dGVzLnB1c2goKGhhc01vcmVCaXRzID8gc3BsaXRCaXRzIHwgMHg4MCA6IHNwbGl0Qml0cykgJiAweGZmKTtcbiAgICBpZiAoIWhhc01vcmVCaXRzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDM7IGkgPCAzMTsgaSA9IGkgKyA3KSB7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gaGkgPj4+IGk7XG4gICAgICAgIGNvbnN0IGhhc05leHQgPSAhKHNoaWZ0ID4+PiA3ID09IDApO1xuICAgICAgICBjb25zdCBieXRlID0gKGhhc05leHQgPyBzaGlmdCB8IDB4ODAgOiBzaGlmdCkgJiAweGZmO1xuICAgICAgICBieXRlcy5wdXNoKGJ5dGUpO1xuICAgICAgICBpZiAoIWhhc05leHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBieXRlcy5wdXNoKChoaSA+Pj4gMzEpICYgMHgwMSk7XG59XG4vLyBjb25zdGFudHMgZm9yIGJpbmFyeSBtYXRoXG5jb25zdCBUV09fUFdSXzMyX0RCTCA9IDB4MTAwMDAwMDAwO1xuLyoqXG4gKiBQYXJzZSBkZWNpbWFsIHN0cmluZyBvZiA2NCBiaXQgaW50ZWdlciB2YWx1ZSBhcyB0d28gSlMgbnVtYmVycy5cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi1qYXZhc2NyaXB0L2Jsb2IvYTQyOGM1ODI3M2FiYWQwN2M2NjA3MWQ5NzUzYmM0ZDEyODlkZTQyNi9leHBlcmltZW50YWwvcnVudGltZS9pbnQ2NC5qcyNMMTBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludDY0RnJvbVN0cmluZyhkZWMpIHtcbiAgICAvLyBDaGVjayBmb3IgbWludXMgc2lnbi5cbiAgICBjb25zdCBtaW51cyA9IGRlY1swXSA9PT0gXCItXCI7XG4gICAgaWYgKG1pbnVzKSB7XG4gICAgICAgIGRlYyA9IGRlYy5zbGljZSgxKTtcbiAgICB9XG4gICAgLy8gV29yayA2IGRlY2ltYWwgZGlnaXRzIGF0IGEgdGltZSwgYWN0aW5nIGxpa2Ugd2UncmUgY29udmVydGluZyBiYXNlIDFlNlxuICAgIC8vIGRpZ2l0cyB0byBiaW5hcnkuIFRoaXMgaXMgc2FmZSB0byBkbyB3aXRoIGZsb2F0aW5nIHBvaW50IG1hdGggYmVjYXVzZVxuICAgIC8vIE51bWJlci5pc1NhZmVJbnRlZ2VyKEFMTF8zMl9CSVRTICogMWU2KSA9PSB0cnVlLlxuICAgIGNvbnN0IGJhc2UgPSAxZTY7XG4gICAgbGV0IGxvd0JpdHMgPSAwO1xuICAgIGxldCBoaWdoQml0cyA9IDA7XG4gICAgZnVuY3Rpb24gYWRkMWU2ZGlnaXQoYmVnaW4sIGVuZCkge1xuICAgICAgICAvLyBOb3RlOiBOdW1iZXIoJycpIGlzIDAuXG4gICAgICAgIGNvbnN0IGRpZ2l0MWU2ID0gTnVtYmVyKGRlYy5zbGljZShiZWdpbiwgZW5kKSk7XG4gICAgICAgIGhpZ2hCaXRzICo9IGJhc2U7XG4gICAgICAgIGxvd0JpdHMgPSBsb3dCaXRzICogYmFzZSArIGRpZ2l0MWU2O1xuICAgICAgICAvLyBDYXJyeSBiaXRzIGZyb20gbG93Qml0cyB0b1xuICAgICAgICBpZiAobG93Qml0cyA+PSBUV09fUFdSXzMyX0RCTCkge1xuICAgICAgICAgICAgaGlnaEJpdHMgPSBoaWdoQml0cyArICgobG93Qml0cyAvIFRXT19QV1JfMzJfREJMKSB8IDApO1xuICAgICAgICAgICAgbG93Qml0cyA9IGxvd0JpdHMgJSBUV09fUFdSXzMyX0RCTDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGQxZTZkaWdpdCgtMjQsIC0xOCk7XG4gICAgYWRkMWU2ZGlnaXQoLTE4LCAtMTIpO1xuICAgIGFkZDFlNmRpZ2l0KC0xMiwgLTYpO1xuICAgIGFkZDFlNmRpZ2l0KC02KTtcbiAgICByZXR1cm4gbWludXMgPyBuZWdhdGUobG93Qml0cywgaGlnaEJpdHMpIDogbmV3Qml0cyhsb3dCaXRzLCBoaWdoQml0cyk7XG59XG4vKipcbiAqIExvc3NsZXNzbHkgY29udmVydHMgYSA2NC1iaXQgc2lnbmVkIGludGVnZXIgaW4gMzI6MzIgc3BsaXQgcmVwcmVzZW50YXRpb25cbiAqIGludG8gYSBkZWNpbWFsIHN0cmluZy5cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi1qYXZhc2NyaXB0L2Jsb2IvYTQyOGM1ODI3M2FiYWQwN2M2NjA3MWQ5NzUzYmM0ZDEyODlkZTQyNi9leHBlcmltZW50YWwvcnVudGltZS9pbnQ2NC5qcyNMMTBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludDY0VG9TdHJpbmcobG8sIGhpKSB7XG4gICAgbGV0IGJpdHMgPSBuZXdCaXRzKGxvLCBoaSk7XG4gICAgLy8gSWYgd2UncmUgdHJlYXRpbmcgdGhlIGlucHV0IGFzIGEgc2lnbmVkIHZhbHVlIGFuZCB0aGUgaGlnaCBiaXQgaXMgc2V0LCBkb1xuICAgIC8vIGEgbWFudWFsIHR3bydzIGNvbXBsZW1lbnQgY29udmVyc2lvbiBiZWZvcmUgdGhlIGRlY2ltYWwgY29udmVyc2lvbi5cbiAgICBjb25zdCBuZWdhdGl2ZSA9IGJpdHMuaGkgJiAweDgwMDAwMDAwO1xuICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBiaXRzID0gbmVnYXRlKGJpdHMubG8sIGJpdHMuaGkpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB1SW50NjRUb1N0cmluZyhiaXRzLmxvLCBiaXRzLmhpKTtcbiAgICByZXR1cm4gbmVnYXRpdmUgPyBcIi1cIiArIHJlc3VsdCA6IHJlc3VsdDtcbn1cbi8qKlxuICogTG9zc2xlc3NseSBjb252ZXJ0cyBhIDY0LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGluIDMyOjMyIHNwbGl0IHJlcHJlc2VudGF0aW9uXG4gKiBpbnRvIGEgZGVjaW1hbCBzdHJpbmcuXG4gKlxuICogQ29weXJpZ2h0IDIwMDggR29vZ2xlIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm90b2NvbGJ1ZmZlcnMvcHJvdG9idWYtamF2YXNjcmlwdC9ibG9iL2E0MjhjNTgyNzNhYmFkMDdjNjYwNzFkOTc1M2JjNGQxMjg5ZGU0MjYvZXhwZXJpbWVudGFsL3J1bnRpbWUvaW50NjQuanMjTDEwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1SW50NjRUb1N0cmluZyhsbywgaGkpIHtcbiAgICAoeyBsbywgaGkgfSA9IHRvVW5zaWduZWQobG8sIGhpKSk7XG4gICAgLy8gU2tpcCB0aGUgZXhwZW5zaXZlIGNvbnZlcnNpb24gaWYgdGhlIG51bWJlciBpcyBzbWFsbCBlbm91Z2ggdG8gdXNlIHRoZVxuICAgIC8vIGJ1aWx0LWluIGNvbnZlcnNpb25zLlxuICAgIC8vIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSID0gMHgwMDFGRkZGRiBGRkZGRkZGRiwgdGh1cyBhbnkgbnVtYmVyIHdpdGhcbiAgICAvLyBoaWdoQml0cyA8PSAweDFGRkZGRiBjYW4gYmUgc2FmZWx5IGV4cHJlc3NlZCB3aXRoIGEgZG91YmxlIGFuZCByZXRhaW5cbiAgICAvLyBpbnRlZ2VyIHByZWNpc2lvbi5cbiAgICAvLyBQcm92ZW4gYnk6IE51bWJlci5pc1NhZmVJbnRlZ2VyKDB4MUZGRkZGICogMioqMzIgKyAweEZGRkZGRkZGKSA9PSB0cnVlLlxuICAgIGlmIChoaSA8PSAweDFmZmZmZikge1xuICAgICAgICByZXR1cm4gU3RyaW5nKFRXT19QV1JfMzJfREJMICogaGkgKyBsbyk7XG4gICAgfVxuICAgIC8vIFdoYXQgdGhpcyBjb2RlIGlzIGRvaW5nIGlzIGVzc2VudGlhbGx5IGNvbnZlcnRpbmcgdGhlIGlucHV0IG51bWJlciBmcm9tXG4gICAgLy8gYmFzZS0yIHRvIGJhc2UtMWU3LCB3aGljaCBhbGxvd3MgdXMgdG8gcmVwcmVzZW50IHRoZSA2NC1iaXQgcmFuZ2Ugd2l0aFxuICAgIC8vIG9ubHkgMyAodmVyeSBsYXJnZSkgZGlnaXRzLiBUaG9zZSBkaWdpdHMgYXJlIHRoZW4gdHJpdmlhbCB0byBjb252ZXJ0IHRvXG4gICAgLy8gYSBiYXNlLTEwIHN0cmluZy5cbiAgICAvLyBUaGUgbWFnaWMgbnVtYmVycyB1c2VkIGhlcmUgYXJlIC1cbiAgICAvLyAyXjI0ID0gMTY3NzcyMTYgPSAoMSw2Nzc3MjE2KSBpbiBiYXNlLTFlNy5cbiAgICAvLyAyXjQ4ID0gMjgxNDc0OTc2NzEwNjU2ID0gKDIsODE0NzQ5Nyw2NzEwNjU2KSBpbiBiYXNlLTFlNy5cbiAgICAvLyBTcGxpdCAzMjozMiByZXByZXNlbnRhdGlvbiBpbnRvIDE2OjI0OjI0IHJlcHJlc2VudGF0aW9uIHNvIG91clxuICAgIC8vIGludGVybWVkaWF0ZSBkaWdpdHMgZG9uJ3Qgb3ZlcmZsb3cuXG4gICAgY29uc3QgbG93ID0gbG8gJiAweGZmZmZmZjtcbiAgICBjb25zdCBtaWQgPSAoKGxvID4+PiAyNCkgfCAoaGkgPDwgOCkpICYgMHhmZmZmZmY7XG4gICAgY29uc3QgaGlnaCA9IChoaSA+PiAxNikgJiAweGZmZmY7XG4gICAgLy8gQXNzZW1ibGUgb3VyIHRocmVlIGJhc2UtMWU3IGRpZ2l0cywgaWdub3JpbmcgY2Fycmllcy4gVGhlIG1heGltdW1cbiAgICAvLyB2YWx1ZSBpbiBhIGRpZ2l0IGF0IHRoaXMgc3RlcCBpcyByZXByZXNlbnRhYmxlIGFzIGEgNDgtYml0IGludGVnZXIsIHdoaWNoXG4gICAgLy8gY2FuIGJlIHN0b3JlZCBpbiBhIDY0LWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgbGV0IGRpZ2l0QSA9IGxvdyArIG1pZCAqIDY3NzcyMTYgKyBoaWdoICogNjcxMDY1NjtcbiAgICBsZXQgZGlnaXRCID0gbWlkICsgaGlnaCAqIDgxNDc0OTc7XG4gICAgbGV0IGRpZ2l0QyA9IGhpZ2ggKiAyO1xuICAgIC8vIEFwcGx5IGNhcnJpZXMgZnJvbSBBIHRvIEIgYW5kIGZyb20gQiB0byBDLlxuICAgIGNvbnN0IGJhc2UgPSAxMDAwMDAwMDtcbiAgICBpZiAoZGlnaXRBID49IGJhc2UpIHtcbiAgICAgICAgZGlnaXRCICs9IE1hdGguZmxvb3IoZGlnaXRBIC8gYmFzZSk7XG4gICAgICAgIGRpZ2l0QSAlPSBiYXNlO1xuICAgIH1cbiAgICBpZiAoZGlnaXRCID49IGJhc2UpIHtcbiAgICAgICAgZGlnaXRDICs9IE1hdGguZmxvb3IoZGlnaXRCIC8gYmFzZSk7XG4gICAgICAgIGRpZ2l0QiAlPSBiYXNlO1xuICAgIH1cbiAgICAvLyBJZiBkaWdpdEMgaXMgMCwgdGhlbiB3ZSBzaG91bGQgaGF2ZSByZXR1cm5lZCBpbiB0aGUgdHJpdmlhbCBjb2RlIHBhdGhcbiAgICAvLyBhdCB0aGUgdG9wIGZvciBub24tc2FmZSBpbnRlZ2Vycy4gR2l2ZW4gdGhpcywgd2UgY2FuIGFzc3VtZSBib3RoIGRpZ2l0QlxuICAgIC8vIGFuZCBkaWdpdEEgbmVlZCBsZWFkaW5nIHplcm9zLlxuICAgIHJldHVybiAoZGlnaXRDLnRvU3RyaW5nKCkgK1xuICAgICAgICBkZWNpbWFsRnJvbTFlN1dpdGhMZWFkaW5nWmVyb3MoZGlnaXRCKSArXG4gICAgICAgIGRlY2ltYWxGcm9tMWU3V2l0aExlYWRpbmdaZXJvcyhkaWdpdEEpKTtcbn1cbmZ1bmN0aW9uIHRvVW5zaWduZWQobG8sIGhpKSB7XG4gICAgcmV0dXJuIHsgbG86IGxvID4+PiAwLCBoaTogaGkgPj4+IDAgfTtcbn1cbmZ1bmN0aW9uIG5ld0JpdHMobG8sIGhpKSB7XG4gICAgcmV0dXJuIHsgbG86IGxvIHwgMCwgaGk6IGhpIHwgMCB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHR3bydzIGNvbXBsaW1lbnQgbmVnYXRpb24gb2YgaW5wdXQuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9CaXR3aXNlX09wZXJhdG9ycyNTaWduZWRfMzItYml0X2ludGVnZXJzXG4gKi9cbmZ1bmN0aW9uIG5lZ2F0ZShsb3dCaXRzLCBoaWdoQml0cykge1xuICAgIGhpZ2hCaXRzID0gfmhpZ2hCaXRzO1xuICAgIGlmIChsb3dCaXRzKSB7XG4gICAgICAgIGxvd0JpdHMgPSB+bG93Qml0cyArIDE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiBsb3dCaXRzIGlzIDAsIHRoZW4gYml0d2lzZS1ub3QgaXMgMHhGRkZGRkZGRixcbiAgICAgICAgLy8gYWRkaW5nIDEgdG8gdGhhdCwgcmVzdWx0cyBpbiAweDEwMDAwMDAwMCwgd2hpY2ggbGVhdmVzXG4gICAgICAgIC8vIHRoZSBsb3cgYml0cyAweDAgYW5kIHNpbXBseSBhZGRzIG9uZSB0byB0aGUgaGlnaCBiaXRzLlxuICAgICAgICBoaWdoQml0cyArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Qml0cyhsb3dCaXRzLCBoaWdoQml0cyk7XG59XG4vKipcbiAqIFJldHVybnMgZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiBkaWdpdDFlNyB3aXRoIGxlYWRpbmcgemVyb3MuXG4gKi9cbmNvbnN0IGRlY2ltYWxGcm9tMWU3V2l0aExlYWRpbmdaZXJvcyA9IChkaWdpdDFlNykgPT4ge1xuICAgIGNvbnN0IHBhcnRpYWwgPSBTdHJpbmcoZGlnaXQxZTcpO1xuICAgIHJldHVybiBcIjAwMDAwMDBcIi5zbGljZShwYXJ0aWFsLmxlbmd0aCkgKyBwYXJ0aWFsO1xufTtcbi8qKlxuICogV3JpdGUgYSAzMiBiaXQgdmFyaW50LCBzaWduZWQgb3IgdW5zaWduZWQuIFNhbWUgYXMgYHZhcmludDY0d3JpdGUoMCwgdmFsdWUsIGJ5dGVzKWBcbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9ibG9iLzFiMTg4MzNmNGYyYTJmNjgxZjRlNGEyNWNkZjNiMGE0MzExNWVjMjYvanMvYmluYXJ5L2VuY29kZXIuanMjTDE0NFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyaW50MzJ3cml0ZSh2YWx1ZSwgYnl0ZXMpIHtcbiAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgICAvLyB3cml0ZSB2YWx1ZSBhcyB2YXJpbnQgMzJcbiAgICAgICAgd2hpbGUgKHZhbHVlID4gMHg3Zikge1xuICAgICAgICAgICAgYnl0ZXMucHVzaCgodmFsdWUgJiAweDdmKSB8IDB4ODApO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+Pj4gNztcbiAgICAgICAgfVxuICAgICAgICBieXRlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICAgICAgICBieXRlcy5wdXNoKCh2YWx1ZSAmIDEyNykgfCAxMjgpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PiA3O1xuICAgICAgICB9XG4gICAgICAgIGJ5dGVzLnB1c2goMSk7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIGFuIHVuc2lnbmVkIDMyIGJpdCB2YXJpbnQuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm90b2NvbGJ1ZmZlcnMvcHJvdG9idWYvYmxvYi84YTcxOTI3ZDc0YTRjZTM0ZWZlMmQ4NzY5ZmRhMTk4ZjUyZDIwZDEyL2pzL2V4cGVyaW1lbnRhbC9ydW50aW1lL2tlcm5lbC9idWZmZXJfZGVjb2Rlci5qcyNMMjIwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YXJpbnQzMnJlYWQoKSB7XG4gICAgbGV0IGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICBsZXQgcmVzdWx0ID0gYiAmIDB4N2Y7XG4gICAgaWYgKChiICYgMHg4MCkgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBiID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgcmVzdWx0IHw9IChiICYgMHg3ZikgPDwgNztcbiAgICBpZiAoKGIgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Qm91bmRzKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICByZXN1bHQgfD0gKGIgJiAweDdmKSA8PCAxNDtcbiAgICBpZiAoKGIgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Qm91bmRzKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICByZXN1bHQgfD0gKGIgJiAweDdmKSA8PCAyMTtcbiAgICBpZiAoKGIgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Qm91bmRzKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIEV4dHJhY3Qgb25seSBsYXN0IDQgYml0c1xuICAgIGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICByZXN1bHQgfD0gKGIgJiAweDBmKSA8PCAyODtcbiAgICBmb3IgKGxldCByZWFkQnl0ZXMgPSA1OyAoYiAmIDB4ODApICE9PSAwICYmIHJlYWRCeXRlcyA8IDEwOyByZWFkQnl0ZXMrKylcbiAgICAgICAgYiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgIGlmICgoYiAmIDB4ODApICE9IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdmFyaW50XCIpO1xuICAgIHRoaXMuYXNzZXJ0Qm91bmRzKCk7XG4gICAgLy8gUmVzdWx0IGNhbiBoYXZlIDMyIGJpdHMsIGNvbnZlcnQgaXQgdG8gdW5zaWduZWRcbiAgICByZXR1cm4gcmVzdWx0ID4+PiAwO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBpbnQ2NEZyb21TdHJpbmcsIGludDY0VG9TdHJpbmcsIHVJbnQ2NFRvU3RyaW5nLCB9IGZyb20gXCIuL3dpcmUvdmFyaW50LmpzXCI7XG4vKipcbiAqIEludDY0U3VwcG9ydCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b0ludDY0ID0gLypAX19QVVJFX18qLyBtYWtlSW50NjRTdXBwb3J0KCk7XG5mdW5jdGlvbiBtYWtlSW50NjRTdXBwb3J0KCkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig4KSk7XG4gICAgLy8gbm90ZSB0aGF0IFNhZmFyaSAxNCBpbXBsZW1lbnRzIEJpZ0ludCwgYnV0IG5vdCB0aGUgRGF0YVZpZXcgbWV0aG9kc1xuICAgIGNvbnN0IG9rID0gdHlwZW9mIEJpZ0ludCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiBkdi5nZXRCaWdJbnQ2NCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiBkdi5nZXRCaWdVaW50NjQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2YgZHYuc2V0QmlnSW50NjQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2YgZHYuc2V0QmlnVWludDY0ID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKCEhZ2xvYmFsVGhpcy5EZW5vIHx8XG4gICAgICAgICAgICB0eXBlb2YgcHJvY2VzcyAhPSBcIm9iamVjdFwiIHx8XG4gICAgICAgICAgICB0eXBlb2YgcHJvY2Vzcy5lbnYgIT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuQlVGX0JJR0lOVF9ESVNBQkxFICE9PSBcIjFcIik7XG4gICAgaWYgKG9rKSB7XG4gICAgICAgIGNvbnN0IE1JTiA9IEJpZ0ludChcIi05MjIzMzcyMDM2ODU0Nzc1ODA4XCIpO1xuICAgICAgICBjb25zdCBNQVggPSBCaWdJbnQoXCI5MjIzMzcyMDM2ODU0Nzc1ODA3XCIpO1xuICAgICAgICBjb25zdCBVTUlOID0gQmlnSW50KFwiMFwiKTtcbiAgICAgICAgY29uc3QgVU1BWCA9IEJpZ0ludChcIjE4NDQ2NzQ0MDczNzA5NTUxNjE1XCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgemVybzogQmlnSW50KDApLFxuICAgICAgICAgICAgc3VwcG9ydGVkOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaSA9IHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiID8gdmFsdWUgOiBCaWdJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChiaSA+IE1BWCB8fCBiaSA8IE1JTikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW50NjQ6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1UGFyc2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaSA9IHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiID8gdmFsdWUgOiBCaWdJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChiaSA+IFVNQVggfHwgYmkgPCBVTUlOKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCB1aW50NjQ6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmModmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkdi5zZXRCaWdJbnQ2NCgwLCB0aGlzLnBhcnNlKHZhbHVlKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbG86IGR2LmdldEludDMyKDAsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBoaTogZHYuZ2V0SW50MzIoNCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1RW5jKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZHYuc2V0QmlnSW50NjQoMCwgdGhpcy51UGFyc2UodmFsdWUpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsbzogZHYuZ2V0SW50MzIoMCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIGhpOiBkdi5nZXRJbnQzMig0LCB0cnVlKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYyhsbywgaGkpIHtcbiAgICAgICAgICAgICAgICBkdi5zZXRJbnQzMigwLCBsbywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZHYuc2V0SW50MzIoNCwgaGksIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkdi5nZXRCaWdJbnQ2NCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1RGVjKGxvLCBoaSkge1xuICAgICAgICAgICAgICAgIGR2LnNldEludDMyKDAsIGxvLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBkdi5zZXRJbnQzMig0LCBoaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGR2LmdldEJpZ1VpbnQ2NCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHplcm86IFwiMFwiLFxuICAgICAgICBzdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICBwYXJzZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0SW50NjRTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB1UGFyc2UodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydFVJbnQ2NFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVuYyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0SW50NjRTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGludDY0RnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVFbmModmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydFVJbnQ2NFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gaW50NjRGcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjKGxvLCBoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGludDY0VG9TdHJpbmcobG8sIGhpKTtcbiAgICAgICAgfSxcbiAgICAgICAgdURlYyhsbywgaGkpIHtcbiAgICAgICAgICAgIHJldHVybiB1SW50NjRUb1N0cmluZyhsbywgaGkpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBhc3NlcnRJbnQ2NFN0cmluZyh2YWx1ZSkge1xuICAgIGlmICghL14tP1swLTldKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgaW50NjQ6IFwiICsgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFVJbnQ2NFN0cmluZyh2YWx1ZSkge1xuICAgIGlmICghL15bMC05XSskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQ2NDogXCIgKyB2YWx1ZSk7XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFNjYWxhciB2YWx1ZSB0eXBlcy4gVGhpcyBpcyBhIHN1YnNldCBvZiBmaWVsZCB0eXBlcyBkZWNsYXJlZCBieSBwcm90b2J1ZlxuICogZW51bSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZSBUaGUgdHlwZXMgR1JPVVAgYW5kIE1FU1NBR0VcbiAqIGFyZSBvbWl0dGVkLCBidXQgdGhlIG51bWVyaWNhbCB2YWx1ZXMgYXJlIGlkZW50aWNhbC5cbiAqL1xuZXhwb3J0IHZhciBTY2FsYXJUeXBlO1xuKGZ1bmN0aW9uIChTY2FsYXJUeXBlKSB7XG4gICAgLy8gMCBpcyByZXNlcnZlZCBmb3IgZXJyb3JzLlxuICAgIC8vIE9yZGVyIGlzIHdlaXJkIGZvciBoaXN0b3JpY2FsIHJlYXNvbnMuXG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiRE9VQkxFXCJdID0gMV0gPSBcIkRPVUJMRVwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkZMT0FUXCJdID0gMl0gPSBcIkZMT0FUXCI7XG4gICAgLy8gTm90IFppZ1phZyBlbmNvZGVkLiAgTmVnYXRpdmUgbnVtYmVycyB0YWtlIDEwIGJ5dGVzLiAgVXNlIFRZUEVfU0lOVDY0IGlmXG4gICAgLy8gbmVnYXRpdmUgdmFsdWVzIGFyZSBsaWtlbHkuXG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiSU5UNjRcIl0gPSAzXSA9IFwiSU5UNjRcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJVSU5UNjRcIl0gPSA0XSA9IFwiVUlOVDY0XCI7XG4gICAgLy8gTm90IFppZ1phZyBlbmNvZGVkLiAgTmVnYXRpdmUgbnVtYmVycyB0YWtlIDEwIGJ5dGVzLiAgVXNlIFRZUEVfU0lOVDMyIGlmXG4gICAgLy8gbmVnYXRpdmUgdmFsdWVzIGFyZSBsaWtlbHkuXG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiSU5UMzJcIl0gPSA1XSA9IFwiSU5UMzJcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJGSVhFRDY0XCJdID0gNl0gPSBcIkZJWEVENjRcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJGSVhFRDMyXCJdID0gN10gPSBcIkZJWEVEMzJcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJCT09MXCJdID0gOF0gPSBcIkJPT0xcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJTVFJJTkdcIl0gPSA5XSA9IFwiU1RSSU5HXCI7XG4gICAgLy8gVGFnLWRlbGltaXRlZCBhZ2dyZWdhdGUuXG4gICAgLy8gR3JvdXAgdHlwZSBpcyBkZXByZWNhdGVkIGFuZCBub3Qgc3VwcG9ydGVkIGluIHByb3RvMy4gSG93ZXZlciwgUHJvdG8zXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIHNob3VsZCBzdGlsbCBiZSBhYmxlIHRvIHBhcnNlIHRoZSBncm91cCB3aXJlIGZvcm1hdCBhbmRcbiAgICAvLyB0cmVhdCBncm91cCBmaWVsZHMgYXMgdW5rbm93biBmaWVsZHMuXG4gICAgLy8gVFlQRV9HUk9VUCA9IDEwLFxuICAgIC8vIFRZUEVfTUVTU0FHRSA9IDExLCAgLy8gTGVuZ3RoLWRlbGltaXRlZCBhZ2dyZWdhdGUuXG4gICAgLy8gTmV3IGluIHZlcnNpb24gMi5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJCWVRFU1wiXSA9IDEyXSA9IFwiQllURVNcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJVSU5UMzJcIl0gPSAxM10gPSBcIlVJTlQzMlwiO1xuICAgIC8vIFRZUEVfRU5VTSA9IDE0LFxuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlNGSVhFRDMyXCJdID0gMTVdID0gXCJTRklYRUQzMlwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlNGSVhFRDY0XCJdID0gMTZdID0gXCJTRklYRUQ2NFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlNJTlQzMlwiXSA9IDE3XSA9IFwiU0lOVDMyXCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0lOVDY0XCJdID0gMThdID0gXCJTSU5UNjRcIjtcbn0pKFNjYWxhclR5cGUgfHwgKFNjYWxhclR5cGUgPSB7fSkpO1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBwcm90b0ludDY0IH0gZnJvbSBcIi4uL3Byb3RvLWludDY0LmpzXCI7XG5pbXBvcnQgeyBTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL2Rlc2NyaXB0b3JzLmpzXCI7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBib3RoIHNjYWxhciB2YWx1ZXMgYXJlIGVxdWFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGFyRXF1YWxzKHR5cGUsIGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAvLyBUaGlzIGNvcnJlY3RseSBtYXRjaGVzIGVxdWFsIHZhbHVlcyBleGNlcHQgQllURVMgYW5kIChwb3NzaWJseSkgNjQtYml0IGludGVnZXJzLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gU3BlY2lhbCBjYXNlIEJZVEVTIC0gd2UgbmVlZCB0byBjb21wYXJlIGVhY2ggYnl0ZSBpbmRpdmlkdWFsbHlcbiAgICBpZiAodHlwZSA9PSBTY2FsYXJUeXBlLkJZVEVTKSB7XG4gICAgICAgIGlmICghKGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB8fCAhKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBTcGVjaWFsIGNhc2UgNjQtYml0IGludGVnZXJzIC0gd2Ugc3VwcG9ydCBudW1iZXIsIHN0cmluZyBhbmQgYmlnaW50IHJlcHJlc2VudGF0aW9uLlxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UNjQ6XG4gICAgICAgICAgICAvLyBMb29zZSBjb21wYXJpc29uIHdpbGwgbWF0Y2ggYmV0d2VlbiAwbiwgMCBhbmQgXCIwXCIuXG4gICAgICAgICAgICByZXR1cm4gYSA9PSBiO1xuICAgIH1cbiAgICAvLyBBbnl0aGluZyB0aGF0IGhhc24ndCBiZWVuIGNhdWdodCBieSBzdHJpY3QgY29tcGFyaXNvbiBvciBzcGVjaWFsIGNhc2VkXG4gICAgLy8gQllURVMgYW5kIDY0LWJpdCBpbnRlZ2VycyBpcyBub3QgZXF1YWwuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSB6ZXJvIHZhbHVlIGZvciB0aGUgZ2l2ZW4gc2NhbGFyIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsYXJaZXJvVmFsdWUodHlwZSwgbG9uZ0FzU3RyaW5nKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5ET1VCTEU6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiAwLjA7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiAobG9uZ0FzU3RyaW5nID8gXCIwXCIgOiBwcm90b0ludDY0Lnplcm8pO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBIYW5kbGVzIElOVDMyLCBVSU5UMzIsIFNJTlQzMiwgRklYRUQzMiwgU0ZJWEVEMzIuXG4gICAgICAgICAgICAvLyBXZSBkbyBub3QgdXNlIGluZGl2aWR1YWwgY2FzZXMgdG8gc2F2ZSBhIGZldyBieXRlcyBjb2RlIHNpemUuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBmb3IgYSB6ZXJvLXZhbHVlLiBGb3IgZXhhbXBsZSwgYW4gaW50ZWdlciBoYXMgdGhlIHplcm8tdmFsdWUgYDBgLFxuICogYSBib29sZWFuIGlzIGBmYWxzZWAsIGEgc3RyaW5nIGlzIGBcIlwiYCwgYW5kIGJ5dGVzIGlzIGFuIGVtcHR5IFVpbnQ4QXJyYXkuXG4gKlxuICogSW4gcHJvdG8zLCB6ZXJvLXZhbHVlcyBhcmUgbm90IHdyaXR0ZW4gdG8gdGhlIHdpcmUsIHVubGVzcyB0aGUgZmllbGQgaXNcbiAqIG9wdGlvbmFsIG9yIHJlcGVhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY2FsYXJaZXJvVmFsdWUodHlwZSwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBcIlwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmICF2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09IDA7IC8vIExvb3NlIGNvbXBhcmlzb24gbWF0Y2hlcyAwbiwgMCBhbmQgXCIwXCJcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGlzU2NhbGFyWmVyb1ZhbHVlLCBzY2FsYXJaZXJvVmFsdWUgfSBmcm9tIFwiLi9zY2FsYXIuanNcIjtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZS5JTVBMSUNJVDogY29uc3QgJG5hbWU6IEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZS4kbG9jYWxOYW1lID0gJG51bWJlcjtcbmNvbnN0IElNUExJQ0lUID0gMjtcbmV4cG9ydCBjb25zdCB1bnNhZmVMb2NhbCA9IFN5bWJvbC5mb3IoXCJyZWZsZWN0IHVuc2FmZSBsb2NhbFwiKTtcbi8qKlxuICogUmV0dXJuIHRoZSBzZWxlY3RlZCBmaWVsZCBvZiBhIG9uZW9mIGdyb3VwLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVPbmVvZkNhc2UoXG4vLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vRXhwbGljaXRBbnk6IGBhbnlgIGlzIHRoZSBiZXN0IGNob2ljZSBmb3IgZHluYW1pYyBhY2Nlc3NcbnRhcmdldCwgb25lb2YpIHtcbiAgICBjb25zdCBjID0gdGFyZ2V0W29uZW9mLmxvY2FsTmFtZV0uY2FzZTtcbiAgICBpZiAoYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICByZXR1cm4gb25lb2YuZmllbGRzLmZpbmQoKGYpID0+IGYubG9jYWxOYW1lID09PSBjKTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBmaWVsZCBpcyBzZXQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZUlzU2V0KFxuLy8gYmlvbWUtaWdub3JlIGxpbnQvc3VzcGljaW91cy9ub0V4cGxpY2l0QW55OiBgYW55YCBpcyB0aGUgYmVzdCBjaG9pY2UgZm9yIGR5bmFtaWMgYWNjZXNzXG50YXJnZXQsIGZpZWxkKSB7XG4gICAgY29uc3QgbmFtZSA9IGZpZWxkLmxvY2FsTmFtZTtcbiAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtmaWVsZC5vbmVvZi5sb2NhbE5hbWVdLmNhc2UgPT09IG5hbWU7XG4gICAgfVxuICAgIGlmIChmaWVsZC5wcmVzZW5jZSAhPSBJTVBMSUNJVCkge1xuICAgICAgICAvLyBGaWVsZHMgd2l0aCBleHBsaWNpdCBwcmVzZW5jZSBoYXZlIHByb3BlcnRpZXMgb24gdGhlIHByb3RvdHlwZSBjaGFpblxuICAgICAgICAvLyBmb3IgZGVmYXVsdCAvIHplcm8gdmFsdWVzIChleGNlcHQgZm9yIHByb3RvMykuXG4gICAgICAgIHJldHVybiAodGFyZ2V0W25hbWVdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIG5hbWUpKTtcbiAgICB9XG4gICAgc3dpdGNoIChmaWVsZC5maWVsZEtpbmQpIHtcbiAgICAgICAgY2FzZSBcImxpc3RcIjpcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV0ubGVuZ3RoID4gMDtcbiAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldFtuYW1lXSkubGVuZ3RoID4gMDtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgcmV0dXJuICFpc1NjYWxhclplcm9WYWx1ZShmaWVsZC5zY2FsYXIsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdICE9PSBmaWVsZC5lbnVtLnZhbHVlc1swXS5udW1iZXI7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UgZmllbGQgd2l0aCBpbXBsaWNpdCBwcmVzZW5jZVwiKTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBmaWVsZCBpcyBzZXQsIGJ1dCBvbmx5IGZvciBzaW5ndWxhciBmaWVsZHMgd2l0aCBleHBsaWNpdFxuICogcHJlc2VuY2UgKHByb3RvMikuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZUlzU2V0RXhwbGljaXQodGFyZ2V0LCBsb2NhbE5hbWUpIHtcbiAgICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGxvY2FsTmFtZSkgJiZcbiAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV0gIT09IHVuZGVmaW5lZCk7XG59XG4vKipcbiAqIFJldHVybiBhIGZpZWxkIHZhbHVlLCByZXNwZWN0aW5nIG9uZW9mIGdyb3Vwcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlR2V0KHRhcmdldCwgZmllbGQpIHtcbiAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgY29uc3Qgb25lb2YgPSB0YXJnZXRbZmllbGQub25lb2YubG9jYWxOYW1lXTtcbiAgICAgICAgaWYgKG9uZW9mLmNhc2UgPT09IGZpZWxkLmxvY2FsTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9uZW9mLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRbZmllbGQubG9jYWxOYW1lXTtcbn1cbi8qKlxuICogU2V0IGEgZmllbGQgdmFsdWUsIHJlc3BlY3Rpbmcgb25lb2YgZ3JvdXBzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTZXQodGFyZ2V0LCBmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgdGFyZ2V0W2ZpZWxkLm9uZW9mLmxvY2FsTmFtZV0gPSB7XG4gICAgICAgICAgICBjYXNlOiBmaWVsZC5sb2NhbE5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YXJnZXRbZmllbGQubG9jYWxOYW1lXSA9IHZhbHVlO1xuICAgIH1cbn1cbi8qKlxuICogUmVzZXRzIHRoZSBmaWVsZCwgc28gdGhhdCB1bnNhZmVJc1NldCgpIHdpbGwgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVDbGVhcihcbi8vIGJpb21lLWlnbm9yZSBsaW50L3N1c3BpY2lvdXMvbm9FeHBsaWNpdEFueTogYGFueWAgaXMgdGhlIGJlc3QgY2hvaWNlIGZvciBkeW5hbWljIGFjY2Vzc1xudGFyZ2V0LCBmaWVsZCkge1xuICAgIGNvbnN0IG5hbWUgPSBmaWVsZC5sb2NhbE5hbWU7XG4gICAgaWYgKGZpZWxkLm9uZW9mKSB7XG4gICAgICAgIGNvbnN0IG9uZW9mTG9jYWxOYW1lID0gZmllbGQub25lb2YubG9jYWxOYW1lO1xuICAgICAgICBpZiAodGFyZ2V0W29uZW9mTG9jYWxOYW1lXS5jYXNlID09PSBuYW1lKSB7XG4gICAgICAgICAgICB0YXJnZXRbb25lb2ZMb2NhbE5hbWVdID0geyBjYXNlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChmaWVsZC5wcmVzZW5jZSAhPSBJTVBMSUNJVCkge1xuICAgICAgICAvLyBGaWVsZHMgd2l0aCBleHBsaWNpdCBwcmVzZW5jZSBoYXZlIHByb3BlcnRpZXMgb24gdGhlIHByb3RvdHlwZSBjaGFpblxuICAgICAgICAvLyBmb3IgZGVmYXVsdCAvIHplcm8gdmFsdWVzIChleGNlcHQgZm9yIHByb3RvMykuIEJ5IGRlbGV0aW5nIHRoZWlyIG93blxuICAgICAgICAvLyBwcm9wZXJ0eSwgdGhlIGZpZWxkIGlzIHJlc2V0LlxuICAgICAgICBkZWxldGUgdGFyZ2V0W25hbWVdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZC5maWVsZEtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSB7fTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJsaXN0XCI6XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGZpZWxkLmVudW0udmFsdWVzWzBdLm51bWJlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBzY2FsYXJaZXJvVmFsdWUoZmllbGQuc2NhbGFyLCBmaWVsZC5sb25nQXNTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBwcm90b0NhbWVsQ2FzZSB9IGZyb20gXCIuLi9yZWZsZWN0L25hbWVzLmpzXCI7XG5pbXBvcnQgeyB1bnNhZmVJc1NldEV4cGxpY2l0IH0gZnJvbSBcIi4uL3JlZmxlY3QvdW5zYWZlLmpzXCI7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlSnNvbk5hbWVzKG1lc3NhZ2UpIHtcbiAgICBmb3IgKGNvbnN0IGYgb2YgbWVzc2FnZS5maWVsZCkge1xuICAgICAgICBpZiAoIXVuc2FmZUlzU2V0RXhwbGljaXQoZiwgXCJqc29uTmFtZVwiKSkge1xuICAgICAgICAgICAgZi5qc29uTmFtZSA9IHByb3RvQ2FtZWxDYXNlKGYubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWVzc2FnZS5uZXN0ZWRUeXBlLmZvckVhY2gocmVzdG9yZUpzb25OYW1lcyk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vZGVzY3JpcHRvcnMuanNcIjtcbmltcG9ydCB7IHByb3RvSW50NjQgfSBmcm9tIFwiLi4vcHJvdG8taW50NjQuanNcIjtcbi8qKlxuICogUGFyc2UgYW4gZW51bSB2YWx1ZSBmcm9tIHRoZSBQcm90b2J1ZiB0ZXh0IGZvcm1hdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUZXh0Rm9ybWF0RW51bVZhbHVlKGRlc2NFbnVtLCB2YWx1ZSkge1xuICAgIGNvbnN0IGVudW1WYWx1ZSA9IGRlc2NFbnVtLnZhbHVlcy5maW5kKCh2KSA9PiB2Lm5hbWUgPT09IHZhbHVlKTtcbiAgICBpZiAoIWVudW1WYWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBwYXJzZSAke2Rlc2NFbnVtfSBkZWZhdWx0IHZhbHVlOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICByZXR1cm4gZW51bVZhbHVlLm51bWJlcjtcbn1cbi8qKlxuICogUGFyc2UgYSBzY2FsYXIgdmFsdWUgZnJvbSB0aGUgUHJvdG9idWYgdGV4dCBmb3JtYXQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGV4dEZvcm1hdFNjYWxhclZhbHVlKHR5cGUsIHZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CWVRFUzoge1xuICAgICAgICAgICAgY29uc3QgdSA9IHVuZXNjYXBlQnl0ZXNEZWZhdWx0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcGFyc2UgJHtTY2FsYXJUeXBlW3R5cGVdfSBkZWZhdWx0IHZhbHVlOiAke3ZhbHVlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcHJvdG9JbnQ2NC5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UNjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIHByb3RvSW50NjQudVBhcnNlKHZhbHVlKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkRPVUJMRTpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZMT0FUOlxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpbmZcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiLWluZlwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJuYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5OYU47XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbn1cbi8qKlxuICogUGFyc2VzIGEgdGV4dC1lbmNvZGVkIGRlZmF1bHQgdmFsdWUgKHByb3RvMikgb2YgYSBCWVRFUyBmaWVsZC5cbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGVCeXRlc0RlZmF1bHRWYWx1ZShzdHIpIHtcbiAgICBjb25zdCBiID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRhaWw6IHN0cixcbiAgICAgICAgYzogXCJcIixcbiAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhaWwubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmMgPSB0aGlzLnRhaWxbMF07XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSB0aGlzLnRhaWwuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHRha2Uobikge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFpbC5sZW5ndGggPj0gbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLnRhaWwuc3Vic3RyaW5nKDAsIG4pO1xuICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbC5zdWJzdHJpbmcobik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB3aGlsZSAoaW5wdXQubmV4dCgpKSB7XG4gICAgICAgIHN3aXRjaCAoaW5wdXQuYykge1xuICAgICAgICAgICAgY2FzZSBcIlxcXFxcIjpcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcXFxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnB1c2goaW5wdXQuYy5jaGFyQ29kZUF0KDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKDB4MDgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnB1c2goMHgwYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIucHVzaCgweDBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKDB4MGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnB1c2goMHgwOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIucHVzaCgweDBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiMVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiNFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCI2XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiN1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGlucHV0LmM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGlucHV0LnRha2UoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHBhcnNlSW50KHMgKyB0LCA4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpbnB1dC5jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpbnB1dC50YWtlKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBwYXJzZUludChzICsgdCwgMTYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGlucHV0LmM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGlucHV0LnRha2UoNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHBhcnNlSW50KHMgKyB0LCAxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhjaHVuay5idWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuc2V0SW50MzIoMCwgbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKGNodW5rWzBdLCBjaHVua1sxXSwgY2h1bmtbMl0sIGNodW5rWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJVXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gaW5wdXQuYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaW5wdXQudGFrZSg4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YyA9IHByb3RvSW50NjQudUVuYyhzICsgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGNodW5rLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZXRJbnQzMigwLCB0Yy5sbywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZXRJbnQzMig0LCB0Yy5oaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKGNodW5rWzBdLCBjaHVua1sxXSwgY2h1bmtbMl0sIGNodW5rWzNdLCBjaHVua1s0XSwgY2h1bmtbNV0sIGNodW5rWzZdLCBjaHVua1s3XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGIucHVzaChpbnB1dC5jLmNoYXJDb2RlQXQoMCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShiKTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHR5cGVzIC0gZW51bWVyYXRpb25zLCBleHRlbnNpb25zLCBzZXJ2aWNlcywgbWVzc2FnZXMgLVxuICogYW5kIGVudW1lcmF0aW9ucywgZXh0ZW5zaW9ucyBhbmQgbWVzc2FnZXMgbmVzdGVkIGluIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24qIG5lc3RlZFR5cGVzKGRlc2MpIHtcbiAgICBzd2l0Y2ggKGRlc2Mua2luZCkge1xuICAgICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGRlc2MubWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIHlpZWxkKiBuZXN0ZWRUeXBlcyhtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkKiBkZXNjLmVudW1zO1xuICAgICAgICAgICAgeWllbGQqIGRlc2Muc2VydmljZXM7XG4gICAgICAgICAgICB5aWVsZCogZGVzYy5leHRlbnNpb25zO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgZGVzYy5uZXN0ZWRNZXNzYWdlcykge1xuICAgICAgICAgICAgICAgIHlpZWxkIG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgeWllbGQqIG5lc3RlZFR5cGVzKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQqIGRlc2MubmVzdGVkRW51bXM7XG4gICAgICAgICAgICB5aWVsZCogZGVzYy5uZXN0ZWRFeHRlbnNpb25zO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgdHlwZXMgcmVmZXJlbmNlZCBieSBmaWVsZHMgb2YgdGhlIGdpdmVuIG1lc3NhZ2UuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogYGBgcHJvdG9cbiAqIHN5bnRheD1cInByb3RvM1wiO1xuICpcbiAqIG1lc3NhZ2UgRXhhbXBsZSB7XG4gKiAgIE1zZyBzaW5ndWxhciA9IDE7XG4gKiAgIHJlcGVhdGVkIExldmVsIGxpc3QgPSAyO1xuICogfVxuICpcbiAqIG1lc3NhZ2UgTXNnIHt9XG4gKlxuICogZW51bSBMZXZlbCB7XG4gKiAgIExFVkVMX1VOU1BFQ0lGSUVEID0gMDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBtZXNzYWdlIEV4YW1wbGUgcmVmZXJlbmNlcyB0aGUgbWVzc2FnZSBNc2csIGFuZCB0aGUgZW51bSBMZXZlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZWRUeXBlcyhkZXNjTWVzc2FnZSkge1xuICAgIHJldHVybiB1c2VkVHlwZXNJbnRlcm5hbChkZXNjTWVzc2FnZSwgbmV3IFNldCgpKTtcbn1cbmZ1bmN0aW9uKiB1c2VkVHlwZXNJbnRlcm5hbChkZXNjTWVzc2FnZSwgc2Vlbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBkZXNjTWVzc2FnZS5maWVsZHMpIHtcbiAgICAgICAgY29uc3QgcmVmID0gKF9iID0gKF9hID0gZmllbGQuZW51bSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmllbGQubWVzc2FnZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIXJlZiB8fCBzZWVuLmhhcyhyZWYudHlwZU5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzZWVuLmFkZChyZWYudHlwZU5hbWUpO1xuICAgICAgICB5aWVsZCByZWY7XG4gICAgICAgIGlmIChyZWYua2luZCA9PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgICAgeWllbGQqIHVzZWRUeXBlc0ludGVybmFsKHJlZiwgc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFuY2VzdG9ycyBvZiBhIGdpdmVuIFByb3RvYnVmIGVsZW1lbnQsIHVwIHRvIHRoZSBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyZW50VHlwZXMoZGVzYykge1xuICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICB3aGlsZSAoZGVzYy5raW5kICE9PSBcImZpbGVcIikge1xuICAgICAgICBjb25zdCBwID0gcGFyZW50KGRlc2MpO1xuICAgICAgICBkZXNjID0gcDtcbiAgICAgICAgcGFyZW50cy5wdXNoKHApO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50cztcbn1cbmZ1bmN0aW9uIHBhcmVudChkZXNjKSB7XG4gICAgdmFyIF9hO1xuICAgIHN3aXRjaCAoZGVzYy5raW5kKSB7XG4gICAgICAgIGNhc2UgXCJlbnVtX3ZhbHVlXCI6XG4gICAgICAgIGNhc2UgXCJmaWVsZFwiOlxuICAgICAgICBjYXNlIFwib25lb2ZcIjpcbiAgICAgICAgY2FzZSBcInJwY1wiOlxuICAgICAgICAgICAgcmV0dXJuIGRlc2MucGFyZW50O1xuICAgICAgICBjYXNlIFwic2VydmljZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGRlc2MuZmlsZTtcbiAgICAgICAgY2FzZSBcImV4dGVuc2lvblwiOlxuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgcmV0dXJuIChfYSA9IGRlc2MucGFyZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZXNjLmZpbGU7XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBTY2FsYXJUeXBlLCB9IGZyb20gXCIuL2Rlc2NyaXB0b3JzLmpzXCI7XG5pbXBvcnQgeyBwYXJzZVRleHRGb3JtYXRFbnVtVmFsdWUsIHBhcnNlVGV4dEZvcm1hdFNjYWxhclZhbHVlLCB9IGZyb20gXCIuL3dpcmUvdGV4dC1mb3JtYXQuanNcIjtcbmltcG9ydCB7IG5lc3RlZFR5cGVzIH0gZnJvbSBcIi4vcmVmbGVjdC9uZXN0ZWQtdHlwZXMuanNcIjtcbmltcG9ydCB7IHVuc2FmZUlzU2V0RXhwbGljaXQgfSBmcm9tIFwiLi9yZWZsZWN0L3Vuc2FmZS5qc1wiO1xuaW1wb3J0IHsgcHJvdG9DYW1lbENhc2UsIHNhZmVPYmplY3RQcm9wZXJ0eSB9IGZyb20gXCIuL3JlZmxlY3QvbmFtZXMuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgcmVnaXN0cnkgZnJvbSB0aGUgZ2l2ZW4gaW5wdXRzLlxuICpcbiAqIEFuIGlucHV0IGNhbiBiZTpcbiAqIC0gQW55IG1lc3NhZ2UsIGVudW0sIHNlcnZpY2UsIG9yIGV4dGVuc2lvbiBkZXNjcmlwdG9yLCB3aGljaCBhZGRzIGp1c3QgdGhlXG4gKiAgIGRlc2NyaXB0b3IgZm9yIHRoaXMgdHlwZS5cbiAqIC0gQSBmaWxlIGRlc2NyaXB0b3IsIHdoaWNoIGFkZHMgYWxsIHR5cGVkIGRlZmluZWQgaW4gdGhpcyBmaWxlLlxuICogLSBBIHJlZ2lzdHJ5LCB3aGljaCBhZGRzIGFsbCB0eXBlcyBmcm9tIHRoZSByZWdpc3RyeS5cbiAqXG4gKiBGb3IgZHVwbGljYXRlIGRlc2NyaXB0b3JzIChzYW1lIHR5cGUgbmFtZSksIHRoZSBvbmUgZ2l2ZW4gbGFzdCB3aW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVnaXN0cnkoLi4uaW5wdXQpIHtcbiAgICByZXR1cm4gaW5pdEJhc2VSZWdpc3RyeShpbnB1dCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIHJlZ2lzdHJ5IHRoYXQgYWxsb3dzIGFkZGluZyBhbmQgcmVtb3ZpbmcgZGVzY3JpcHRvcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNdXRhYmxlUmVnaXN0cnkoLi4uaW5wdXQpIHtcbiAgICBjb25zdCByZWcgPSBpbml0QmFzZVJlZ2lzdHJ5KGlucHV0KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZWcpLCB7IHJlbW92ZShkZXNjKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoZGVzYy5raW5kID09IFwiZXh0ZW5zaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSByZWcuZXh0ZW5kZWVzLmdldChkZXNjLmV4dGVuZGVlLnR5cGVOYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGV0ZShkZXNjLm51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWcudHlwZXMuZGVsZXRlKGRlc2MudHlwZU5hbWUpO1xuICAgICAgICB9IH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbGVSZWdpc3RyeSguLi5hcmdzKSB7XG4gICAgY29uc3QgcmVnaXN0cnkgPSBjcmVhdGVCYXNlUmVnaXN0cnkoKTtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gICAgaWYgKFwiJHR5cGVOYW1lXCIgaW4gYXJnc1swXSAmJlxuICAgICAgICBhcmdzWzBdLiR0eXBlTmFtZSA9PSBcImdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclNldFwiKSB7XG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBhcmdzWzBdLmZpbGUpIHtcbiAgICAgICAgICAgIGFkZEZpbGUoZmlsZSwgcmVnaXN0cnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gICAgaWYgKFwiJHR5cGVOYW1lXCIgaW4gYXJnc1swXSkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGFyZ3NbMF07XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSBhcmdzWzFdO1xuICAgICAgICBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICAgICAgICBmdW5jdGlvbiByZWN1cnNlRGVwcyhmaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkZXBzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3RvRmlsZU5hbWUgb2YgZmlsZS5kZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5LmdldEZpbGUocHJvdG9GaWxlTmFtZSkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2Vlbi5oYXMocHJvdG9GaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcCA9IHJlc29sdmUocHJvdG9GaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFkZXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcmVzb2x2ZSAke3Byb3RvRmlsZU5hbWV9LCBpbXBvcnRlZCBieSAke2ZpbGUubmFtZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFwia2luZFwiIGluIGRlcCkge1xuICAgICAgICAgICAgICAgICAgICByZWdpc3RyeS5hZGRGaWxlKGRlcCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbi5hZGQoZGVwLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVwcy5jb25jYXQoLi4uZGVwcy5tYXAocmVjdXJzZURlcHMpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgW2lucHV0LCAuLi5yZWN1cnNlRGVwcyhpbnB1dCldLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgYWRkRmlsZShmaWxlLCByZWdpc3RyeSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgZmlsZVJlZyBvZiBhcmdzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZVJlZy5maWxlcykge1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZEZpbGUoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZ2lzdHJ5O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlUmVnaXN0cnkoKSB7XG4gICAgY29uc3QgdHlwZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZXh0ZW5kZWVzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGZpbGVzID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwicmVnaXN0cnlcIixcbiAgICAgICAgdHlwZXMsXG4gICAgICAgIGV4dGVuZGVlcyxcbiAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZXMudmFsdWVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBmaWxlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlcy52YWx1ZXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkRmlsZShmaWxlLCBza2lwVHlwZXMsIHdpdGhEZXBzKSB7XG4gICAgICAgICAgICBmaWxlcy5zZXQoZmlsZS5wcm90by5uYW1lLCBmaWxlKTtcbiAgICAgICAgICAgIGlmICghc2tpcFR5cGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIG5lc3RlZFR5cGVzKGZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKHR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aXRoRGVwcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiBmaWxlLmRlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZpbGUoZiwgc2tpcFR5cGVzLCB3aXRoRGVwcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGQoZGVzYykge1xuICAgICAgICAgICAgaWYgKGRlc2Mua2luZCA9PSBcImV4dGVuc2lvblwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IG51bWJlclRvRXh0ID0gZXh0ZW5kZWVzLmdldChkZXNjLmV4dGVuZGVlLnR5cGVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoIW51bWJlclRvRXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZGVlcy5zZXQoZGVzYy5leHRlbmRlZS50eXBlTmFtZSwgXG4gICAgICAgICAgICAgICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3N1c3BpY2lvdXMvbm9Bc3NpZ25JbkV4cHJlc3Npb25zOiBub1xuICAgICAgICAgICAgICAgICAgICAobnVtYmVyVG9FeHQgPSBuZXcgTWFwKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbnVtYmVyVG9FeHQuc2V0KGRlc2MubnVtYmVyLCBkZXNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGVzLnNldChkZXNjLnR5cGVOYW1lLCBkZXNjKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KHR5cGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZXMuZ2V0KHR5cGVOYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RmlsZShmaWxlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVzLmdldChmaWxlTmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE1lc3NhZ2UodHlwZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0eXBlcy5nZXQodHlwZU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuICh0ID09PSBudWxsIHx8IHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHQua2luZCkgPT0gXCJtZXNzYWdlXCIgPyB0IDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBnZXRFbnVtKHR5cGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdHlwZXMuZ2V0KHR5cGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAodCA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0LmtpbmQpID09IFwiZW51bVwiID8gdCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RXh0ZW5zaW9uKHR5cGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdHlwZXMuZ2V0KHR5cGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAodCA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0LmtpbmQpID09IFwiZXh0ZW5zaW9uXCIgPyB0IDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBnZXRFeHRlbnNpb25Gb3IoZXh0ZW5kZWUsIG5vKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gZXh0ZW5kZWVzLmdldChleHRlbmRlZS50eXBlTmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXQobm8pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTZXJ2aWNlKHR5cGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdHlwZXMuZ2V0KHR5cGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAodCA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0LmtpbmQpID09IFwic2VydmljZVwiID8gdCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpbml0QmFzZVJlZ2lzdHJ5KGlucHV0cykge1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gY3JlYXRlQmFzZVJlZ2lzdHJ5KCk7XG4gICAgZm9yIChjb25zdCBpbnB1dCBvZiBpbnB1dHMpIHtcbiAgICAgICAgc3dpdGNoIChpbnB1dC5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwicmVnaXN0cnlcIjpcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cnkuYWRkKG4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgICAgICAgICAgcmVnaXN0cnkuYWRkRmlsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZChpbnB1dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZ2lzdHJ5O1xufVxuLy8gYm9vdHN0cmFwLWluamVjdCBnb29nbGUucHJvdG9idWYuRWRpdGlvbi5FRElUSU9OX1BST1RPMjogY29uc3QgJG5hbWU6IEVkaXRpb24uJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBFRElUSU9OX1BST1RPMiA9IDk5ODtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkVkaXRpb24uRURJVElPTl9QUk9UTzM6IGNvbnN0ICRuYW1lOiBFZGl0aW9uLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgRURJVElPTl9QUk9UTzMgPSA5OTk7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlLlRZUEVfU1RSSU5HOiBjb25zdCAkbmFtZTogRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZS4kbG9jYWxOYW1lID0gJG51bWJlcjtcbmNvbnN0IFRZUEVfU1RSSU5HID0gOTtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGUuVFlQRV9HUk9VUDogY29uc3QgJG5hbWU6IEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBUWVBFX0dST1VQID0gMTA7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlLlRZUEVfTUVTU0FHRTogY29uc3QgJG5hbWU6IEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBUWVBFX01FU1NBR0UgPSAxMTtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGUuVFlQRV9CWVRFUzogY29uc3QgJG5hbWU6IEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBUWVBFX0JZVEVTID0gMTI7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlLlRZUEVfRU5VTTogY29uc3QgJG5hbWU6IEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBUWVBFX0VOVU0gPSAxNDtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsLkxBQkVMX1JFUEVBVEVEOiBjb25zdCAkbmFtZTogRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBMQUJFTF9SRVBFQVRFRCA9IDM7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbC5MQUJFTF9SRVFVSVJFRDogY29uc3QgJG5hbWU6IEZpZWxkRGVzY3JpcHRvclByb3RvX0xhYmVsLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgTEFCRUxfUkVRVUlSRUQgPSAyO1xuLy8gYm9vdHN0cmFwLWluamVjdCBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZS5KU19TVFJJTkc6IGNvbnN0ICRuYW1lOiBGaWVsZE9wdGlvbnNfSlNUeXBlLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgSlNfU1RSSU5HID0gMTtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbC5JREVNUE9URU5DWV9VTktOT1dOOiBjb25zdCAkbmFtZTogTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgSURFTVBPVEVOQ1lfVU5LTk9XTiA9IDA7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2UuRVhQTElDSVQ6IGNvbnN0ICRuYW1lOiBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBFWFBMSUNJVCA9IDE7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2UuSU1QTElDSVQ6IGNvbnN0ICRuYW1lOiBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBJTVBMSUNJVCA9IDI7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2UuTEVHQUNZX1JFUVVJUkVEOiBjb25zdCAkbmFtZTogRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgTEVHQUNZX1JFUVVJUkVEID0gMztcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuUmVwZWF0ZWRGaWVsZEVuY29kaW5nLlBBQ0tFRDogY29uc3QgJG5hbWU6IEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgUEFDS0VEID0gMTtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuTWVzc2FnZUVuY29kaW5nLkRFTElNSVRFRDogY29uc3QgJG5hbWU6IEZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgREVMSU1JVEVEID0gMjtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRW51bVR5cGUuT1BFTjogY29uc3QgJG5hbWU6IEZlYXR1cmVTZXRfRW51bVR5cGUuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBPUEVOID0gMTtcbi8vIGJpb21lLWlnbm9yZSBmb3JtYXQ6IHdhbnQgdGhpcyB0byByZWFkIHdlbGxcbi8vIGJvb3RzdHJhcC1pbmplY3QgZGVmYXVsdHM6IEVESVRJT05fUFJPVE8yIHRvIEVESVRJT05fMjAyNDogZXhwb3J0IGNvbnN0IG1pbmltdW1FZGl0aW9uOiBTdXBwb3J0ZWRFZGl0aW9uID0gJG1pbmltdW1FZGl0aW9uLCBtYXhpbXVtRWRpdGlvbjogU3VwcG9ydGVkRWRpdGlvbiA9ICRtYXhpbXVtRWRpdGlvbjtcbi8vIGdlbmVyYXRlZCBmcm9tIHByb3RvYyB2MzIuMFxuZXhwb3J0IGNvbnN0IG1pbmltdW1FZGl0aW9uID0gOTk4LCBtYXhpbXVtRWRpdGlvbiA9IDEwMDE7XG5jb25zdCBmZWF0dXJlRGVmYXVsdHMgPSB7XG4gICAgLy8gRURJVElPTl9QUk9UTzJcbiAgICA5OTg6IHtcbiAgICAgICAgZmllbGRQcmVzZW5jZTogMSwgLy8gRVhQTElDSVQsXG4gICAgICAgIGVudW1UeXBlOiAyLCAvLyBDTE9TRUQsXG4gICAgICAgIHJlcGVhdGVkRmllbGRFbmNvZGluZzogMiwgLy8gRVhQQU5ERUQsXG4gICAgICAgIHV0ZjhWYWxpZGF0aW9uOiAzLCAvLyBOT05FLFxuICAgICAgICBtZXNzYWdlRW5jb2Rpbmc6IDEsIC8vIExFTkdUSF9QUkVGSVhFRCxcbiAgICAgICAganNvbkZvcm1hdDogMiwgLy8gTEVHQUNZX0JFU1RfRUZGT1JULFxuICAgICAgICBlbmZvcmNlTmFtaW5nU3R5bGU6IDIsIC8vIFNUWUxFX0xFR0FDWSxcbiAgICAgICAgZGVmYXVsdFN5bWJvbFZpc2liaWxpdHk6IDEsIC8vIEVYUE9SVF9BTEwsXG4gICAgfSxcbiAgICAvLyBFRElUSU9OX1BST1RPM1xuICAgIDk5OToge1xuICAgICAgICBmaWVsZFByZXNlbmNlOiAyLCAvLyBJTVBMSUNJVCxcbiAgICAgICAgZW51bVR5cGU6IDEsIC8vIE9QRU4sXG4gICAgICAgIHJlcGVhdGVkRmllbGRFbmNvZGluZzogMSwgLy8gUEFDS0VELFxuICAgICAgICB1dGY4VmFsaWRhdGlvbjogMiwgLy8gVkVSSUZZLFxuICAgICAgICBtZXNzYWdlRW5jb2Rpbmc6IDEsIC8vIExFTkdUSF9QUkVGSVhFRCxcbiAgICAgICAganNvbkZvcm1hdDogMSwgLy8gQUxMT1csXG4gICAgICAgIGVuZm9yY2VOYW1pbmdTdHlsZTogMiwgLy8gU1RZTEVfTEVHQUNZLFxuICAgICAgICBkZWZhdWx0U3ltYm9sVmlzaWJpbGl0eTogMSwgLy8gRVhQT1JUX0FMTCxcbiAgICB9LFxuICAgIC8vIEVESVRJT05fMjAyM1xuICAgIDEwMDA6IHtcbiAgICAgICAgZmllbGRQcmVzZW5jZTogMSwgLy8gRVhQTElDSVQsXG4gICAgICAgIGVudW1UeXBlOiAxLCAvLyBPUEVOLFxuICAgICAgICByZXBlYXRlZEZpZWxkRW5jb2Rpbmc6IDEsIC8vIFBBQ0tFRCxcbiAgICAgICAgdXRmOFZhbGlkYXRpb246IDIsIC8vIFZFUklGWSxcbiAgICAgICAgbWVzc2FnZUVuY29kaW5nOiAxLCAvLyBMRU5HVEhfUFJFRklYRUQsXG4gICAgICAgIGpzb25Gb3JtYXQ6IDEsIC8vIEFMTE9XLFxuICAgICAgICBlbmZvcmNlTmFtaW5nU3R5bGU6IDIsIC8vIFNUWUxFX0xFR0FDWSxcbiAgICAgICAgZGVmYXVsdFN5bWJvbFZpc2liaWxpdHk6IDEsIC8vIEVYUE9SVF9BTEwsXG4gICAgfSxcbiAgICAvLyBFRElUSU9OXzIwMjRcbiAgICAxMDAxOiB7XG4gICAgICAgIGZpZWxkUHJlc2VuY2U6IDEsIC8vIEVYUExJQ0lULFxuICAgICAgICBlbnVtVHlwZTogMSwgLy8gT1BFTixcbiAgICAgICAgcmVwZWF0ZWRGaWVsZEVuY29kaW5nOiAxLCAvLyBQQUNLRUQsXG4gICAgICAgIHV0ZjhWYWxpZGF0aW9uOiAyLCAvLyBWRVJJRlksXG4gICAgICAgIG1lc3NhZ2VFbmNvZGluZzogMSwgLy8gTEVOR1RIX1BSRUZJWEVELFxuICAgICAgICBqc29uRm9ybWF0OiAxLCAvLyBBTExPVyxcbiAgICAgICAgZW5mb3JjZU5hbWluZ1N0eWxlOiAxLCAvLyBTVFlMRTIwMjQsXG4gICAgICAgIGRlZmF1bHRTeW1ib2xWaXNpYmlsaXR5OiAyLCAvLyBFWFBPUlRfVE9QX0xFVkVMLFxuICAgIH0sXG59O1xuLyoqXG4gKiBDcmVhdGUgYSBkZXNjcmlwdG9yIGZvciBhIGZpbGUsIGFkZCBpdCB0byB0aGUgcmVnaXN0cnkuXG4gKi9cbmZ1bmN0aW9uIGFkZEZpbGUocHJvdG8sIHJlZykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgZmlsZSA9IHtcbiAgICAgICAga2luZDogXCJmaWxlXCIsXG4gICAgICAgIHByb3RvLFxuICAgICAgICBkZXByZWNhdGVkOiAoX2IgPSAoX2EgPSBwcm90by5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVwcmVjYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgIGVkaXRpb246IGdldEZpbGVFZGl0aW9uKHByb3RvKSxcbiAgICAgICAgbmFtZTogcHJvdG8ubmFtZS5yZXBsYWNlKC9cXC5wcm90byQvLCBcIlwiKSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBmaW5kRmlsZURlcGVuZGVuY2llcyhwcm90bywgcmVnKSxcbiAgICAgICAgZW51bXM6IFtdLFxuICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgIGV4dGVuc2lvbnM6IFtdLFxuICAgICAgICBzZXJ2aWNlczogW10sXG4gICAgICAgIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC10ZW1wbGF0ZS1leHByZXNzaW9ucyAtLSB3ZSBhc3NlcnRlZCBhYm92ZVxuICAgICAgICAgICAgcmV0dXJuIGBmaWxlICR7cHJvdG8ubmFtZX1gO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgbWFwRW50cmllc1N0b3JlID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IG1hcEVudHJpZXMgPSB7XG4gICAgICAgIGdldCh0eXBlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcEVudHJpZXNTdG9yZS5nZXQodHlwZU5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQoZGVzYykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgYXNzZXJ0KCgoX2EgPSBkZXNjLnByb3RvLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXBFbnRyeSkgPT09IHRydWUpO1xuICAgICAgICAgICAgbWFwRW50cmllc1N0b3JlLnNldChkZXNjLnR5cGVOYW1lLCBkZXNjKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGZvciAoY29uc3QgZW51bVByb3RvIG9mIHByb3RvLmVudW1UeXBlKSB7XG4gICAgICAgIGFkZEVudW0oZW51bVByb3RvLCBmaWxlLCB1bmRlZmluZWQsIHJlZyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbWVzc2FnZVByb3RvIG9mIHByb3RvLm1lc3NhZ2VUeXBlKSB7XG4gICAgICAgIGFkZE1lc3NhZ2UobWVzc2FnZVByb3RvLCBmaWxlLCB1bmRlZmluZWQsIHJlZywgbWFwRW50cmllcyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VydmljZVByb3RvIG9mIHByb3RvLnNlcnZpY2UpIHtcbiAgICAgICAgYWRkU2VydmljZShzZXJ2aWNlUHJvdG8sIGZpbGUsIHJlZyk7XG4gICAgfVxuICAgIGFkZEV4dGVuc2lvbnMoZmlsZSwgcmVnKTtcbiAgICBmb3IgKGNvbnN0IG1hcEVudHJ5IG9mIG1hcEVudHJpZXNTdG9yZS52YWx1ZXMoKSkge1xuICAgICAgICAvLyB0byBjcmVhdGUgYSBtYXAgZmllbGQsIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBtYXAgZW50cnkncyBmaWVsZHNcbiAgICAgICAgYWRkRmllbGRzKG1hcEVudHJ5LCByZWcsIG1hcEVudHJpZXMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgZmlsZS5tZXNzYWdlcykge1xuICAgICAgICBhZGRGaWVsZHMobWVzc2FnZSwgcmVnLCBtYXBFbnRyaWVzKTtcbiAgICAgICAgYWRkRXh0ZW5zaW9ucyhtZXNzYWdlLCByZWcpO1xuICAgIH1cbiAgICByZWcuYWRkRmlsZShmaWxlLCB0cnVlKTtcbn1cbi8qKlxuICogQ3JlYXRlIGRlc2NyaXB0b3JzIGZvciBleHRlbnNpb25zLCBhbmQgYWRkIHRoZW0gdG8gdGhlIG1lc3NhZ2UgLyBmaWxlLFxuICogYW5kIHRvIG91ciBjYXJ0LlxuICogUmVjdXJzZXMgaW50byBuZXN0ZWQgdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIGFkZEV4dGVuc2lvbnMoZGVzYywgcmVnKSB7XG4gICAgc3dpdGNoIChkZXNjLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcImZpbGVcIjpcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvdG8gb2YgZGVzYy5wcm90by5leHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleHQgPSBuZXdGaWVsZChwcm90bywgZGVzYywgcmVnKTtcbiAgICAgICAgICAgICAgICBkZXNjLmV4dGVuc2lvbnMucHVzaChleHQpO1xuICAgICAgICAgICAgICAgIHJlZy5hZGQoZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm90byBvZiBkZXNjLnByb3RvLmV4dGVuc2lvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4dCA9IG5ld0ZpZWxkKHByb3RvLCBkZXNjLCByZWcpO1xuICAgICAgICAgICAgICAgIGRlc2MubmVzdGVkRXh0ZW5zaW9ucy5wdXNoKGV4dCk7XG4gICAgICAgICAgICAgICAgcmVnLmFkZChleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGRlc2MubmVzdGVkTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICBhZGRFeHRlbnNpb25zKG1lc3NhZ2UsIHJlZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBkZXNjcmlwdG9ycyBmb3IgZmllbGRzIGFuZCBvbmVvZiBncm91cHMsIGFuZCBhZGQgdGhlbSB0byB0aGUgbWVzc2FnZS5cbiAqIFJlY3Vyc2VzIGludG8gbmVzdGVkIHR5cGVzLlxuICovXG5mdW5jdGlvbiBhZGRGaWVsZHMobWVzc2FnZSwgcmVnLCBtYXBFbnRyaWVzKSB7XG4gICAgY29uc3QgYWxsT25lb2ZzID0gbWVzc2FnZS5wcm90by5vbmVvZkRlY2wubWFwKChwcm90bykgPT4gbmV3T25lb2YocHJvdG8sIG1lc3NhZ2UpKTtcbiAgICBjb25zdCBvbmVvZnNTZWVuID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgcHJvdG8gb2YgbWVzc2FnZS5wcm90by5maWVsZCkge1xuICAgICAgICBjb25zdCBvbmVvZiA9IGZpbmRPbmVvZihwcm90bywgYWxsT25lb2ZzKTtcbiAgICAgICAgY29uc3QgZmllbGQgPSBuZXdGaWVsZChwcm90bywgbWVzc2FnZSwgcmVnLCBvbmVvZiwgbWFwRW50cmllcyk7XG4gICAgICAgIG1lc3NhZ2UuZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICBtZXNzYWdlLmZpZWxkW2ZpZWxkLmxvY2FsTmFtZV0gPSBmaWVsZDtcbiAgICAgICAgaWYgKG9uZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UubWVtYmVycy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uZW9mLmZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgIGlmICghb25lb2ZzU2Vlbi5oYXMob25lb2YpKSB7XG4gICAgICAgICAgICAgICAgb25lb2ZzU2Vlbi5hZGQob25lb2YpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVtYmVycy5wdXNoKG9uZW9mKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG9uZW9mIG9mIGFsbE9uZW9mcy5maWx0ZXIoKG8pID0+IG9uZW9mc1NlZW4uaGFzKG8pKSkge1xuICAgICAgICBtZXNzYWdlLm9uZW9mcy5wdXNoKG9uZW9mKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBtZXNzYWdlLm5lc3RlZE1lc3NhZ2VzKSB7XG4gICAgICAgIGFkZEZpZWxkcyhjaGlsZCwgcmVnLCBtYXBFbnRyaWVzKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhIGRlc2NyaXB0b3IgZm9yIGFuIGVudW1lcmF0aW9uLCBhbmQgYWRkIGl0IG91ciBjYXJ0IGFuZCB0byB0aGVcbiAqIHBhcmVudCB0eXBlLCBpZiBhbnkuXG4gKi9cbmZ1bmN0aW9uIGFkZEVudW0ocHJvdG8sIGZpbGUsIHBhcmVudCwgcmVnKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICBjb25zdCBzaGFyZWRQcmVmaXggPSBmaW5kRW51bVNoYXJlZFByZWZpeChwcm90by5uYW1lLCBwcm90by52YWx1ZSk7XG4gICAgY29uc3QgZGVzYyA9IHtcbiAgICAgICAga2luZDogXCJlbnVtXCIsXG4gICAgICAgIHByb3RvLFxuICAgICAgICBkZXByZWNhdGVkOiAoX2IgPSAoX2EgPSBwcm90by5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVwcmVjYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgIGZpbGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgbmFtZTogcHJvdG8ubmFtZSxcbiAgICAgICAgdHlwZU5hbWU6IG1ha2VUeXBlTmFtZShwcm90bywgcGFyZW50LCBmaWxlKSxcbiAgICAgICAgdmFsdWU6IHt9LFxuICAgICAgICB2YWx1ZXM6IFtdLFxuICAgICAgICBzaGFyZWRQcmVmaXgsXG4gICAgICAgIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBlbnVtICR7dGhpcy50eXBlTmFtZX1gO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgZGVzYy5vcGVuID0gaXNFbnVtT3BlbihkZXNjKTtcbiAgICByZWcuYWRkKGRlc2MpO1xuICAgIGZvciAoY29uc3QgcCBvZiBwcm90by52YWx1ZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gcC5uYW1lO1xuICAgICAgICBkZXNjLnZhbHVlcy5wdXNoKFxuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgKGRlc2MudmFsdWVbcC5udW1iZXJdID0ge1xuICAgICAgICAgICAga2luZDogXCJlbnVtX3ZhbHVlXCIsXG4gICAgICAgICAgICBwcm90bzogcCxcbiAgICAgICAgICAgIGRlcHJlY2F0ZWQ6IChfZCA9IChfYyA9IHAub3B0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRlcHJlY2F0ZWQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZhbHNlLFxuICAgICAgICAgICAgcGFyZW50OiBkZXNjLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGxvY2FsTmFtZTogc2FmZU9iamVjdFByb3BlcnR5KHNoYXJlZFByZWZpeCA9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG5hbWVcbiAgICAgICAgICAgICAgICA6IG5hbWUuc3Vic3RyaW5nKHNoYXJlZFByZWZpeC5sZW5ndGgpKSxcbiAgICAgICAgICAgIG51bWJlcjogcC5udW1iZXIsXG4gICAgICAgICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGVudW0gdmFsdWUgJHtkZXNjLnR5cGVOYW1lfS4ke25hbWV9YDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgKChfZSA9IHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5uZXN0ZWRFbnVtcykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogZmlsZS5lbnVtcykucHVzaChkZXNjKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgZGVzY3JpcHRvciBmb3IgYSBtZXNzYWdlLCBpbmNsdWRpbmcgbmVzdGVkIHR5cGVzLCBhbmQgYWRkIGl0IHRvIG91clxuICogY2FydC4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgY3JlYXRlIGRlc2NyaXB0b3JzIGZpZWxkcy5cbiAqL1xuZnVuY3Rpb24gYWRkTWVzc2FnZShwcm90bywgZmlsZSwgcGFyZW50LCByZWcsIG1hcEVudHJpZXMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3QgZGVzYyA9IHtcbiAgICAgICAga2luZDogXCJtZXNzYWdlXCIsXG4gICAgICAgIHByb3RvLFxuICAgICAgICBkZXByZWNhdGVkOiAoX2IgPSAoX2EgPSBwcm90by5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVwcmVjYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgIGZpbGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbmFtZTogcHJvdG8ubmFtZSxcbiAgICAgICAgdHlwZU5hbWU6IG1ha2VUeXBlTmFtZShwcm90bywgcGFyZW50LCBmaWxlKSxcbiAgICAgICAgZmllbGRzOiBbXSxcbiAgICAgICAgZmllbGQ6IHt9LFxuICAgICAgICBvbmVvZnM6IFtdLFxuICAgICAgICBtZW1iZXJzOiBbXSxcbiAgICAgICAgbmVzdGVkRW51bXM6IFtdLFxuICAgICAgICBuZXN0ZWRNZXNzYWdlczogW10sXG4gICAgICAgIG5lc3RlZEV4dGVuc2lvbnM6IFtdLFxuICAgICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBgbWVzc2FnZSAke3RoaXMudHlwZU5hbWV9YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmICgoKF9jID0gcHJvdG8ub3B0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm1hcEVudHJ5KSA9PT0gdHJ1ZSkge1xuICAgICAgICBtYXBFbnRyaWVzLmFkZChkZXNjKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICgoX2QgPSBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQubmVzdGVkTWVzc2FnZXMpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZpbGUubWVzc2FnZXMpLnB1c2goZGVzYyk7XG4gICAgICAgIHJlZy5hZGQoZGVzYyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZW51bVByb3RvIG9mIHByb3RvLmVudW1UeXBlKSB7XG4gICAgICAgIGFkZEVudW0oZW51bVByb3RvLCBmaWxlLCBkZXNjLCByZWcpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2VQcm90byBvZiBwcm90by5uZXN0ZWRUeXBlKSB7XG4gICAgICAgIGFkZE1lc3NhZ2UobWVzc2FnZVByb3RvLCBmaWxlLCBkZXNjLCByZWcsIG1hcEVudHJpZXMpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGEgZGVzY3JpcHRvciBmb3IgYSBzZXJ2aWNlLCBpbmNsdWRpbmcgbWV0aG9kcywgYW5kIGFkZCBpdCB0byBvdXJcbiAqIGNhcnQuXG4gKi9cbmZ1bmN0aW9uIGFkZFNlcnZpY2UocHJvdG8sIGZpbGUsIHJlZykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgZGVzYyA9IHtcbiAgICAgICAga2luZDogXCJzZXJ2aWNlXCIsXG4gICAgICAgIHByb3RvLFxuICAgICAgICBkZXByZWNhdGVkOiAoX2IgPSAoX2EgPSBwcm90by5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVwcmVjYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgIGZpbGUsXG4gICAgICAgIG5hbWU6IHByb3RvLm5hbWUsXG4gICAgICAgIHR5cGVOYW1lOiBtYWtlVHlwZU5hbWUocHJvdG8sIHVuZGVmaW5lZCwgZmlsZSksXG4gICAgICAgIG1ldGhvZHM6IFtdLFxuICAgICAgICBtZXRob2Q6IHt9LFxuICAgICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBgc2VydmljZSAke3RoaXMudHlwZU5hbWV9YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGZpbGUuc2VydmljZXMucHVzaChkZXNjKTtcbiAgICByZWcuYWRkKGRlc2MpO1xuICAgIGZvciAoY29uc3QgbWV0aG9kUHJvdG8gb2YgcHJvdG8ubWV0aG9kKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IG5ld01ldGhvZChtZXRob2RQcm90bywgZGVzYywgcmVnKTtcbiAgICAgICAgZGVzYy5tZXRob2RzLnB1c2gobWV0aG9kKTtcbiAgICAgICAgZGVzYy5tZXRob2RbbWV0aG9kLmxvY2FsTmFtZV0gPSBtZXRob2Q7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBkZXNjcmlwdG9yIGZvciBhIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gbmV3TWV0aG9kKHByb3RvLCBwYXJlbnQsIHJlZykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBsZXQgbWV0aG9kS2luZDtcbiAgICBpZiAocHJvdG8uY2xpZW50U3RyZWFtaW5nICYmIHByb3RvLnNlcnZlclN0cmVhbWluZykge1xuICAgICAgICBtZXRob2RLaW5kID0gXCJiaWRpX3N0cmVhbWluZ1wiO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm90by5jbGllbnRTdHJlYW1pbmcpIHtcbiAgICAgICAgbWV0aG9kS2luZCA9IFwiY2xpZW50X3N0cmVhbWluZ1wiO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm90by5zZXJ2ZXJTdHJlYW1pbmcpIHtcbiAgICAgICAgbWV0aG9kS2luZCA9IFwic2VydmVyX3N0cmVhbWluZ1wiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kS2luZCA9IFwidW5hcnlcIjtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSByZWcuZ2V0TWVzc2FnZSh0cmltTGVhZGluZ0RvdChwcm90by5pbnB1dFR5cGUpKTtcbiAgICBjb25zdCBvdXRwdXQgPSByZWcuZ2V0TWVzc2FnZSh0cmltTGVhZGluZ0RvdChwcm90by5vdXRwdXRUeXBlKSk7XG4gICAgYXNzZXJ0KGlucHV0LCBgaW52YWxpZCBNZXRob2REZXNjcmlwdG9yUHJvdG86IGlucHV0X3R5cGUgJHtwcm90by5pbnB1dFR5cGV9IG5vdCBmb3VuZGApO1xuICAgIGFzc2VydChvdXRwdXQsIGBpbnZhbGlkIE1ldGhvZERlc2NyaXB0b3JQcm90bzogb3V0cHV0X3R5cGUgJHtwcm90by5pbnB1dFR5cGV9IG5vdCBmb3VuZGApO1xuICAgIGNvbnN0IG5hbWUgPSBwcm90by5uYW1lO1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwicnBjXCIsXG4gICAgICAgIHByb3RvLFxuICAgICAgICBkZXByZWNhdGVkOiAoX2IgPSAoX2EgPSBwcm90by5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVwcmVjYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbG9jYWxOYW1lOiBzYWZlT2JqZWN0UHJvcGVydHkobmFtZS5sZW5ndGhcbiAgICAgICAgICAgID8gc2FmZU9iamVjdFByb3BlcnR5KG5hbWVbMF0udG9Mb3dlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpKVxuICAgICAgICAgICAgOiBuYW1lKSxcbiAgICAgICAgbWV0aG9kS2luZCxcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIG91dHB1dCxcbiAgICAgICAgaWRlbXBvdGVuY3k6IChfZCA9IChfYyA9IHByb3RvLm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pZGVtcG90ZW5jeUxldmVsKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBJREVNUE9URU5DWV9VTktOT1dOLFxuICAgICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBgcnBjICR7cGFyZW50LnR5cGVOYW1lfS4ke25hbWV9YDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBkZXNjcmlwdG9yIGZvciBhIG9uZW9mIGdyb3VwLlxuICovXG5mdW5jdGlvbiBuZXdPbmVvZihwcm90bywgcGFyZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogXCJvbmVvZlwiLFxuICAgICAgICBwcm90byxcbiAgICAgICAgZGVwcmVjYXRlZDogZmFsc2UsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgZmllbGRzOiBbXSxcbiAgICAgICAgbmFtZTogcHJvdG8ubmFtZSxcbiAgICAgICAgbG9jYWxOYW1lOiBzYWZlT2JqZWN0UHJvcGVydHkocHJvdG9DYW1lbENhc2UocHJvdG8ubmFtZSkpLFxuICAgICAgICB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBgb25lb2YgJHtwYXJlbnQudHlwZU5hbWV9LiR7dGhpcy5uYW1lfWA7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5ld0ZpZWxkKHByb3RvLCBwYXJlbnRPckZpbGUsIHJlZywgb25lb2YsIG1hcEVudHJpZXMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBpc0V4dGVuc2lvbiA9IG1hcEVudHJpZXMgPT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCBmaWVsZCA9IHtcbiAgICAgICAga2luZDogXCJmaWVsZFwiLFxuICAgICAgICBwcm90byxcbiAgICAgICAgZGVwcmVjYXRlZDogKF9iID0gKF9hID0gcHJvdG8ub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlcHJlY2F0ZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlLFxuICAgICAgICBuYW1lOiBwcm90by5uYW1lLFxuICAgICAgICBudW1iZXI6IHByb3RvLm51bWJlcixcbiAgICAgICAgc2NhbGFyOiB1bmRlZmluZWQsXG4gICAgICAgIG1lc3NhZ2U6IHVuZGVmaW5lZCxcbiAgICAgICAgZW51bTogdW5kZWZpbmVkLFxuICAgICAgICBwcmVzZW5jZTogZ2V0RmllbGRQcmVzZW5jZShwcm90bywgb25lb2YsIGlzRXh0ZW5zaW9uLCBwYXJlbnRPckZpbGUpLFxuICAgICAgICBsaXN0S2luZDogdW5kZWZpbmVkLFxuICAgICAgICBtYXBLaW5kOiB1bmRlZmluZWQsXG4gICAgICAgIG1hcEtleTogdW5kZWZpbmVkLFxuICAgICAgICBkZWxpbWl0ZWRFbmNvZGluZzogdW5kZWZpbmVkLFxuICAgICAgICBwYWNrZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgbG9uZ0FzU3RyaW5nOiBmYWxzZSxcbiAgICAgICAgZ2V0RGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBpZiAoaXNFeHRlbnNpb24pIHtcbiAgICAgICAgLy8gZXh0ZW5zaW9uIGZpZWxkXG4gICAgICAgIGNvbnN0IGZpbGUgPSBwYXJlbnRPckZpbGUua2luZCA9PSBcImZpbGVcIiA/IHBhcmVudE9yRmlsZSA6IHBhcmVudE9yRmlsZS5maWxlO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRPckZpbGUua2luZCA9PSBcImZpbGVcIiA/IHVuZGVmaW5lZCA6IHBhcmVudE9yRmlsZTtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBtYWtlVHlwZU5hbWUocHJvdG8sIHBhcmVudCwgZmlsZSk7XG4gICAgICAgIGZpZWxkLmtpbmQgPSBcImV4dGVuc2lvblwiO1xuICAgICAgICBmaWVsZC5maWxlID0gZmlsZTtcbiAgICAgICAgZmllbGQucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBmaWVsZC5vbmVvZiA9IHVuZGVmaW5lZDtcbiAgICAgICAgZmllbGQudHlwZU5hbWUgPSB0eXBlTmFtZTtcbiAgICAgICAgZmllbGQuanNvbk5hbWUgPSBgWyR7dHlwZU5hbWV9XWA7IC8vIG9wdGlvbiBqc29uX25hbWUgaXMgbm90IGFsbG93ZWQgb24gZXh0ZW5zaW9uIGZpZWxkc1xuICAgICAgICBmaWVsZC50b1N0cmluZyA9ICgpID0+IGBleHRlbnNpb24gJHt0eXBlTmFtZX1gO1xuICAgICAgICBjb25zdCBleHRlbmRlZSA9IHJlZy5nZXRNZXNzYWdlKHRyaW1MZWFkaW5nRG90KHByb3RvLmV4dGVuZGVlKSk7XG4gICAgICAgIGFzc2VydChleHRlbmRlZSwgYGludmFsaWQgRmllbGREZXNjcmlwdG9yUHJvdG86IGV4dGVuZGVlICR7cHJvdG8uZXh0ZW5kZWV9IG5vdCBmb3VuZGApO1xuICAgICAgICBmaWVsZC5leHRlbmRlZSA9IGV4dGVuZGVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gcmVndWxhciBmaWVsZFxuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRPckZpbGU7XG4gICAgICAgIGFzc2VydChwYXJlbnQua2luZCA9PSBcIm1lc3NhZ2VcIik7XG4gICAgICAgIGZpZWxkLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgZmllbGQub25lb2YgPSBvbmVvZjtcbiAgICAgICAgZmllbGQubG9jYWxOYW1lID0gb25lb2ZcbiAgICAgICAgICAgID8gcHJvdG9DYW1lbENhc2UocHJvdG8ubmFtZSlcbiAgICAgICAgICAgIDogc2FmZU9iamVjdFByb3BlcnR5KHByb3RvQ2FtZWxDYXNlKHByb3RvLm5hbWUpKTtcbiAgICAgICAgZmllbGQuanNvbk5hbWUgPSBwcm90by5qc29uTmFtZTtcbiAgICAgICAgZmllbGQudG9TdHJpbmcgPSAoKSA9PiBgZmllbGQgJHtwYXJlbnQudHlwZU5hbWV9LiR7cHJvdG8ubmFtZX1gO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbCA9IHByb3RvLmxhYmVsO1xuICAgIGNvbnN0IHR5cGUgPSBwcm90by50eXBlO1xuICAgIGNvbnN0IGpzdHlwZSA9IChfYyA9IHByb3RvLm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5qc3R5cGU7XG4gICAgaWYgKGxhYmVsID09PSBMQUJFTF9SRVBFQVRFRCkge1xuICAgICAgICAvLyBsaXN0IG9yIG1hcCBmaWVsZFxuICAgICAgICBjb25zdCBtYXBFbnRyeSA9IHR5cGUgPT0gVFlQRV9NRVNTQUdFXG4gICAgICAgICAgICA/IG1hcEVudHJpZXMgPT09IG51bGwgfHwgbWFwRW50cmllcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWFwRW50cmllcy5nZXQodHJpbUxlYWRpbmdEb3QocHJvdG8udHlwZU5hbWUpKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChtYXBFbnRyeSkge1xuICAgICAgICAgICAgLy8gbWFwIGZpZWxkXG4gICAgICAgICAgICBmaWVsZC5maWVsZEtpbmQgPSBcIm1hcFwiO1xuICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBmaW5kTWFwRW50cnlGaWVsZHMobWFwRW50cnkpO1xuICAgICAgICAgICAgZmllbGQubWFwS2V5ID0ga2V5LnNjYWxhcjtcbiAgICAgICAgICAgIGZpZWxkLm1hcEtpbmQgPSB2YWx1ZS5maWVsZEtpbmQ7XG4gICAgICAgICAgICBmaWVsZC5tZXNzYWdlID0gdmFsdWUubWVzc2FnZTtcbiAgICAgICAgICAgIGZpZWxkLmRlbGltaXRlZEVuY29kaW5nID0gZmFsc2U7IC8vIG1hcCBmaWVsZHMgYXJlIGFsd2F5cyBMRU5HVEhfUFJFRklYRURcbiAgICAgICAgICAgIGZpZWxkLmVudW0gPSB2YWx1ZS5lbnVtO1xuICAgICAgICAgICAgZmllbGQuc2NhbGFyID0gdmFsdWUuc2NhbGFyO1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxpc3QgZmllbGRcbiAgICAgICAgZmllbGQuZmllbGRLaW5kID0gXCJsaXN0XCI7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUWVBFX01FU1NBR0U6XG4gICAgICAgICAgICBjYXNlIFRZUEVfR1JPVVA6XG4gICAgICAgICAgICAgICAgZmllbGQubGlzdEtpbmQgPSBcIm1lc3NhZ2VcIjtcbiAgICAgICAgICAgICAgICBmaWVsZC5tZXNzYWdlID0gcmVnLmdldE1lc3NhZ2UodHJpbUxlYWRpbmdEb3QocHJvdG8udHlwZU5hbWUpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZmllbGQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZmllbGQuZGVsaW1pdGVkRW5jb2RpbmcgPSBpc0RlbGltaXRlZEVuY29kaW5nKHByb3RvLCBwYXJlbnRPckZpbGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUWVBFX0VOVU06XG4gICAgICAgICAgICAgICAgZmllbGQubGlzdEtpbmQgPSBcImVudW1cIjtcbiAgICAgICAgICAgICAgICBmaWVsZC5lbnVtID0gcmVnLmdldEVudW0odHJpbUxlYWRpbmdEb3QocHJvdG8udHlwZU5hbWUpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZmllbGQuZW51bSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGZpZWxkLmxpc3RLaW5kID0gXCJzY2FsYXJcIjtcbiAgICAgICAgICAgICAgICBmaWVsZC5zY2FsYXIgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGZpZWxkLmxvbmdBc1N0cmluZyA9IGpzdHlwZSA9PSBKU19TVFJJTkc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGQucGFja2VkID0gaXNQYWNrZWRGaWVsZChwcm90bywgcGFyZW50T3JGaWxlKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH1cbiAgICAvLyBzaW5ndWxhclxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFRZUEVfTUVTU0FHRTpcbiAgICAgICAgY2FzZSBUWVBFX0dST1VQOlxuICAgICAgICAgICAgZmllbGQuZmllbGRLaW5kID0gXCJtZXNzYWdlXCI7XG4gICAgICAgICAgICBmaWVsZC5tZXNzYWdlID0gcmVnLmdldE1lc3NhZ2UodHJpbUxlYWRpbmdEb3QocHJvdG8udHlwZU5hbWUpKTtcbiAgICAgICAgICAgIGFzc2VydChmaWVsZC5tZXNzYWdlLCBgaW52YWxpZCBGaWVsZERlc2NyaXB0b3JQcm90bzogdHlwZV9uYW1lICR7cHJvdG8udHlwZU5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgZmllbGQuZGVsaW1pdGVkRW5jb2RpbmcgPSBpc0RlbGltaXRlZEVuY29kaW5nKHByb3RvLCBwYXJlbnRPckZpbGUpO1xuICAgICAgICAgICAgZmllbGQuZ2V0RGVmYXVsdFZhbHVlID0gKCkgPT4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVFlQRV9FTlVNOiB7XG4gICAgICAgICAgICBjb25zdCBlbnVtZXJhdGlvbiA9IHJlZy5nZXRFbnVtKHRyaW1MZWFkaW5nRG90KHByb3RvLnR5cGVOYW1lKSk7XG4gICAgICAgICAgICBhc3NlcnQoZW51bWVyYXRpb24gIT09IHVuZGVmaW5lZCwgYGludmFsaWQgRmllbGREZXNjcmlwdG9yUHJvdG86IHR5cGVfbmFtZSAke3Byb3RvLnR5cGVOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIGZpZWxkLmZpZWxkS2luZCA9IFwiZW51bVwiO1xuICAgICAgICAgICAgZmllbGQuZW51bSA9IHJlZy5nZXRFbnVtKHRyaW1MZWFkaW5nRG90KHByb3RvLnR5cGVOYW1lKSk7XG4gICAgICAgICAgICBmaWVsZC5nZXREZWZhdWx0VmFsdWUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZUlzU2V0RXhwbGljaXQocHJvdG8sIFwiZGVmYXVsdFZhbHVlXCIpXG4gICAgICAgICAgICAgICAgICAgID8gcGFyc2VUZXh0Rm9ybWF0RW51bVZhbHVlKGVudW1lcmF0aW9uLCBwcm90by5kZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGZpZWxkLmZpZWxkS2luZCA9IFwic2NhbGFyXCI7XG4gICAgICAgICAgICBmaWVsZC5zY2FsYXIgPSB0eXBlO1xuICAgICAgICAgICAgZmllbGQubG9uZ0FzU3RyaW5nID0ganN0eXBlID09IEpTX1NUUklORztcbiAgICAgICAgICAgIGZpZWxkLmdldERlZmF1bHRWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlSXNTZXRFeHBsaWNpdChwcm90bywgXCJkZWZhdWx0VmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZVRleHRGb3JtYXRTY2FsYXJWYWx1ZSh0eXBlLCBwcm90by5kZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWVsZDtcbn1cbi8qKlxuICogUGFyc2UgdGhlIFwic3ludGF4XCIgYW5kIFwiZWRpdGlvblwiIGZpZWxkcywgcmV0dXJuaW5nIG9uZSBvZiB0aGUgc3VwcG9ydGVkXG4gKiBlZGl0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0RmlsZUVkaXRpb24ocHJvdG8pIHtcbiAgICBzd2l0Y2ggKHByb3RvLnN5bnRheCkge1xuICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgIGNhc2UgXCJwcm90bzJcIjpcbiAgICAgICAgICAgIHJldHVybiBFRElUSU9OX1BST1RPMjtcbiAgICAgICAgY2FzZSBcInByb3RvM1wiOlxuICAgICAgICAgICAgcmV0dXJuIEVESVRJT05fUFJPVE8zO1xuICAgICAgICBjYXNlIFwiZWRpdGlvbnNcIjpcbiAgICAgICAgICAgIGlmIChwcm90by5lZGl0aW9uIGluIGZlYXR1cmVEZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm90by5lZGl0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb3RvLm5hbWV9OiB1bnN1cHBvcnRlZCBlZGl0aW9uYCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvdG8ubmFtZX06IHVuc3VwcG9ydGVkIHN5bnRheCBcIiR7cHJvdG8uc3ludGF4fVwiYCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXNvbHZlIGRlcGVuZGVuY2llcyBvZiBGaWxlRGVzY3JpcHRvclByb3RvIHRvIERlc2NGaWxlLlxuICovXG5mdW5jdGlvbiBmaW5kRmlsZURlcGVuZGVuY2llcyhwcm90bywgcmVnKSB7XG4gICAgcmV0dXJuIHByb3RvLmRlcGVuZGVuY3kubWFwKCh3YW50TmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBkZXAgPSByZWcuZ2V0RmlsZSh3YW50TmFtZSk7XG4gICAgICAgIGlmICghZGVwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kICR7d2FudE5hbWV9LCBpbXBvcnRlZCBieSAke3Byb3RvLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlcDtcbiAgICB9KTtcbn1cbi8qKlxuICogRmluZHMgYSBwcmVmaXggc2hhcmVkIGJ5IGVudW0gdmFsdWVzLCBmb3IgZXhhbXBsZSBgbXlfZW51bV9gIGZvclxuICogYGVudW0gTXlFbnVtIHtNWV9FTlVNX0E9MDsgTVlfRU5VTV9CPTE7fWAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRFbnVtU2hhcmVkUHJlZml4KGVudW1OYW1lLCB2YWx1ZXMpIHtcbiAgICBjb25zdCBwcmVmaXggPSBjYW1lbFRvU25ha2VDYXNlKGVudW1OYW1lKSArIFwiX1wiO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgIGlmICghdmFsdWUubmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocHJlZml4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaG9ydE5hbWUgPSB2YWx1ZS5uYW1lLnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgaWYgKHNob3J0TmFtZS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL15cXGQvLnRlc3Qoc2hvcnROYW1lKSkge1xuICAgICAgICAgICAgLy8gaWRlbnRpZmllcnMgbXVzdCBub3Qgc3RhcnQgd2l0aCBudW1iZXJzXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmVmaXg7XG59XG4vKipcbiAqIENvbnZlcnRzIGxvd2VyQ2FtZWxDYXNlIG9yIFVwcGVyQ2FtZWxDYXNlIGludG8gbG93ZXJfc25ha2VfY2FzZS5cbiAqIFRoaXMgaXMgdXNlZCB0byBmaW5kIHNoYXJlZCBwcmVmaXhlcyBpbiBhbiBlbnVtLlxuICovXG5mdW5jdGlvbiBjYW1lbFRvU25ha2VDYXNlKGNhbWVsKSB7XG4gICAgcmV0dXJuIChjYW1lbC5zdWJzdHJpbmcoMCwgMSkgKyBjYW1lbC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvW0EtWl0vZywgKGMpID0+IFwiX1wiICsgYykpLnRvTG93ZXJDYXNlKCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciBhIHByb3RvYnVmIHR5cGUgb3IgZXh0ZW5zaW9uIGZpZWxkLlxuICpcbiAqIFRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZSBmb3IgbWVzc2FnZXMsIGVudW1lcmF0aW9ucywgYW5kIHNlcnZpY2VzIGlzXG4gKiBjb25zdHJ1Y3RlZCBieSBjb25jYXRlbmF0aW5nIHRoZSBwYWNrYWdlIG5hbWUgKGlmIHByZXNlbnQpLCBwYXJlbnRcbiAqIG1lc3NhZ2UgbmFtZXMgKGZvciBuZXN0ZWQgdHlwZXMpLCBhbmQgdGhlIHR5cGUgbmFtZS4gV2Ugb21pdCB0aGUgbGVhZGluZ1xuICogZG90IGFkZGVkIGJ5IHByb3RvYnVmIGNvbXBpbGVycy4gRXhhbXBsZXM6XG4gKiAtIG15cGFja2FnZS5NeU1lc3NhZ2VcbiAqIC0gbXlwYWNrYWdlLk15TWVzc2FnZS5OZXN0ZWRNZXNzYWdlXG4gKlxuICogVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGZvciBleHRlbnNpb24gZmllbGRzIGlzIGNvbnN0cnVjdGVkIGJ5XG4gKiBjb25jYXRlbmF0aW5nIHRoZSBwYWNrYWdlIG5hbWUgKGlmIHByZXNlbnQpLCBwYXJlbnQgbWVzc2FnZSBuYW1lcyAoZm9yXG4gKiBleHRlbnNpb25zIGRlY2xhcmVkIHdpdGhpbiBhIG1lc3NhZ2UpLCBhbmQgdGhlIGZpZWxkIG5hbWUuIEV4YW1wbGVzOlxuICogLSBteXBhY2thZ2UuZXh0ZmllbGRcbiAqIC0gbXlwYWNrYWdlLk15TWVzc2FnZS5leHRmaWVsZFxuICovXG5mdW5jdGlvbiBtYWtlVHlwZU5hbWUocHJvdG8sIHBhcmVudCwgZmlsZSkge1xuICAgIGxldCB0eXBlTmFtZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHR5cGVOYW1lID0gYCR7cGFyZW50LnR5cGVOYW1lfS4ke3Byb3RvLm5hbWV9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlsZS5wcm90by5wYWNrYWdlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdHlwZU5hbWUgPSBgJHtmaWxlLnByb3RvLnBhY2thZ2V9LiR7cHJvdG8ubmFtZX1gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHlwZU5hbWUgPSBgJHtwcm90by5uYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiB0eXBlTmFtZTtcbn1cbi8qKlxuICogUmVtb3ZlIHRoZSBsZWFkaW5nIGRvdCBmcm9tIGEgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZS5cbiAqL1xuZnVuY3Rpb24gdHJpbUxlYWRpbmdEb3QodHlwZU5hbWUpIHtcbiAgICByZXR1cm4gdHlwZU5hbWUuc3RhcnRzV2l0aChcIi5cIikgPyB0eXBlTmFtZS5zdWJzdHJpbmcoMSkgOiB0eXBlTmFtZTtcbn1cbi8qKlxuICogRGlkIHRoZSB1c2VyIHB1dCB0aGUgZmllbGQgaW4gYSBvbmVvZiBncm91cD9cbiAqIFN5bnRoZXRpYyBvbmVvZnMgZm9yIHByb3RvMyBvcHRpb25hbHMgYXJlIGlnbm9yZWQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRPbmVvZihwcm90bywgYWxsT25lb2ZzKSB7XG4gICAgaWYgKCF1bnNhZmVJc1NldEV4cGxpY2l0KHByb3RvLCBcIm9uZW9mSW5kZXhcIikpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHByb3RvLnByb3RvM09wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IG9uZW9mID0gYWxsT25lb2ZzW3Byb3RvLm9uZW9mSW5kZXhdO1xuICAgIGFzc2VydChvbmVvZiwgYGludmFsaWQgRmllbGREZXNjcmlwdG9yUHJvdG86IG9uZW9mICMke3Byb3RvLm9uZW9mSW5kZXh9IGZvciBmaWVsZCAjJHtwcm90by5udW1iZXJ9IG5vdCBmb3VuZGApO1xuICAgIHJldHVybiBvbmVvZjtcbn1cbi8qKlxuICogUHJlc2VuY2Ugb2YgdGhlIGZpZWxkLlxuICogU2VlIGh0dHBzOi8vcHJvdG9idWYuZGV2L3Byb2dyYW1taW5nLWd1aWRlcy9maWVsZF9wcmVzZW5jZS9cbiAqL1xuZnVuY3Rpb24gZ2V0RmllbGRQcmVzZW5jZShwcm90bywgb25lb2YsIGlzRXh0ZW5zaW9uLCBwYXJlbnQpIHtcbiAgICBpZiAocHJvdG8ubGFiZWwgPT0gTEFCRUxfUkVRVUlSRUQpIHtcbiAgICAgICAgLy8gcHJvdG8yIHJlcXVpcmVkIGlzIExFR0FDWV9SRVFVSVJFRFxuICAgICAgICByZXR1cm4gTEVHQUNZX1JFUVVJUkVEO1xuICAgIH1cbiAgICBpZiAocHJvdG8ubGFiZWwgPT0gTEFCRUxfUkVQRUFURUQpIHtcbiAgICAgICAgLy8gcmVwZWF0ZWQgZmllbGRzIChpbmNsdWRpbmcgbWFwcykgZG8gbm90IHRyYWNrIHByZXNlbmNlXG4gICAgICAgIHJldHVybiBJTVBMSUNJVDtcbiAgICB9XG4gICAgaWYgKCEhb25lb2YgfHwgcHJvdG8ucHJvdG8zT3B0aW9uYWwpIHtcbiAgICAgICAgLy8gb25lb2YgaXMgYWx3YXlzIGV4cGxpY2l0XG4gICAgICAgIHJldHVybiBFWFBMSUNJVDtcbiAgICB9XG4gICAgaWYgKGlzRXh0ZW5zaW9uKSB7XG4gICAgICAgIC8vIGV4dGVuc2lvbnMgYWx3YXlzIHRyYWNrIHByZXNlbmNlXG4gICAgICAgIHJldHVybiBFWFBMSUNJVDtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlRmVhdHVyZShcImZpZWxkUHJlc2VuY2VcIiwgeyBwcm90bywgcGFyZW50IH0pO1xuICAgIGlmIChyZXNvbHZlZCA9PSBJTVBMSUNJVCAmJlxuICAgICAgICAocHJvdG8udHlwZSA9PSBUWVBFX01FU1NBR0UgfHwgcHJvdG8udHlwZSA9PSBUWVBFX0dST1VQKSkge1xuICAgICAgICAvLyBzaW5ndWxhciBtZXNzYWdlIGZpZWxkIGNhbm5vdCBiZSBpbXBsaWNpdFxuICAgICAgICByZXR1cm4gRVhQTElDSVQ7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbn1cbi8qKlxuICogUGFjayB0aGlzIHJlcGVhdGVkIGZpZWxkP1xuICovXG5mdW5jdGlvbiBpc1BhY2tlZEZpZWxkKHByb3RvLCBwYXJlbnQpIHtcbiAgICBpZiAocHJvdG8ubGFiZWwgIT0gTEFCRUxfUkVQRUFURUQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHByb3RvLnR5cGUpIHtcbiAgICAgICAgY2FzZSBUWVBFX1NUUklORzpcbiAgICAgICAgY2FzZSBUWVBFX0JZVEVTOlxuICAgICAgICBjYXNlIFRZUEVfR1JPVVA6XG4gICAgICAgIGNhc2UgVFlQRV9NRVNTQUdFOlxuICAgICAgICAgICAgLy8gbGVuZ3RoLWRlbGltaXRlZCB0eXBlcyBjYW5ub3QgYmUgcGFja2VkXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG8gPSBwcm90by5vcHRpb25zO1xuICAgIGlmIChvICYmIHVuc2FmZUlzU2V0RXhwbGljaXQobywgXCJwYWNrZWRcIikpIHtcbiAgICAgICAgLy8gcHJlZmVyIHRoZSBmaWVsZCBvcHRpb24gb3ZlciBlZGl0aW9uIGZlYXR1cmVzXG4gICAgICAgIHJldHVybiBvLnBhY2tlZDtcbiAgICB9XG4gICAgcmV0dXJuIChQQUNLRUQgPT1cbiAgICAgICAgcmVzb2x2ZUZlYXR1cmUoXCJyZXBlYXRlZEZpZWxkRW5jb2RpbmdcIiwge1xuICAgICAgICAgICAgcHJvdG8sXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgIH0pKTtcbn1cbi8qKlxuICogRmluZCB0aGUga2V5IGFuZCB2YWx1ZSBmaWVsZHMgb2YgYSBzeW50aGV0aWMgbWFwIGVudHJ5IG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIGZpbmRNYXBFbnRyeUZpZWxkcyhtYXBFbnRyeSkge1xuICAgIGNvbnN0IGtleSA9IG1hcEVudHJ5LmZpZWxkcy5maW5kKChmKSA9PiBmLm51bWJlciA9PT0gMSk7XG4gICAgY29uc3QgdmFsdWUgPSBtYXBFbnRyeS5maWVsZHMuZmluZCgoZikgPT4gZi5udW1iZXIgPT09IDIpO1xuICAgIGFzc2VydChrZXkgJiZcbiAgICAgICAga2V5LmZpZWxkS2luZCA9PSBcInNjYWxhclwiICYmXG4gICAgICAgIGtleS5zY2FsYXIgIT0gU2NhbGFyVHlwZS5CWVRFUyAmJlxuICAgICAgICBrZXkuc2NhbGFyICE9IFNjYWxhclR5cGUuRkxPQVQgJiZcbiAgICAgICAga2V5LnNjYWxhciAhPSBTY2FsYXJUeXBlLkRPVUJMRSAmJlxuICAgICAgICB2YWx1ZSAmJlxuICAgICAgICB2YWx1ZS5maWVsZEtpbmQgIT0gXCJsaXN0XCIgJiZcbiAgICAgICAgdmFsdWUuZmllbGRLaW5kICE9IFwibWFwXCIpO1xuICAgIHJldHVybiB7IGtleSwgdmFsdWUgfTtcbn1cbi8qKlxuICogRW51bWVyYXRpb25zIGNhbiBiZSBvcGVuIG9yIGNsb3NlZC5cbiAqIFNlZSBodHRwczovL3Byb3RvYnVmLmRldi9wcm9ncmFtbWluZy1ndWlkZXMvZW51bS9cbiAqL1xuZnVuY3Rpb24gaXNFbnVtT3BlbihkZXNjKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoT1BFTiA9PVxuICAgICAgICByZXNvbHZlRmVhdHVyZShcImVudW1UeXBlXCIsIHtcbiAgICAgICAgICAgIHByb3RvOiBkZXNjLnByb3RvLFxuICAgICAgICAgICAgcGFyZW50OiAoX2EgPSBkZXNjLnBhcmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGVzYy5maWxlLFxuICAgICAgICB9KSk7XG59XG4vKipcbiAqIEVuY29kZSB0aGUgbWVzc2FnZSBkZWxpbWl0ZWQgKGEuay5hLiBwcm90bzIgZ3JvdXAgZW5jb2RpbmcpLCBvclxuICogbGVuZ3RoLXByZWZpeGVkP1xuICovXG5mdW5jdGlvbiBpc0RlbGltaXRlZEVuY29kaW5nKHByb3RvLCBwYXJlbnQpIHtcbiAgICBpZiAocHJvdG8udHlwZSA9PSBUWVBFX0dST1VQKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gKERFTElNSVRFRCA9PVxuICAgICAgICByZXNvbHZlRmVhdHVyZShcIm1lc3NhZ2VFbmNvZGluZ1wiLCB7XG4gICAgICAgICAgICBwcm90byxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgfSkpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZlYXR1cmUobmFtZSwgcmVmKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBmZWF0dXJlU2V0ID0gKF9hID0gcmVmLnByb3RvLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mZWF0dXJlcztcbiAgICBpZiAoZmVhdHVyZVNldCkge1xuICAgICAgICBjb25zdCB2YWwgPSBmZWF0dXJlU2V0W25hbWVdO1xuICAgICAgICBpZiAodmFsICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKFwia2luZFwiIGluIHJlZikge1xuICAgICAgICBpZiAocmVmLmtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlRmVhdHVyZShuYW1lLCAoX2IgPSByZWYucGFyZW50KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiByZWYuZmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWRpdGlvbkRlZmF1bHRzID0gZmVhdHVyZURlZmF1bHRzW3JlZi5lZGl0aW9uXTtcbiAgICAgICAgaWYgKCFlZGl0aW9uRGVmYXVsdHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmVhdHVyZSBkZWZhdWx0IGZvciBlZGl0aW9uICR7cmVmLmVkaXRpb259IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlZGl0aW9uRGVmYXVsdHNbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlRmVhdHVyZShuYW1lLCByZWYucGFyZW50KTtcbn1cbi8qKlxuICogQXNzZXJ0IHRoYXQgY29uZGl0aW9uIGlzIHRydXRoeSBvciB0aHJvdyBlcnJvciAod2l0aCBtZXNzYWdlKVxuICovXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtc2cpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHJlc3RvcmVKc29uTmFtZXMgfSBmcm9tIFwiLi9yZXN0b3JlLWpzb24tbmFtZXMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUZpbGVSZWdpc3RyeSB9IGZyb20gXCIuLi9yZWdpc3RyeS5qc1wiO1xuLyoqXG4gKiBIeWRyYXRlIGEgZmlsZSBkZXNjcmlwdG9yIGZvciBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90byBmcm9tIGEgcGxhaW5cbiAqIG9iamVjdC5cbiAqXG4gKiBTZWUgY3JlYXRlRmlsZURlc2NyaXB0b3JQcm90b0Jvb3QoKSBmb3IgZGV0YWlscy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm9vdChib290KSB7XG4gICAgY29uc3Qgcm9vdCA9IGJvb3RGaWxlRGVzY3JpcHRvclByb3RvKGJvb3QpO1xuICAgIHJvb3QubWVzc2FnZVR5cGUuZm9yRWFjaChyZXN0b3JlSnNvbk5hbWVzKTtcbiAgICBjb25zdCByZWcgPSBjcmVhdGVGaWxlUmVnaXN0cnkocm9vdCwgKCkgPT4gdW5kZWZpbmVkKTtcbiAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdHlsZS9ub05vbk51bGxBc3NlcnRpb246IG5vbi1udWxsIGFzc2VydGlvbiBiZWNhdXNlIHdlIGp1c3QgY3JlYXRlZCB0aGUgcmVnaXN0cnkgZnJvbSB0aGUgZmlsZSB3ZSBsb29rIHVwXG4gICAgcmV0dXJuIHJlZy5nZXRGaWxlKHJvb3QubmFtZSk7XG59XG4vKipcbiAqIENyZWF0ZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8gZnJvbSBhbiBvYmplY3QgbGl0ZXJhbC5cbiAqXG4gKiBTZWUgY3JlYXRlRmlsZURlc2NyaXB0b3JQcm90b0Jvb3QoKSBmb3IgZGV0YWlscy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm9vdEZpbGVEZXNjcmlwdG9yUHJvdG8oaW5pdCkge1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmNyZWF0ZSh7XG4gICAgICAgIHN5bnRheDogXCJcIixcbiAgICAgICAgZWRpdGlvbjogMCxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm90bywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgJHR5cGVOYW1lOiBcImdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvXCIsIGRlcGVuZGVuY3k6IFtdLCBwdWJsaWNEZXBlbmRlbmN5OiBbXSwgd2Vha0RlcGVuZGVuY3k6IFtdLCBvcHRpb25EZXBlbmRlbmN5OiBbXSwgc2VydmljZTogW10sIGV4dGVuc2lvbjogW10gfSwgaW5pdCksIHsgbWVzc2FnZVR5cGU6IGluaXQubWVzc2FnZVR5cGUubWFwKGJvb3REZXNjcmlwdG9yUHJvdG8pLCBlbnVtVHlwZTogaW5pdC5lbnVtVHlwZS5tYXAoYm9vdEVudW1EZXNjcmlwdG9yUHJvdG8pIH0pKTtcbn1cbmZ1bmN0aW9uIGJvb3REZXNjcmlwdG9yUHJvdG8oaW5pdCkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgdmlzaWJpbGl0eTogMCxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm90bywge1xuICAgICAgICAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b1wiLFxuICAgICAgICBuYW1lOiBpbml0Lm5hbWUsXG4gICAgICAgIGZpZWxkOiAoX2IgPSAoX2EgPSBpbml0LmZpZWxkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKGJvb3RGaWVsZERlc2NyaXB0b3JQcm90bykpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdLFxuICAgICAgICBleHRlbnNpb246IFtdLFxuICAgICAgICBuZXN0ZWRUeXBlOiAoX2QgPSAoX2MgPSBpbml0Lm5lc3RlZFR5cGUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tYXAoYm9vdERlc2NyaXB0b3JQcm90bykpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFtdLFxuICAgICAgICBlbnVtVHlwZTogKF9mID0gKF9lID0gaW5pdC5lbnVtVHlwZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLm1hcChib290RW51bURlc2NyaXB0b3JQcm90bykpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IFtdLFxuICAgICAgICBleHRlbnNpb25SYW5nZTogKF9oID0gKF9nID0gaW5pdC5leHRlbnNpb25SYW5nZSkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLm1hcCgoZSkgPT4gKE9iamVjdC5hc3NpZ24oeyAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZVwiIH0sIGUpKSkpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IFtdLFxuICAgICAgICBvbmVvZkRlY2w6IFtdLFxuICAgICAgICByZXNlcnZlZFJhbmdlOiBbXSxcbiAgICAgICAgcmVzZXJ2ZWROYW1lOiBbXSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGJvb3RGaWVsZERlc2NyaXB0b3JQcm90byhpbml0KSB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgbGFiZWw6IDEsXG4gICAgICAgIHR5cGVOYW1lOiBcIlwiLFxuICAgICAgICBleHRlbmRlZTogXCJcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBcIlwiLFxuICAgICAgICBvbmVvZkluZGV4OiAwLFxuICAgICAgICBqc29uTmFtZTogXCJcIixcbiAgICAgICAgcHJvdG8zT3B0aW9uYWw6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb3RvLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvXCIgfSwgaW5pdCksIHsgb3B0aW9uczogaW5pdC5vcHRpb25zID8gYm9vdEZpZWxkT3B0aW9ucyhpbml0Lm9wdGlvbnMpIDogdW5kZWZpbmVkIH0pKTtcbn1cbmZ1bmN0aW9uIGJvb3RGaWVsZE9wdGlvbnMoaW5pdCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmNyZWF0ZSh7XG4gICAgICAgIGN0eXBlOiAwLFxuICAgICAgICBwYWNrZWQ6IGZhbHNlLFxuICAgICAgICBqc3R5cGU6IDAsXG4gICAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgICB1bnZlcmlmaWVkTGF6eTogZmFsc2UsXG4gICAgICAgIGRlcHJlY2F0ZWQ6IGZhbHNlLFxuICAgICAgICB3ZWFrOiBmYWxzZSxcbiAgICAgICAgZGVidWdSZWRhY3Q6IGZhbHNlLFxuICAgICAgICByZXRlbnRpb246IDAsXG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvdG8sIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7ICR0eXBlTmFtZTogXCJnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zXCIgfSwgaW5pdCksIHsgdGFyZ2V0czogKF9hID0gaW5pdC50YXJnZXRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSwgZWRpdGlvbkRlZmF1bHRzOiAoX2MgPSAoX2IgPSBpbml0LmVkaXRpb25EZWZhdWx0cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1hcCgoZSkgPT4gKE9iamVjdC5hc3NpZ24oeyAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5FZGl0aW9uRGVmYXVsdFwiIH0sIGUpKSkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFtdLCB1bmludGVycHJldGVkT3B0aW9uOiBbXSB9KSk7XG59XG5mdW5jdGlvbiBib290RW51bURlc2NyaXB0b3JQcm90byhpbml0KSB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgdmlzaWJpbGl0eTogMCxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm90bywge1xuICAgICAgICAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG9cIixcbiAgICAgICAgbmFtZTogaW5pdC5uYW1lLFxuICAgICAgICByZXNlcnZlZE5hbWU6IFtdLFxuICAgICAgICByZXNlcnZlZFJhbmdlOiBbXSxcbiAgICAgICAgdmFsdWU6IGluaXQudmFsdWUubWFwKChlKSA9PiAoT2JqZWN0LmFzc2lnbih7ICR0eXBlTmFtZTogXCJnb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvXCIgfSwgZSkpKSxcbiAgICB9KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgdW5zYWZlQ2xlYXIsIHVuc2FmZUlzU2V0IH0gZnJvbSBcIi4vcmVmbGVjdC91bnNhZmUuanNcIjtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBmaWVsZCBpcyBzZXQuXG4gKlxuICogLSBTY2FsYXIgYW5kIGVudW0gZmllbGRzIHdpdGggaW1wbGljaXQgcHJlc2VuY2UgKHByb3RvMyk6XG4gKiAgIFNldCBpZiBub3QgYSB6ZXJvIHZhbHVlLlxuICpcbiAqIC0gU2NhbGFyIGFuZCBlbnVtIGZpZWxkcyB3aXRoIGV4cGxpY2l0IHByZXNlbmNlIChwcm90bzIsIG9uZW9mKTpcbiAqICAgU2V0IGlmIGEgdmFsdWUgd2FzIHNldCB3aGVuIGNyZWF0aW5nIG9yIHBhcnNpbmcgdGhlIG1lc3NhZ2UsIG9yIHdoZW4gYVxuICogICB2YWx1ZSB3YXMgYXNzaWduZWQgdG8gdGhlIGZpZWxkJ3MgcHJvcGVydHkuXG4gKlxuICogLSBNZXNzYWdlIGZpZWxkczpcbiAqICAgU2V0IGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgdW5kZWZpbmVkLlxuICpcbiAqIC0gTGlzdCBhbmQgbWFwIGZpZWxkczpcbiAqICAgU2V0IGlmIG5vdCBlbXB0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmllbGRTZXQobWVzc2FnZSwgZmllbGQpIHtcbiAgICByZXR1cm4gKGZpZWxkLnBhcmVudC50eXBlTmFtZSA9PSBtZXNzYWdlLiR0eXBlTmFtZSAmJiB1bnNhZmVJc1NldChtZXNzYWdlLCBmaWVsZCkpO1xufVxuLyoqXG4gKiBSZXNldHMgdGhlIGZpZWxkLCBzbyB0aGF0IGlzRmllbGRTZXQoKSB3aWxsIHJldHVybiBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyRmllbGQobWVzc2FnZSwgZmllbGQpIHtcbiAgICBpZiAoZmllbGQucGFyZW50LnR5cGVOYW1lID09IG1lc3NhZ2UuJHR5cGVOYW1lKSB7XG4gICAgICAgIHVuc2FmZUNsZWFyKG1lc3NhZ2UsIGZpZWxkKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIC0gaWdub3JlcyB3aGl0ZS1zcGFjZSwgaW5jbHVkaW5nIGxpbmUgYnJlYWtzIGFuZCB0YWJzXG4gKiAtIGFsbG93cyBpbm5lciBwYWRkaW5nIChjYW4gZGVjb2RlIGNvbmNhdGVuYXRlZCBiYXNlNjQgc3RyaW5ncylcbiAqIC0gZG9lcyBub3QgcmVxdWlyZSBwYWRkaW5nXG4gKiAtIHVuZGVyc3RhbmRzIGJhc2U2NHVybCBlbmNvZGluZzpcbiAqICAgXCItXCIgaW5zdGVhZCBvZiBcIitcIixcbiAqICAgXCJfXCIgaW5zdGVhZCBvZiBcIi9cIixcbiAqICAgbm8gcGFkZGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0RGVjb2RlKGJhc2U2NFN0cikge1xuICAgIGNvbnN0IHRhYmxlID0gZ2V0RGVjb2RlVGFibGUoKTtcbiAgICAvLyBlc3RpbWF0ZSBieXRlIHNpemUsIG5vdCBhY2NvdW50aW5nIGZvciBpbm5lciBwYWRkaW5nIGFuZCB3aGl0ZXNwYWNlXG4gICAgbGV0IGVzID0gKGJhc2U2NFN0ci5sZW5ndGggKiAzKSAvIDQ7XG4gICAgaWYgKGJhc2U2NFN0cltiYXNlNjRTdHIubGVuZ3RoIC0gMl0gPT0gXCI9XCIpXG4gICAgICAgIGVzIC09IDI7XG4gICAgZWxzZSBpZiAoYmFzZTY0U3RyW2Jhc2U2NFN0ci5sZW5ndGggLSAxXSA9PSBcIj1cIilcbiAgICAgICAgZXMgLT0gMTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShlcyksIGJ5dGVQb3MgPSAwLCAvLyBwb3NpdGlvbiBpbiBieXRlIGFycmF5XG4gICAgZ3JvdXBQb3MgPSAwLCAvLyBwb3NpdGlvbiBpbiBiYXNlNjQgZ3JvdXBcbiAgICBiLCAvLyBjdXJyZW50IGJ5dGVcbiAgICBwID0gMDsgLy8gcHJldmlvdXMgYnl0ZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZTY0U3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGIgPSB0YWJsZVtiYXNlNjRTdHIuY2hhckNvZGVBdChpKV07XG4gICAgICAgIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYmFzZTY0U3RyW2ldKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUUzcwMjk6IEZhbGx0aHJvdWdoIGNhc2UgaW4gc3dpdGNoIC0tIGlnbm9yZSBpbnN0ZWFkIG9mIGV4cGVjdC1lcnJvciBmb3IgY29tcGlsZXIgc2V0dGluZ3Mgd2l0aG91dCBub0ZhbGx0aHJvdWdoQ2FzZXNJblN3aXRjaDogdHJ1ZVxuICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMDsgLy8gcmVzZXQgc3RhdGUgd2hlbiBwYWRkaW5nIGZvdW5kXG4gICAgICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJcXHJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFx0XCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgd2hpdGUtc3BhY2UsIGFuZCBwYWRkaW5nXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGJhc2U2NCBzdHJpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChncm91cFBvcykge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHAgPSBiO1xuICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBieXRlc1tieXRlUG9zKytdID0gKHAgPDwgMikgfCAoKGIgJiA0OCkgPj4gNCk7XG4gICAgICAgICAgICAgICAgcCA9IGI7XG4gICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGJ5dGVzW2J5dGVQb3MrK10gPSAoKHAgJiAxNSkgPDwgNCkgfCAoKGIgJiA2MCkgPj4gMik7XG4gICAgICAgICAgICAgICAgcCA9IGI7XG4gICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGJ5dGVzW2J5dGVQb3MrK10gPSAoKHAgJiAzKSA8PCA2KSB8IGI7XG4gICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChncm91cFBvcyA9PSAxKVxuICAgICAgICB0aHJvdyBFcnJvcihcImludmFsaWQgYmFzZTY0IHN0cmluZ1wiKTtcbiAgICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZVBvcyk7XG59XG4vKipcbiAqIEVuY29kZSBhIGJ5dGUgYXJyYXkgdG8gYSBiYXNlNjQgc3RyaW5nLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgc3RhbmRhcmQgYmFzZTY0IGVuY29kaW5nIHdpdGggcGFkZGluZy5cbiAqXG4gKiBUbyBlbmNvZGUgd2l0aG91dCBwYWRkaW5nLCB1c2UgZW5jb2RpbmcgPSBcInN0ZF9yYXdcIi5cbiAqXG4gKiBUbyBlbmNvZGUgd2l0aCB0aGUgVVJMIGVuY29kaW5nLCB1c2UgZW5jb2RpbmcgPSBcInVybFwiLCB3aGljaCByZXBsYWNlcyB0aGVcbiAqIGNoYXJhY3RlcnMgKy8gYnkgdGhlaXIgVVJMLXNhZmUgY291bnRlcnBhcnRzIC1fLCBhbmQgb21pdHMgcGFkZGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NEVuY29kZShieXRlcywgZW5jb2RpbmcgPSBcInN0ZFwiKSB7XG4gICAgY29uc3QgdGFibGUgPSBnZXRFbmNvZGVUYWJsZShlbmNvZGluZyk7XG4gICAgY29uc3QgcGFkID0gZW5jb2RpbmcgPT0gXCJzdGRcIjtcbiAgICBsZXQgYmFzZTY0ID0gXCJcIiwgZ3JvdXBQb3MgPSAwLCAvLyBwb3NpdGlvbiBpbiBiYXNlNjQgZ3JvdXBcbiAgICBiLCAvLyBjdXJyZW50IGJ5dGVcbiAgICBwID0gMDsgLy8gY2Fycnkgb3ZlciBmcm9tIHByZXZpb3VzIGJ5dGVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGIgPSBieXRlc1tpXTtcbiAgICAgICAgc3dpdGNoIChncm91cFBvcykge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJhc2U2NCArPSB0YWJsZVtiID4+IDJdO1xuICAgICAgICAgICAgICAgIHAgPSAoYiAmIDMpIDw8IDQ7XG4gICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGJhc2U2NCArPSB0YWJsZVtwIHwgKGIgPj4gNCldO1xuICAgICAgICAgICAgICAgIHAgPSAoYiAmIDE1KSA8PCAyO1xuICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBiYXNlNjQgKz0gdGFibGVbcCB8IChiID4+IDYpXTtcbiAgICAgICAgICAgICAgICBiYXNlNjQgKz0gdGFibGVbYiAmIDYzXTtcbiAgICAgICAgICAgICAgICBncm91cFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIG91dHB1dCBwYWRkaW5nXG4gICAgaWYgKGdyb3VwUG9zKSB7XG4gICAgICAgIGJhc2U2NCArPSB0YWJsZVtwXTtcbiAgICAgICAgaWYgKHBhZCkge1xuICAgICAgICAgICAgYmFzZTY0ICs9IFwiPVwiO1xuICAgICAgICAgICAgaWYgKGdyb3VwUG9zID09IDEpXG4gICAgICAgICAgICAgICAgYmFzZTY0ICs9IFwiPVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlNjQ7XG59XG4vLyBsb29rdXAgdGFibGUgZnJvbSBiYXNlNjQgY2hhcmFjdGVyIHRvIGJ5dGVcbmxldCBlbmNvZGVUYWJsZVN0ZDtcbmxldCBlbmNvZGVUYWJsZVVybDtcbi8vIGxvb2t1cCB0YWJsZSBmcm9tIGJhc2U2NCBjaGFyYWN0ZXIgKmNvZGUqIHRvIGJ5dGUgYmVjYXVzZSBsb29rdXAgYnkgbnVtYmVyIGlzIGZhc3RcbmxldCBkZWNvZGVUYWJsZTtcbmZ1bmN0aW9uIGdldEVuY29kZVRhYmxlKGVuY29kaW5nKSB7XG4gICAgaWYgKCFlbmNvZGVUYWJsZVN0ZCkge1xuICAgICAgICBlbmNvZGVUYWJsZVN0ZCA9XG4gICAgICAgICAgICBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5zcGxpdChcIlwiKTtcbiAgICAgICAgZW5jb2RlVGFibGVVcmwgPSBlbmNvZGVUYWJsZVN0ZC5zbGljZSgwLCAtMikuY29uY2F0KFwiLVwiLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGluZyA9PSBcInVybFwiXG4gICAgICAgID8gLy8gYmlvbWUtaWdub3JlIGxpbnQvc3R5bGUvbm9Ob25OdWxsQXNzZXJ0aW9uOiBUUyBmYWlscyB0byBuYXJyb3cgZG93blxuICAgICAgICAgICAgZW5jb2RlVGFibGVVcmxcbiAgICAgICAgOiBlbmNvZGVUYWJsZVN0ZDtcbn1cbmZ1bmN0aW9uIGdldERlY29kZVRhYmxlKCkge1xuICAgIGlmICghZGVjb2RlVGFibGUpIHtcbiAgICAgICAgZGVjb2RlVGFibGUgPSBbXTtcbiAgICAgICAgY29uc3QgZW5jb2RlVGFibGUgPSBnZXRFbmNvZGVUYWJsZShcInN0ZFwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVUYWJsZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGRlY29kZVRhYmxlW2VuY29kZVRhYmxlW2ldLmNoYXJDb2RlQXQoMCldID0gaTtcbiAgICAgICAgLy8gc3VwcG9ydCBiYXNlNjR1cmwgdmFyaWFudHNcbiAgICAgICAgZGVjb2RlVGFibGVbXCItXCIuY2hhckNvZGVBdCgwKV0gPSBlbmNvZGVUYWJsZS5pbmRleE9mKFwiK1wiKTtcbiAgICAgICAgZGVjb2RlVGFibGVbXCJfXCIuY2hhckNvZGVBdCgwKV0gPSBlbmNvZGVUYWJsZS5pbmRleE9mKFwiL1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZVRhYmxlO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBgYXJnYCBpcyBhIG1lc3NhZ2UuXG4gKiBJZiBgZGVzY2AgaXMgc2V0LCBkZXRlcm1pbmUgd2hldGhlciBgYXJnYCBpcyB0aGlzIHNwZWNpZmljIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01lc3NhZ2UoYXJnLCBzY2hlbWEpIHtcbiAgICBjb25zdCBpc01lc3NhZ2UgPSBhcmcgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIGFyZyA9PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwiJHR5cGVOYW1lXCIgaW4gYXJnICYmXG4gICAgICAgIHR5cGVvZiBhcmcuJHR5cGVOYW1lID09IFwic3RyaW5nXCI7XG4gICAgaWYgKCFpc01lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWEudHlwZU5hbWUgPT09IGFyZy4kdHlwZU5hbWU7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmNvbnN0IGVycm9yTmFtZXMgPSBbXG4gICAgXCJGaWVsZFZhbHVlSW52YWxpZEVycm9yXCIsXG4gICAgXCJGaWVsZExpc3RSYW5nZUVycm9yXCIsXG4gICAgXCJGb3JlaWduRmllbGRFcnJvclwiLFxuXTtcbmV4cG9ydCBjbGFzcyBGaWVsZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkT3JPbmVvZiwgbWVzc2FnZSwgbmFtZSA9IFwiRmllbGRWYWx1ZUludmFsaWRFcnJvclwiKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmZpZWxkID0gKCkgPT4gZmllbGRPck9uZW9mO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpZWxkRXJyb3IoYXJnKSB7XG4gICAgcmV0dXJuIChhcmcgaW5zdGFuY2VvZiBFcnJvciAmJlxuICAgICAgICBlcnJvck5hbWVzLmluY2x1ZGVzKGFyZy5uYW1lKSAmJlxuICAgICAgICBcImZpZWxkXCIgaW4gYXJnICYmXG4gICAgICAgIHR5cGVvZiBhcmcuZmllbGQgPT0gXCJmdW5jdGlvblwiKTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgdW5zYWZlTG9jYWwgfSBmcm9tIFwiLi91bnNhZmUuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgICByZXR1cm4gYXJnICE9PSBudWxsICYmIHR5cGVvZiBhcmcgPT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShhcmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT25lb2ZBRFQoYXJnKSB7XG4gICAgcmV0dXJuIChhcmcgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIGFyZyA9PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwiY2FzZVwiIGluIGFyZyAmJlxuICAgICAgICAoKHR5cGVvZiBhcmcuY2FzZSA9PSBcInN0cmluZ1wiICYmIFwidmFsdWVcIiBpbiBhcmcgJiYgYXJnLnZhbHVlICE9IG51bGwpIHx8XG4gICAgICAgICAgICAoYXJnLmNhc2UgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICghKFwidmFsdWVcIiBpbiBhcmcpIHx8IGFyZy52YWx1ZSA9PT0gdW5kZWZpbmVkKSkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZmxlY3RMaXN0KGFyZywgZmllbGQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgaWYgKGlzT2JqZWN0KGFyZykgJiZcbiAgICAgICAgdW5zYWZlTG9jYWwgaW4gYXJnICYmXG4gICAgICAgIFwiYWRkXCIgaW4gYXJnICYmXG4gICAgICAgIFwiZmllbGRcIiBpbiBhcmcgJiZcbiAgICAgICAgdHlwZW9mIGFyZy5maWVsZCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBmaWVsZDtcbiAgICAgICAgICAgIGNvbnN0IGIgPSBhcmcuZmllbGQoKTtcbiAgICAgICAgICAgIHJldHVybiAoYS5saXN0S2luZCA9PSBiLmxpc3RLaW5kICYmXG4gICAgICAgICAgICAgICAgYS5zY2FsYXIgPT09IGIuc2NhbGFyICYmXG4gICAgICAgICAgICAgICAgKChfYSA9IGEubWVzc2FnZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGVOYW1lKSA9PT0gKChfYiA9IGIubWVzc2FnZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnR5cGVOYW1lKSAmJlxuICAgICAgICAgICAgICAgICgoX2MgPSBhLmVudW0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50eXBlTmFtZSkgPT09ICgoX2QgPSBiLmVudW0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50eXBlTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWZsZWN0TWFwKGFyZywgZmllbGQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgaWYgKGlzT2JqZWN0KGFyZykgJiZcbiAgICAgICAgdW5zYWZlTG9jYWwgaW4gYXJnICYmXG4gICAgICAgIFwiaGFzXCIgaW4gYXJnICYmXG4gICAgICAgIFwiZmllbGRcIiBpbiBhcmcgJiZcbiAgICAgICAgdHlwZW9mIGFyZy5maWVsZCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBmaWVsZCwgYiA9IGFyZy5maWVsZCgpO1xuICAgICAgICAgICAgcmV0dXJuIChhLm1hcEtleSA9PT0gYi5tYXBLZXkgJiZcbiAgICAgICAgICAgICAgICBhLm1hcEtpbmQgPT0gYi5tYXBLaW5kICYmXG4gICAgICAgICAgICAgICAgYS5zY2FsYXIgPT09IGIuc2NhbGFyICYmXG4gICAgICAgICAgICAgICAgKChfYSA9IGEubWVzc2FnZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGVOYW1lKSA9PT0gKChfYiA9IGIubWVzc2FnZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnR5cGVOYW1lKSAmJlxuICAgICAgICAgICAgICAgICgoX2MgPSBhLmVudW0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50eXBlTmFtZSkgPT09ICgoX2QgPSBiLmVudW0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50eXBlTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWZsZWN0TWVzc2FnZShhcmcsIG1lc3NhZ2VEZXNjKSB7XG4gICAgcmV0dXJuIChpc09iamVjdChhcmcpICYmXG4gICAgICAgIHVuc2FmZUxvY2FsIGluIGFyZyAmJlxuICAgICAgICBcImRlc2NcIiBpbiBhcmcgJiZcbiAgICAgICAgaXNPYmplY3QoYXJnLmRlc2MpICYmXG4gICAgICAgIGFyZy5kZXNjLmtpbmQgPT09IFwibWVzc2FnZVwiICYmXG4gICAgICAgIChtZXNzYWdlRGVzYyA9PT0gdW5kZWZpbmVkIHx8IGFyZy5kZXNjLnR5cGVOYW1lID09IG1lc3NhZ2VEZXNjLnR5cGVOYW1lKSk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmNvbnN0IHN5bWJvbCA9IFN5bWJvbC5mb3IoXCJAYnVmYnVpbGQvcHJvdG9idWYvdGV4dC1lbmNvZGluZ1wiKTtcbi8qKlxuICogUHJvdG9idWYtRVMgcmVxdWlyZXMgdGhlIFRleHQgRW5jb2RpbmcgQVBJIHRvIGNvbnZlcnQgVVRGLTggZnJvbSBhbmQgdG9cbiAqIGJpbmFyeS4gVGhpcyBXSEFUV0cgQVBJIGlzIHdpZGVseSBhdmFpbGFibGUsIGJ1dCBpdCBpcyBub3QgcGFydCBvZiB0aGVcbiAqIEVDTUFTY3JpcHQgc3RhbmRhcmQuIE9uIHJ1bnRpbWVzIHdoZXJlIGl0IGlzIG5vdCBhdmFpbGFibGUsIHVzZSB0aGlzXG4gKiBmdW5jdGlvbiB0byBwcm92aWRlIHlvdXIgb3duIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgVGV4dCBFbmNvZGluZyBBUEkgZG9lcyBub3QgcHJvdmlkZSBhIHdheSB0byB2YWxpZGF0ZSBVVEYtOC5cbiAqIE91ciBpbXBsZW1lbnRhdGlvbiBmYWxscyBiYWNrIHRvIHVzZSBlbmNvZGVVUklDb21wb25lbnQoKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVRleHRFbmNvZGluZyh0ZXh0RW5jb2RpbmcpIHtcbiAgICBnbG9iYWxUaGlzW3N5bWJvbF0gPSB0ZXh0RW5jb2Rpbmc7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dEVuY29kaW5nKCkge1xuICAgIGlmIChnbG9iYWxUaGlzW3N5bWJvbF0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHRlID0gbmV3IGdsb2JhbFRoaXMuVGV4dEVuY29kZXIoKTtcbiAgICAgICAgY29uc3QgdGQgPSBuZXcgZ2xvYmFsVGhpcy5UZXh0RGVjb2RlcigpO1xuICAgICAgICBnbG9iYWxUaGlzW3N5bWJvbF0gPSB7XG4gICAgICAgICAgICBlbmNvZGVVdGY4KHRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGUuZW5jb2RlKHRleHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlY29kZVV0ZjgoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGQuZGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGVja1V0ZjgodGV4dCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZ2xvYmFsVGhpc1tzeW1ib2xdO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyB2YXJpbnQzMnJlYWQsIHZhcmludDMyd3JpdGUsIHZhcmludDY0cmVhZCwgdmFyaW50NjR3cml0ZSwgfSBmcm9tIFwiLi92YXJpbnQuanNcIjtcbmltcG9ydCB7IHByb3RvSW50NjQgfSBmcm9tIFwiLi4vcHJvdG8taW50NjQuanNcIjtcbmltcG9ydCB7IGdldFRleHRFbmNvZGluZyB9IGZyb20gXCIuL3RleHQtZW5jb2RpbmcuanNcIjtcbi8qKlxuICogUHJvdG9idWYgYmluYXJ5IGZvcm1hdCB3aXJlIHR5cGVzLlxuICpcbiAqIEEgd2lyZSB0eXBlIHByb3ZpZGVzIGp1c3QgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGZpbmQgdGhlIGxlbmd0aCBvZiB0aGVcbiAqIGZvbGxvd2luZyB2YWx1ZS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL2VuY29kaW5nI3N0cnVjdHVyZVxuICovXG5leHBvcnQgdmFyIFdpcmVUeXBlO1xuKGZ1bmN0aW9uIChXaXJlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGludDMyLCBpbnQ2NCwgdWludDMyLCB1aW50NjQsIHNpbnQzMiwgc2ludDY0LCBib29sLCBlbnVtXG4gICAgICovXG4gICAgV2lyZVR5cGVbV2lyZVR5cGVbXCJWYXJpbnRcIl0gPSAwXSA9IFwiVmFyaW50XCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgZml4ZWQ2NCwgc2ZpeGVkNjQsIGRvdWJsZS5cbiAgICAgKiBBbHdheXMgOCBieXRlcyB3aXRoIGxpdHRsZS1lbmRpYW4gYnl0ZSBvcmRlci5cbiAgICAgKi9cbiAgICBXaXJlVHlwZVtXaXJlVHlwZVtcIkJpdDY0XCJdID0gMV0gPSBcIkJpdDY0XCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3Igc3RyaW5nLCBieXRlcywgZW1iZWRkZWQgbWVzc2FnZXMsIHBhY2tlZCByZXBlYXRlZCBmaWVsZHNcbiAgICAgKlxuICAgICAqIE9ubHkgcmVwZWF0ZWQgbnVtZXJpYyB0eXBlcyAodHlwZXMgd2hpY2ggdXNlIHRoZSB2YXJpbnQsIDMyLWJpdCxcbiAgICAgKiBvciA2NC1iaXQgd2lyZSB0eXBlcykgY2FuIGJlIHBhY2tlZC4gSW4gcHJvdG8zLCBzdWNoIGZpZWxkcyBhcmVcbiAgICAgKiBwYWNrZWQgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBXaXJlVHlwZVtXaXJlVHlwZVtcIkxlbmd0aERlbGltaXRlZFwiXSA9IDJdID0gXCJMZW5ndGhEZWxpbWl0ZWRcIjtcbiAgICAvKipcbiAgICAgKiBTdGFydCBvZiBhIHRhZy1kZWxpbWl0ZWQgYWdncmVnYXRlLCBzdWNoIGFzIGEgcHJvdG8yIGdyb3VwLCBvciBhIG1lc3NhZ2VcbiAgICAgKiBpbiBlZGl0aW9ucyB3aXRoIG1lc3NhZ2VfZW5jb2RpbmcgPSBERUxJTUlURUQuXG4gICAgICovXG4gICAgV2lyZVR5cGVbV2lyZVR5cGVbXCJTdGFydEdyb3VwXCJdID0gM10gPSBcIlN0YXJ0R3JvdXBcIjtcbiAgICAvKipcbiAgICAgKiBFbmQgb2YgYSB0YWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAgKi9cbiAgICBXaXJlVHlwZVtXaXJlVHlwZVtcIkVuZEdyb3VwXCJdID0gNF0gPSBcIkVuZEdyb3VwXCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgZml4ZWQzMiwgc2ZpeGVkMzIsIGZsb2F0LlxuICAgICAqIEFsd2F5cyA0IGJ5dGVzIHdpdGggbGl0dGxlLWVuZGlhbiBieXRlIG9yZGVyLlxuICAgICAqL1xuICAgIFdpcmVUeXBlW1dpcmVUeXBlW1wiQml0MzJcIl0gPSA1XSA9IFwiQml0MzJcIjtcbn0pKFdpcmVUeXBlIHx8IChXaXJlVHlwZSA9IHt9KSk7XG4vKipcbiAqIE1heGltdW0gdmFsdWUgZm9yIGEgMzItYml0IGZsb2F0aW5nIHBvaW50IHZhbHVlIChQcm90b2J1ZiBGTE9BVCkuXG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVDMyX01BWCA9IDMuNDAyODIzNDY2Mzg1Mjg4NmUzODtcbi8qKlxuICogTWluaW11bSB2YWx1ZSBmb3IgYSAzMi1iaXQgZmxvYXRpbmcgcG9pbnQgdmFsdWUgKFByb3RvYnVmIEZMT0FUKS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZMT0FUMzJfTUlOID0gLTMuNDAyODIzNDY2Mzg1Mjg4NmUzODtcbi8qKlxuICogTWF4aW11bSB2YWx1ZSBmb3IgYW4gdW5zaWduZWQgMzItYml0IGludGVnZXIgKFByb3RvYnVmIFVJTlQzMiwgRklYRUQzMikuXG4gKi9cbmV4cG9ydCBjb25zdCBVSU5UMzJfTUFYID0gMHhmZmZmZmZmZjtcbi8qKlxuICogTWF4aW11bSB2YWx1ZSBmb3IgYSBzaWduZWQgMzItYml0IGludGVnZXIgKFByb3RvYnVmIElOVDMyLCBTRklYRUQzMiwgU0lOVDMyKS5cbiAqL1xuZXhwb3J0IGNvbnN0IElOVDMyX01BWCA9IDB4N2ZmZmZmZmY7XG4vKipcbiAqIE1pbmltdW0gdmFsdWUgZm9yIGEgc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIChQcm90b2J1ZiBJTlQzMiwgU0ZJWEVEMzIsIFNJTlQzMikuXG4gKi9cbmV4cG9ydCBjb25zdCBJTlQzMl9NSU4gPSAtMHg4MDAwMDAwMDtcbmV4cG9ydCBjbGFzcyBCaW5hcnlXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVuY29kZVV0ZjggPSBnZXRUZXh0RW5jb2RpbmcoKS5lbmNvZGVVdGY4KSB7XG4gICAgICAgIHRoaXMuZW5jb2RlVXRmOCA9IGVuY29kZVV0Zjg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmV2aW91cyBmb3JrIHN0YXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5jaHVua3MgPSBbXTtcbiAgICAgICAgdGhpcy5idWYgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFsbCBieXRlcyB3cml0dGVuIGFuZCByZXNldCB0aGlzIHdyaXRlci5cbiAgICAgKi9cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2gobmV3IFVpbnQ4QXJyYXkodGhpcy5idWYpKTsgLy8gZmx1c2ggdGhlIGJ1ZmZlclxuICAgICAgICAgICAgdGhpcy5idWYgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGVuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGxlbiArPSB0aGlzLmNodW5rc1tpXS5sZW5ndGg7XG4gICAgICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBieXRlcy5zZXQodGhpcy5jaHVua3NbaV0sIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gdGhpcy5jaHVua3NbaV0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgYSBuZXcgZm9yayBmb3IgbGVuZ3RoLWRlbGltaXRlZCBkYXRhIGxpa2UgYSBtZXNzYWdlXG4gICAgICogb3IgYSBwYWNrZWQgcmVwZWF0ZWQgZmllbGQuXG4gICAgICpcbiAgICAgKiBNdXN0IGJlIGpvaW5lZCBsYXRlciB3aXRoIGBqb2luKClgLlxuICAgICAqL1xuICAgIGZvcmsoKSB7XG4gICAgICAgIHRoaXMuc3RhY2sucHVzaCh7IGNodW5rczogdGhpcy5jaHVua3MsIGJ1ZjogdGhpcy5idWYgfSk7XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgIHRoaXMuYnVmID0gW107XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBKb2luIHRoZSBsYXN0IGZvcmsuIFdyaXRlIGl0cyBsZW5ndGggYW5kIGJ5dGVzLCB0aGVuXG4gICAgICogcmV0dXJuIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAgICAgKi9cbiAgICBqb2luKCkge1xuICAgICAgICAvLyBnZXQgY2h1bmsgb2YgZm9ya1xuICAgICAgICBsZXQgY2h1bmsgPSB0aGlzLmZpbmlzaCgpO1xuICAgICAgICAvLyByZXN0b3JlIHByZXZpb3VzIHN0YXRlXG4gICAgICAgIGxldCBwcmV2ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFwcmV2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzdGF0ZSwgZm9yayBzdGFjayBlbXB0eVwiKTtcbiAgICAgICAgdGhpcy5jaHVua3MgPSBwcmV2LmNodW5rcztcbiAgICAgICAgdGhpcy5idWYgPSBwcmV2LmJ1ZjtcbiAgICAgICAgLy8gd3JpdGUgbGVuZ3RoIG9mIGNodW5rIGFzIHZhcmludFxuICAgICAgICB0aGlzLnVpbnQzMihjaHVuay5ieXRlTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3KGNodW5rKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgdGFnIChmaWVsZCBudW1iZXIgYW5kIHdpcmUgdHlwZSkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIGB1aW50MzIoIChmaWVsZE5vIDw8IDMgfCB0eXBlKSA+Pj4gMCApYC5cbiAgICAgKlxuICAgICAqIEdlbmVyYXRlZCBjb2RlIHNob3VsZCBjb21wdXRlIHRoZSB0YWcgYWhlYWQgb2YgdGltZSBhbmQgY2FsbCBgdWludDMyKClgLlxuICAgICAqL1xuICAgIHRhZyhmaWVsZE5vLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVpbnQzMigoKGZpZWxkTm8gPDwgMykgfCB0eXBlKSA+Pj4gMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgY2h1bmsgb2YgcmF3IGJ5dGVzLlxuICAgICAqL1xuICAgIHJhdyhjaHVuaykge1xuICAgICAgICBpZiAodGhpcy5idWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKG5ldyBVaW50OEFycmF5KHRoaXMuYnVmKSk7XG4gICAgICAgICAgICB0aGlzLmJ1ZiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgdWludDMyYCB2YWx1ZSwgYW4gdW5zaWduZWQgMzIgYml0IHZhcmludC5cbiAgICAgKi9cbiAgICB1aW50MzIodmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0VUludDMyKHZhbHVlKTtcbiAgICAgICAgLy8gd3JpdGUgdmFsdWUgYXMgdmFyaW50IDMyLCBpbmxpbmVkIGZvciBzcGVlZFxuICAgICAgICB3aGlsZSAodmFsdWUgPiAweDdmKSB7XG4gICAgICAgICAgICB0aGlzLmJ1Zi5wdXNoKCh2YWx1ZSAmIDB4N2YpIHwgMHg4MCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+PiA3O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgaW50MzJgIHZhbHVlLCBhIHNpZ25lZCAzMiBiaXQgdmFyaW50LlxuICAgICAqL1xuICAgIGludDMyKHZhbHVlKSB7XG4gICAgICAgIGFzc2VydEludDMyKHZhbHVlKTtcbiAgICAgICAgdmFyaW50MzJ3cml0ZSh2YWx1ZSwgdGhpcy5idWYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgYm9vbGAgdmFsdWUsIGEgdmFyaWFudC5cbiAgICAgKi9cbiAgICBib29sKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2godmFsdWUgPyAxIDogMCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGBieXRlc2AgdmFsdWUsIGxlbmd0aC1kZWxpbWl0ZWQgYXJiaXRyYXJ5IGRhdGEuXG4gICAgICovXG4gICAgYnl0ZXModmFsdWUpIHtcbiAgICAgICAgdGhpcy51aW50MzIodmFsdWUuYnl0ZUxlbmd0aCk7IC8vIHdyaXRlIGxlbmd0aCBvZiBjaHVuayBhcyB2YXJpbnRcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgc3RyaW5nYCB2YWx1ZSwgbGVuZ3RoLWRlbGltaXRlZCBkYXRhIGNvbnZlcnRlZCB0byBVVEYtOCB0ZXh0LlxuICAgICAqL1xuICAgIHN0cmluZyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2h1bmsgPSB0aGlzLmVuY29kZVV0ZjgodmFsdWUpO1xuICAgICAgICB0aGlzLnVpbnQzMihjaHVuay5ieXRlTGVuZ3RoKTsgLy8gd3JpdGUgbGVuZ3RoIG9mIGNodW5rIGFzIHZhcmludFxuICAgICAgICByZXR1cm4gdGhpcy5yYXcoY2h1bmspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGBmbG9hdGAgdmFsdWUsIDMyLWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgICovXG4gICAgZmxvYXQodmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQzMih2YWx1ZSk7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKS5zZXRGbG9hdDMyKDAsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3KGNodW5rKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgZG91YmxlYCB2YWx1ZSwgYSA2NC1iaXQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxuICAgICAqL1xuICAgIGRvdWJsZSh2YWx1ZSkge1xuICAgICAgICBsZXQgY2h1bmsgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgICAgbmV3IERhdGFWaWV3KGNodW5rLmJ1ZmZlcikuc2V0RmxvYXQ2NCgwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkMzJgIHZhbHVlLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDMyLWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkMzIodmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0VUludDMyKHZhbHVlKTtcbiAgICAgICAgbGV0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICAgIG5ldyBEYXRhVmlldyhjaHVuay5idWZmZXIpLnNldFVpbnQzMigwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHNmaXhlZDMyYCB2YWx1ZSwgYSBzaWduZWQsIGZpeGVkLWxlbmd0aCAzMi1iaXQgaW50ZWdlci5cbiAgICAgKi9cbiAgICBzZml4ZWQzMih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRJbnQzMih2YWx1ZSk7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKS5zZXRJbnQzMigwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHNpbnQzMmAgdmFsdWUsIGEgc2lnbmVkLCB6aWd6YWctZW5jb2RlZCAzMi1iaXQgdmFyaW50LlxuICAgICAqL1xuICAgIHNpbnQzMih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRJbnQzMih2YWx1ZSk7XG4gICAgICAgIC8vIHppZ3phZyBlbmNvZGVcbiAgICAgICAgdmFsdWUgPSAoKHZhbHVlIDw8IDEpIF4gKHZhbHVlID4+IDMxKSkgPj4+IDA7XG4gICAgICAgIHZhcmludDMyd3JpdGUodmFsdWUsIHRoaXMuYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkNjRgIHZhbHVlLCBhIHNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0LWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIHNmaXhlZDY0KHZhbHVlKSB7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDgpLCB2aWV3ID0gbmV3IERhdGFWaWV3KGNodW5rLmJ1ZmZlciksIHRjID0gcHJvdG9JbnQ2NC5lbmModmFsdWUpO1xuICAgICAgICB2aWV3LnNldEludDMyKDAsIHRjLmxvLCB0cnVlKTtcbiAgICAgICAgdmlldy5zZXRJbnQzMig0LCB0Yy5oaSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkNjRgIHZhbHVlLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0IGJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkNjQodmFsdWUpIHtcbiAgICAgICAgbGV0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoOCksIHZpZXcgPSBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKSwgdGMgPSBwcm90b0ludDY0LnVFbmModmFsdWUpO1xuICAgICAgICB2aWV3LnNldEludDMyKDAsIHRjLmxvLCB0cnVlKTtcbiAgICAgICAgdmlldy5zZXRJbnQzMig0LCB0Yy5oaSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGludDY0YCB2YWx1ZSwgYSBzaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICBpbnQ2NCh2YWx1ZSkge1xuICAgICAgICBsZXQgdGMgPSBwcm90b0ludDY0LmVuYyh2YWx1ZSk7XG4gICAgICAgIHZhcmludDY0d3JpdGUodGMubG8sIHRjLmhpLCB0aGlzLmJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGBzaW50NjRgIHZhbHVlLCBhIHNpZ25lZCwgemlnLXphZy1lbmNvZGVkIDY0LWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDY0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRjID0gcHJvdG9JbnQ2NC5lbmModmFsdWUpLCBcbiAgICAgICAgLy8gemlnemFnIGVuY29kZVxuICAgICAgICBzaWduID0gdGMuaGkgPj4gMzEsIGxvID0gKHRjLmxvIDw8IDEpIF4gc2lnbiwgaGkgPSAoKHRjLmhpIDw8IDEpIHwgKHRjLmxvID4+PiAzMSkpIF4gc2lnbjtcbiAgICAgICAgdmFyaW50NjR3cml0ZShsbywgaGksIHRoaXMuYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHVpbnQ2NGAgdmFsdWUsIGFuIHVuc2lnbmVkIDY0LWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgdWludDY0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRjID0gcHJvdG9JbnQ2NC51RW5jKHZhbHVlKTtcbiAgICAgICAgdmFyaW50NjR3cml0ZSh0Yy5sbywgdGMuaGksIHRoaXMuYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJpbmFyeVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoYnVmLCBkZWNvZGVVdGY4ID0gZ2V0VGV4dEVuY29kaW5nKCkuZGVjb2RlVXRmOCkge1xuICAgICAgICB0aGlzLmRlY29kZVV0ZjggPSBkZWNvZGVVdGY4O1xuICAgICAgICB0aGlzLnZhcmludDY0ID0gdmFyaW50NjRyZWFkOyAvLyBkaXJ0eSBjYXN0IGZvciBgdGhpc2BcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlYWQgYSBgdWludDMyYCBmaWVsZCwgYW4gdW5zaWduZWQgMzIgYml0IHZhcmludC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudWludDMyID0gdmFyaW50MzJyZWFkO1xuICAgICAgICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgICAgICAgdGhpcy5sZW4gPSBidWYubGVuZ3RoO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMudmlldyA9IG5ldyBEYXRhVmlldyhidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBhIHRhZyAtIGZpZWxkIG51bWJlciBhbmQgd2lyZSB0eXBlLlxuICAgICAqL1xuICAgIHRhZygpIHtcbiAgICAgICAgbGV0IHRhZyA9IHRoaXMudWludDMyKCksIGZpZWxkTm8gPSB0YWcgPj4+IDMsIHdpcmVUeXBlID0gdGFnICYgNztcbiAgICAgICAgaWYgKGZpZWxkTm8gPD0gMCB8fCB3aXJlVHlwZSA8IDAgfHwgd2lyZVR5cGUgPiA1KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0YWc6IGZpZWxkIG5vIFwiICsgZmllbGRObyArIFwiIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlKTtcbiAgICAgICAgcmV0dXJuIFtmaWVsZE5vLCB3aXJlVHlwZV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNraXAgb25lIGVsZW1lbnQgYW5kIHJldHVybiB0aGUgc2tpcHBlZCBkYXRhLlxuICAgICAqXG4gICAgICogV2hlbiBza2lwcGluZyBTdGFydEdyb3VwLCBwcm92aWRlIHRoZSB0YWdzIGZpZWxkIG51bWJlciB0byBjaGVjayBmb3JcbiAgICAgKiBtYXRjaGluZyBmaWVsZCBudW1iZXIgaW4gdGhlIEVuZEdyb3VwIHRhZy5cbiAgICAgKi9cbiAgICBza2lwKHdpcmVUeXBlLCBmaWVsZE5vKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHRoaXMucG9zO1xuICAgICAgICBzd2l0Y2ggKHdpcmVUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFdpcmVUeXBlLlZhcmludDpcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5idWZbdGhpcy5wb3MrK10gJiAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVFM3MDI5OiBGYWxsdGhyb3VnaCBjYXNlIGluIHN3aXRjaCAtLSBpZ25vcmUgaW5zdGVhZCBvZiBleHBlY3QtZXJyb3IgZm9yIGNvbXBpbGVyIHNldHRpbmdzIHdpdGhvdXQgbm9GYWxsdGhyb3VnaENhc2VzSW5Td2l0Y2g6IHRydWVcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuQml0NjQ6XG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgKz0gNDtcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuQml0MzI6XG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgKz0gNDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkOlxuICAgICAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zICs9IGxlbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuU3RhcnRHcm91cDpcbiAgICAgICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtmbiwgd3RdID0gdGhpcy50YWcoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHd0ID09PSBXaXJlVHlwZS5FbmRHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkTm8gIT09IHVuZGVmaW5lZCAmJiBmbiAhPT0gZmllbGRObykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZW5kIGdyb3VwIHRhZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcCh3dCwgZm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FudCBza2lwIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWYuc3ViYXJyYXkoc3RhcnQsIHRoaXMucG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHBvc2l0aW9uIGluIGJ5dGUgYXJyYXkgaXMgb3V0IG9mIHJhbmdlLlxuICAgICAqL1xuICAgIGFzc2VydEJvdW5kcygpIHtcbiAgICAgICAgaWYgKHRoaXMucG9zID4gdGhpcy5sZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInByZW1hdHVyZSBFT0ZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgaW50MzJgIGZpZWxkLCBhIHNpZ25lZCAzMiBiaXQgdmFyaW50LlxuICAgICAqL1xuICAgIGludDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51aW50MzIoKSB8IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgc2ludDMyYCBmaWVsZCwgYSBzaWduZWQsIHppZ3phZy1lbmNvZGVkIDMyLWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDMyKCkge1xuICAgICAgICBsZXQgenplID0gdGhpcy51aW50MzIoKTtcbiAgICAgICAgLy8gZGVjb2RlIHppZ3phZ1xuICAgICAgICByZXR1cm4gKHp6ZSA+Pj4gMSkgXiAtKHp6ZSAmIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGludDY0YCBmaWVsZCwgYSBzaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICBpbnQ2NCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvSW50NjQuZGVjKC4uLnRoaXMudmFyaW50NjQoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgdWludDY0YCBmaWVsZCwgYW4gdW5zaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICB1aW50NjQoKSB7XG4gICAgICAgIHJldHVybiBwcm90b0ludDY0LnVEZWMoLi4udGhpcy52YXJpbnQ2NCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBzaW50NjRgIGZpZWxkLCBhIHNpZ25lZCwgemlnLXphZy1lbmNvZGVkIDY0LWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDY0KCkge1xuICAgICAgICBsZXQgW2xvLCBoaV0gPSB0aGlzLnZhcmludDY0KCk7XG4gICAgICAgIC8vIGRlY29kZSB6aWcgemFnXG4gICAgICAgIGxldCBzID0gLShsbyAmIDEpO1xuICAgICAgICBsbyA9ICgobG8gPj4+IDEpIHwgKChoaSAmIDEpIDw8IDMxKSkgXiBzO1xuICAgICAgICBoaSA9IChoaSA+Pj4gMSkgXiBzO1xuICAgICAgICByZXR1cm4gcHJvdG9JbnQ2NC5kZWMobG8sIGhpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBib29sYCBmaWVsZCwgYSB2YXJpYW50LlxuICAgICAqL1xuICAgIGJvb2woKSB7XG4gICAgICAgIGxldCBbbG8sIGhpXSA9IHRoaXMudmFyaW50NjQoKTtcbiAgICAgICAgcmV0dXJuIGxvICE9PSAwIHx8IGhpICE9PSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGZpeGVkMzJgIGZpZWxkLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDMyLWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkMzIoKSB7XG4gICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3N1c3BpY2lvdXMvbm9Bc3NpZ25JbkV4cHJlc3Npb25zOiBub1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldFVpbnQzMigodGhpcy5wb3MgKz0gNCkgLSA0LCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBzZml4ZWQzMmAgZmllbGQsIGEgc2lnbmVkLCBmaXhlZC1sZW5ndGggMzItYml0IGludGVnZXIuXG4gICAgICovXG4gICAgc2ZpeGVkMzIoKSB7XG4gICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3N1c3BpY2lvdXMvbm9Bc3NpZ25JbkV4cHJlc3Npb25zOiBub1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldEludDMyKCh0aGlzLnBvcyArPSA0KSAtIDQsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGZpeGVkNjRgIGZpZWxkLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0IGJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkNjQoKSB7XG4gICAgICAgIHJldHVybiBwcm90b0ludDY0LnVEZWModGhpcy5zZml4ZWQzMigpLCB0aGlzLnNmaXhlZDMyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGZpeGVkNjRgIGZpZWxkLCBhIHNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0LWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIHNmaXhlZDY0KCkge1xuICAgICAgICByZXR1cm4gcHJvdG9JbnQ2NC5kZWModGhpcy5zZml4ZWQzMigpLCB0aGlzLnNmaXhlZDMyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGZsb2F0YCBmaWVsZCwgMzItYml0IGZsb2F0aW5nIHBvaW50IG51bWJlci5cbiAgICAgKi9cbiAgICBmbG9hdCgpIHtcbiAgICAgICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvc3VzcGljaW91cy9ub0Fzc2lnbkluRXhwcmVzc2lvbnM6IG5vXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0RmxvYXQzMigodGhpcy5wb3MgKz0gNCkgLSA0LCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBkb3VibGVgIGZpZWxkLCBhIDY0LWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgICovXG4gICAgZG91YmxlKCkge1xuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRGbG9hdDY0KCh0aGlzLnBvcyArPSA4KSAtIDgsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGJ5dGVzYCBmaWVsZCwgbGVuZ3RoLWRlbGltaXRlZCBhcmJpdHJhcnkgZGF0YS5cbiAgICAgKi9cbiAgICBieXRlcygpIHtcbiAgICAgICAgbGV0IGxlbiA9IHRoaXMudWludDMyKCksIHN0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICAgIHRoaXMucG9zICs9IGxlbjtcbiAgICAgICAgdGhpcy5hc3NlcnRCb3VuZHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgc3RyaW5nYCBmaWVsZCwgbGVuZ3RoLWRlbGltaXRlZCBkYXRhIGNvbnZlcnRlZCB0byBVVEYtOCB0ZXh0LlxuICAgICAqL1xuICAgIHN0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlVXRmOCh0aGlzLmJ5dGVzKCkpO1xuICAgIH1cbn1cbi8qKlxuICogQXNzZXJ0IGEgdmFsaWQgc2lnbmVkIHByb3RvYnVmIDMyLWJpdCBpbnRlZ2VyIGFzIGEgbnVtYmVyIG9yIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SW50MzIoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBhcmcgPSBOdW1iZXIoYXJnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFyZyAhPSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgaW50MzI6IFwiICsgdHlwZW9mIGFyZyk7XG4gICAgfVxuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhcmcpIHx8XG4gICAgICAgIGFyZyA+IElOVDMyX01BWCB8fFxuICAgICAgICBhcmcgPCBJTlQzMl9NSU4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgaW50MzI6IFwiICsgYXJnKTtcbn1cbi8qKlxuICogQXNzZXJ0IGEgdmFsaWQgdW5zaWduZWQgcHJvdG9idWYgMzItYml0IGludGVnZXIgYXMgYSBudW1iZXIgb3Igc3RyaW5nLlxuICovXG5mdW5jdGlvbiBhc3NlcnRVSW50MzIoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBhcmcgPSBOdW1iZXIoYXJnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFyZyAhPSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdWludDMyOiBcIiArIHR5cGVvZiBhcmcpO1xuICAgIH1cbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSB8fFxuICAgICAgICBhcmcgPiBVSU5UMzJfTUFYIHx8XG4gICAgICAgIGFyZyA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdWludDMyOiBcIiArIGFyZyk7XG59XG4vKipcbiAqIEFzc2VydCBhIHZhbGlkIHByb3RvYnVmIGZsb2F0IHZhbHVlIGFzIGEgbnVtYmVyIG9yIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RmxvYXQzMihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IG8gPSBhcmc7XG4gICAgICAgIGFyZyA9IE51bWJlcihhcmcpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGFyZykgJiYgbyAhPT0gXCJOYU5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmbG9hdDMyOiBcIiArIG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgIT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZsb2F0MzI6IFwiICsgdHlwZW9mIGFyZyk7XG4gICAgfVxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoYXJnKSAmJlxuICAgICAgICAoYXJnID4gRkxPQVQzMl9NQVggfHwgYXJnIDwgRkxPQVQzMl9NSU4pKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZsb2F0MzI6IFwiICsgYXJnKTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2NhbGFyVHlwZSwgfSBmcm9tIFwiLi4vZGVzY3JpcHRvcnMuanNcIjtcbmltcG9ydCB7IGlzTWVzc2FnZSB9IGZyb20gXCIuLi9pcy1tZXNzYWdlLmpzXCI7XG5pbXBvcnQgeyBGaWVsZEVycm9yIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmltcG9ydCB7IGlzUmVmbGVjdExpc3QsIGlzUmVmbGVjdE1hcCwgaXNSZWZsZWN0TWVzc2FnZSB9IGZyb20gXCIuL2d1YXJkLmpzXCI7XG5pbXBvcnQgeyBGTE9BVDMyX01BWCwgRkxPQVQzMl9NSU4sIElOVDMyX01BWCwgSU5UMzJfTUlOLCBVSU5UMzJfTUFYLCB9IGZyb20gXCIuLi93aXJlL2JpbmFyeS1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0VGV4dEVuY29kaW5nIH0gZnJvbSBcIi4uL3dpcmUvdGV4dC1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgcHJvdG9JbnQ2NCB9IGZyb20gXCIuLi9wcm90by1pbnQ2NC5qc1wiO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBmaWVsZCB2YWx1ZSBpcyB2YWxpZCBmb3IgdGhlIHJlZmxlY3QgQVBJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tGaWVsZChmaWVsZCwgdmFsdWUpIHtcbiAgICBjb25zdCBjaGVjayA9IGZpZWxkLmZpZWxkS2luZCA9PSBcImxpc3RcIlxuICAgICAgICA/IGlzUmVmbGVjdExpc3QodmFsdWUsIGZpZWxkKVxuICAgICAgICA6IGZpZWxkLmZpZWxkS2luZCA9PSBcIm1hcFwiXG4gICAgICAgICAgICA/IGlzUmVmbGVjdE1hcCh2YWx1ZSwgZmllbGQpXG4gICAgICAgICAgICA6IGNoZWNrU2luZ3VsYXIoZmllbGQsIHZhbHVlKTtcbiAgICBpZiAoY2hlY2sgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IHJlYXNvbjtcbiAgICBzd2l0Y2ggKGZpZWxkLmZpZWxkS2luZCkge1xuICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgcmVhc29uID0gYGV4cGVjdGVkICR7Zm9ybWF0UmVmbGVjdExpc3QoZmllbGQpfSwgZ290ICR7Zm9ybWF0VmFsKHZhbHVlKX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgIHJlYXNvbiA9IGBleHBlY3RlZCAke2Zvcm1hdFJlZmxlY3RNYXAoZmllbGQpfSwgZ290ICR7Zm9ybWF0VmFsKHZhbHVlKX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJlYXNvbiA9IHJlYXNvblNpbmd1bGFyKGZpZWxkLCB2YWx1ZSwgY2hlY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmllbGRFcnJvcihmaWVsZCwgcmVhc29uKTtcbn1cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gbGlzdCBpdGVtIGlzIHZhbGlkIGZvciB0aGUgcmVmbGVjdCBBUEkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0xpc3RJdGVtKGZpZWxkLCBpbmRleCwgdmFsdWUpIHtcbiAgICBjb25zdCBjaGVjayA9IGNoZWNrU2luZ3VsYXIoZmllbGQsIHZhbHVlKTtcbiAgICBpZiAoY2hlY2sgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZEVycm9yKGZpZWxkLCBgbGlzdCBpdGVtICMke2luZGV4ICsgMX06ICR7cmVhc29uU2luZ3VsYXIoZmllbGQsIHZhbHVlLCBjaGVjayl9YCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIG1hcCBrZXkgYW5kIHZhbHVlIGFyZSB2YWxpZCBmb3IgdGhlIHJlZmxlY3QgQVBJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tNYXBFbnRyeShmaWVsZCwga2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IGNoZWNrS2V5ID0gY2hlY2tTY2FsYXJWYWx1ZShrZXksIGZpZWxkLm1hcEtleSk7XG4gICAgaWYgKGNoZWNrS2V5ICE9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRFcnJvcihmaWVsZCwgYGludmFsaWQgbWFwIGtleTogJHtyZWFzb25TaW5ndWxhcih7IHNjYWxhcjogZmllbGQubWFwS2V5IH0sIGtleSwgY2hlY2tLZXkpfWApO1xuICAgIH1cbiAgICBjb25zdCBjaGVja1ZhbCA9IGNoZWNrU2luZ3VsYXIoZmllbGQsIHZhbHVlKTtcbiAgICBpZiAoY2hlY2tWYWwgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZEVycm9yKGZpZWxkLCBgbWFwIGVudHJ5ICR7Zm9ybWF0VmFsKGtleSl9OiAke3JlYXNvblNpbmd1bGFyKGZpZWxkLCB2YWx1ZSwgY2hlY2tWYWwpfWApO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gY2hlY2tTaW5ndWxhcihmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoZmllbGQuc2NhbGFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrU2NhbGFyVmFsdWUodmFsdWUsIGZpZWxkLnNjYWxhcik7XG4gICAgfVxuICAgIGlmIChmaWVsZC5lbnVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGZpZWxkLmVudW0ub3Blbikge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWVsZC5lbnVtLnZhbHVlcy5zb21lKCh2KSA9PiB2Lm51bWJlciA9PT0gdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXNSZWZsZWN0TWVzc2FnZSh2YWx1ZSwgZmllbGQubWVzc2FnZSk7XG59XG5mdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKHZhbHVlLCBzY2FsYXIpIHtcbiAgICBzd2l0Y2ggKHNjYWxhcikge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSB8fCAhTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlID4gRkxPQVQzMl9NQVggfHwgdmFsdWUgPCBGTE9BVDMyX01JTikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt2YWx1ZS50b0ZpeGVkKCl9IG91dCBvZiByYW5nZWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgICAgICAvLyBzaWduZWRcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlID4gSU5UMzJfTUFYIHx8IHZhbHVlIDwgSU5UMzJfTUlOKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnRvRml4ZWQoKX0gb3V0IG9mIHJhbmdlYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgICAgIC8vIHVuc2lnbmVkXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IFVJTlQzMl9NQVggfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnRvRml4ZWQoKX0gb3V0IG9mIHJhbmdlYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0VGV4dEVuY29kaW5nKCkuY2hlY2tVdGY4KHZhbHVlKSB8fCBcImludmFsaWQgVVRGOFwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UNjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgICAgIC8vIHNpZ25lZFxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgJiYgdmFsdWUubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwcm90b0ludDY0LnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHt2YWx1ZX0gb3V0IG9mIHJhbmdlYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICAgICAgLy8gdW5zaWduZWRcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJiaWdpbnRcIiB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiICYmIHZhbHVlLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9JbnQ2NC51UGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfSBvdXQgb2YgcmFuZ2VgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWFzb25TaW5ndWxhcihmaWVsZCwgdmFsLCBkZXRhaWxzKSB7XG4gICAgZGV0YWlscyA9XG4gICAgICAgIHR5cGVvZiBkZXRhaWxzID09IFwic3RyaW5nXCIgPyBgOiAke2RldGFpbHN9YCA6IGAsIGdvdCAke2Zvcm1hdFZhbCh2YWwpfWA7XG4gICAgaWYgKGZpZWxkLnNjYWxhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBgZXhwZWN0ZWQgJHtzY2FsYXJUeXBlRGVzY3JpcHRpb24oZmllbGQuc2NhbGFyKX1gICsgZGV0YWlscztcbiAgICB9XG4gICAgaWYgKGZpZWxkLmVudW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYGV4cGVjdGVkICR7ZmllbGQuZW51bS50b1N0cmluZygpfWAgKyBkZXRhaWxzO1xuICAgIH1cbiAgICByZXR1cm4gYGV4cGVjdGVkICR7Zm9ybWF0UmVmbGVjdE1lc3NhZ2UoZmllbGQubWVzc2FnZSl9YCArIGRldGFpbHM7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VmFsKHZhbCkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFVpbnQ4QXJyYXkoJHt2YWwubGVuZ3RofSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgQXJyYXkoJHt2YWwubGVuZ3RofSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVmbGVjdExpc3QodmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRSZWZsZWN0TGlzdCh2YWwuZmllbGQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZWZsZWN0TWFwKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0UmVmbGVjdE1hcCh2YWwuZmllbGQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZWZsZWN0TWVzc2FnZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFJlZmxlY3RNZXNzYWdlKHZhbC5kZXNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc01lc3NhZ2UodmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgbWVzc2FnZSAke3ZhbC4kdHlwZU5hbWV9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsLmxlbmd0aCA+IDMwID8gXCJzdHJpbmdcIiA6IGBcIiR7dmFsLnNwbGl0KCdcIicpLmpvaW4oJ1xcXFxcIicpfVwiYDtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCkgKyBcIm5cIjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIFwic3ltYm9sXCIgfCBcInVuZGVmaW5lZFwiIHwgXCJvYmplY3RcIiB8IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWw7XG4gICAgfVxufVxuZnVuY3Rpb24gZm9ybWF0UmVmbGVjdE1lc3NhZ2UoZGVzYykge1xuICAgIHJldHVybiBgUmVmbGVjdE1lc3NhZ2UgKCR7ZGVzYy50eXBlTmFtZX0pYDtcbn1cbmZ1bmN0aW9uIGZvcm1hdFJlZmxlY3RMaXN0KGZpZWxkKSB7XG4gICAgc3dpdGNoIChmaWVsZC5saXN0S2luZCkge1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGBSZWZsZWN0TGlzdCAoJHtmaWVsZC5tZXNzYWdlLnRvU3RyaW5nKCl9KWA7XG4gICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gYFJlZmxlY3RMaXN0ICgke2ZpZWxkLmVudW0udG9TdHJpbmcoKX0pYDtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgcmV0dXJuIGBSZWZsZWN0TGlzdCAoJHtTY2FsYXJUeXBlW2ZpZWxkLnNjYWxhcl19KWA7XG4gICAgfVxufVxuZnVuY3Rpb24gZm9ybWF0UmVmbGVjdE1hcChmaWVsZCkge1xuICAgIHN3aXRjaCAoZmllbGQubWFwS2luZCkge1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGBSZWZsZWN0TWFwICgke1NjYWxhclR5cGVbZmllbGQubWFwS2V5XX0sICR7ZmllbGQubWVzc2FnZS50b1N0cmluZygpfSlgO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgcmV0dXJuIGBSZWZsZWN0TWFwICgke1NjYWxhclR5cGVbZmllbGQubWFwS2V5XX0sICR7ZmllbGQuZW51bS50b1N0cmluZygpfSlgO1xuICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICByZXR1cm4gYFJlZmxlY3RNYXAgKCR7U2NhbGFyVHlwZVtmaWVsZC5tYXBLZXldfSwgJHtTY2FsYXJUeXBlW2ZpZWxkLnNjYWxhcl19KWA7XG4gICAgfVxufVxuZnVuY3Rpb24gc2NhbGFyVHlwZURlc2NyaXB0aW9uKHNjYWxhcikge1xuICAgIHN3aXRjaCAoc2NhbGFyKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIFwiYmlnaW50IChpbnQ2NClcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgICAgICByZXR1cm4gXCJiaWdpbnQgKHVpbnQ2NClcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJZVEVTOlxuICAgICAgICAgICAgcmV0dXJuIFwiVWludDhBcnJheVwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyIChmbG9hdDY0KVwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gXCJudW1iZXIgKGZsb2F0MzIpXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyICh1aW50MzIpXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyIChpbnQzMilcIjtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmV4cG9ydCBmdW5jdGlvbiBpc1dyYXBwZXIoYXJnKSB7XG4gICAgcmV0dXJuIGlzV3JhcHBlclR5cGVOYW1lKGFyZy4kdHlwZU5hbWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzV3JhcHBlckRlc2MobWVzc2FnZURlc2MpIHtcbiAgICBjb25zdCBmID0gbWVzc2FnZURlc2MuZmllbGRzWzBdO1xuICAgIHJldHVybiAoaXNXcmFwcGVyVHlwZU5hbWUobWVzc2FnZURlc2MudHlwZU5hbWUpICYmXG4gICAgICAgIGYgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBmLmZpZWxkS2luZCA9PSBcInNjYWxhclwiICYmXG4gICAgICAgIGYubmFtZSA9PSBcInZhbHVlXCIgJiZcbiAgICAgICAgZi5udW1iZXIgPT0gMSk7XG59XG5mdW5jdGlvbiBpc1dyYXBwZXJUeXBlTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lLnN0YXJ0c1dpdGgoXCJnb29nbGUucHJvdG9idWYuXCIpICYmXG4gICAgICAgIFtcbiAgICAgICAgICAgIFwiRG91YmxlVmFsdWVcIixcbiAgICAgICAgICAgIFwiRmxvYXRWYWx1ZVwiLFxuICAgICAgICAgICAgXCJJbnQ2NFZhbHVlXCIsXG4gICAgICAgICAgICBcIlVJbnQ2NFZhbHVlXCIsXG4gICAgICAgICAgICBcIkludDMyVmFsdWVcIixcbiAgICAgICAgICAgIFwiVUludDMyVmFsdWVcIixcbiAgICAgICAgICAgIFwiQm9vbFZhbHVlXCIsXG4gICAgICAgICAgICBcIlN0cmluZ1ZhbHVlXCIsXG4gICAgICAgICAgICBcIkJ5dGVzVmFsdWVcIixcbiAgICAgICAgXS5pbmNsdWRlcyhuYW1lLnN1YnN0cmluZygxNikpKTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgaXNNZXNzYWdlIH0gZnJvbSBcIi4vaXMtbWVzc2FnZS5qc1wiO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSwgfSBmcm9tIFwiLi9kZXNjcmlwdG9ycy5qc1wiO1xuaW1wb3J0IHsgc2NhbGFyWmVyb1ZhbHVlIH0gZnJvbSBcIi4vcmVmbGVjdC9zY2FsYXIuanNcIjtcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4vcmVmbGVjdC9ndWFyZC5qc1wiO1xuaW1wb3J0IHsgdW5zYWZlR2V0LCB1bnNhZmVPbmVvZkNhc2UsIHVuc2FmZVNldCB9IGZyb20gXCIuL3JlZmxlY3QvdW5zYWZlLmpzXCI7XG5pbXBvcnQgeyBpc1dyYXBwZXJEZXNjIH0gZnJvbSBcIi4vd2t0L3dyYXBwZXJzLmpzXCI7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uLkVESVRJT05fUFJPVE8zOiBjb25zdCAkbmFtZTogRWRpdGlvbi4kbG9jYWxOYW1lID0gJG51bWJlcjtcbmNvbnN0IEVESVRJT05fUFJPVE8zID0gOTk5O1xuLy8gYm9vdHN0cmFwLWluamVjdCBnb29nbGUucHJvdG9idWYuRWRpdGlvbi5FRElUSU9OX1BST1RPMjogY29uc3QgJG5hbWU6IEVkaXRpb24uJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBFRElUSU9OX1BST1RPMiA9IDk5ODtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZS5JTVBMSUNJVDogY29uc3QgJG5hbWU6IEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZS4kbG9jYWxOYW1lID0gJG51bWJlcjtcbmNvbnN0IElNUExJQ0lUID0gMjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1lc3NhZ2UgaW5zdGFuY2UuXG4gKlxuICogVGhlIHNlY29uZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBpbml0aWFsaXplciBvYmplY3QsIHdoZXJlIGFsbCBmaWVsZHMgYXJlXG4gKiBvcHRpb25hbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShzY2hlbWEsIGluaXQpIHtcbiAgICBpZiAoaXNNZXNzYWdlKGluaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIGluaXQ7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVaZXJvTWVzc2FnZShzY2hlbWEpO1xuICAgIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5pdE1lc3NhZ2Uoc2NoZW1hLCBtZXNzYWdlLCBpbml0KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG4vKipcbiAqIFNldHMgZmllbGQgdmFsdWVzIGZyb20gYSBNZXNzYWdlSW5pdFNoYXBlIG9uIGEgemVybyBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBpbml0TWVzc2FnZShtZXNzYWdlRGVzYywgbWVzc2FnZSwgaW5pdCkge1xuICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIG1lc3NhZ2VEZXNjLm1lbWJlcnMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gaW5pdFttZW1iZXIubG9jYWxOYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgaWdub3JlIHVuZGVmaW5lZCBhbmQgbnVsbFxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpZWxkO1xuICAgICAgICBpZiAobWVtYmVyLmtpbmQgPT0gXCJvbmVvZlwiKSB7XG4gICAgICAgICAgICBjb25zdCBvbmVvZkZpZWxkID0gdW5zYWZlT25lb2ZDYXNlKGluaXQsIG1lbWJlcik7XG4gICAgICAgICAgICBpZiAoIW9uZW9mRmllbGQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkID0gb25lb2ZGaWVsZDtcbiAgICAgICAgICAgIHZhbHVlID0gdW5zYWZlR2V0KGluaXQsIG9uZW9mRmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmllbGQgPSBtZW1iZXI7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmaWVsZC5maWVsZEtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b01lc3NhZ2UoZmllbGQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGluaXRTY2FsYXIoZmllbGQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJsaXN0XCI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBpbml0TGlzdChmaWVsZCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gaW5pdE1hcChmaWVsZCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHVuc2FmZVNldChtZXNzYWdlLCBmaWVsZCwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cbmZ1bmN0aW9uIGluaXRTY2FsYXIoZmllbGQsIHZhbHVlKSB7XG4gICAgaWYgKGZpZWxkLnNjYWxhciA9PSBTY2FsYXJUeXBlLkJZVEVTKSB7XG4gICAgICAgIHJldHVybiB0b1U4QXJyKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gaW5pdE1hcChmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIGlmIChmaWVsZC5zY2FsYXIgPT0gU2NhbGFyVHlwZS5CWVRFUykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRPYmplY3RWYWx1ZXModmFsdWUsIHRvVThBcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZC5tYXBLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydE9iamVjdFZhbHVlcyh2YWx1ZSwgKHZhbCkgPT4gdG9NZXNzYWdlKGZpZWxkLCB2YWwpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBpbml0TGlzdChmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGZpZWxkLnNjYWxhciA9PSBTY2FsYXJUeXBlLkJZVEVTKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKHRvVThBcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZC5saXN0S2luZCA9PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoaXRlbSkgPT4gdG9NZXNzYWdlKGZpZWxkLCBpdGVtKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gdG9NZXNzYWdlKGZpZWxkLCB2YWx1ZSkge1xuICAgIGlmIChmaWVsZC5maWVsZEtpbmQgPT0gXCJtZXNzYWdlXCIgJiZcbiAgICAgICAgIWZpZWxkLm9uZW9mICYmXG4gICAgICAgIGlzV3JhcHBlckRlc2MoZmllbGQubWVzc2FnZSkpIHtcbiAgICAgICAgLy8gVHlwZXMgZnJvbSBnb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8gYXJlIHVud3JhcHBlZCB3aGVuIHVzZWQgaW5cbiAgICAgICAgLy8gYSBzaW5ndWxhciBmaWVsZCB0aGF0IGlzIG5vdCBwYXJ0IG9mIGEgb25lb2YgZ3JvdXAuXG4gICAgICAgIHJldHVybiBpbml0U2NhbGFyKGZpZWxkLm1lc3NhZ2UuZmllbGRzWzBdLCB2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGZpZWxkLm1lc3NhZ2UudHlwZU5hbWUgPT0gXCJnb29nbGUucHJvdG9idWYuU3RydWN0XCIgJiZcbiAgICAgICAgICAgIGZpZWxkLnBhcmVudC50eXBlTmFtZSAhPT0gXCJnb29nbGUucHJvdG9idWYuVmFsdWVcIikge1xuICAgICAgICAgICAgLy8gZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBpcyByZXByZXNlbnRlZCB3aXRoIEpzb25PYmplY3Qgd2hlbiB1c2VkIGluIGFcbiAgICAgICAgICAgIC8vIGZpZWxkLCBleGNlcHQgd2hlbiB1c2VkIGluIGdvb2dsZS5wcm90b2J1Zi5WYWx1ZS5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTWVzc2FnZSh2YWx1ZSwgZmllbGQubWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGUoZmllbGQubWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8vIGNvbnZlcnRzIGFueSBBcnJheUxpa2U8bnVtYmVyPiB0byBVaW50OEFycmF5IGlmIG5lY2Vzc2FyeS5cbmZ1bmN0aW9uIHRvVThBcnIodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBuZXcgVWludDhBcnJheSh2YWx1ZSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRPYmplY3RWYWx1ZXMob2JqLCBmbikge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgICAgICByZXRbZW50cnlbMF1dID0gZm4oZW50cnlbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuY29uc3QgdG9rZW5aZXJvTWVzc2FnZUZpZWxkID0gU3ltYm9sKCk7XG5jb25zdCBtZXNzYWdlUHJvdG90eXBlcyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIENyZWF0ZSBhIHplcm8gbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlWmVyb01lc3NhZ2UoZGVzYykge1xuICAgIGxldCBtc2c7XG4gICAgaWYgKCFuZWVkc1Byb3RvdHlwZUNoYWluKGRlc2MpKSB7XG4gICAgICAgIG1zZyA9IHtcbiAgICAgICAgICAgICR0eXBlTmFtZTogZGVzYy50eXBlTmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZW1iZXIgb2YgZGVzYy5tZW1iZXJzKSB7XG4gICAgICAgICAgICBpZiAobWVtYmVyLmtpbmQgPT0gXCJvbmVvZlwiIHx8IG1lbWJlci5wcmVzZW5jZSA9PSBJTVBMSUNJVCkge1xuICAgICAgICAgICAgICAgIG1zZ1ttZW1iZXIubG9jYWxOYW1lXSA9IGNyZWF0ZVplcm9GaWVsZChtZW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBTdXBwb3J0IGRlZmF1bHQgdmFsdWVzIGFuZCB0cmFjayBwcmVzZW5jZSB2aWEgdGhlIHByb3RvdHlwZSBjaGFpblxuICAgICAgICBjb25zdCBjYWNoZWQgPSBtZXNzYWdlUHJvdG90eXBlcy5nZXQoZGVzYyk7XG4gICAgICAgIGxldCBwcm90b3R5cGU7XG4gICAgICAgIGxldCBtZW1iZXJzO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICAoeyBwcm90b3R5cGUsIG1lbWJlcnMgfSA9IGNhY2hlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm90b3R5cGUgPSB7fTtcbiAgICAgICAgICAgIG1lbWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBkZXNjLm1lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVtYmVyLmtpbmQgPT0gXCJvbmVvZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBvbmx5IHB1dCBpbW11dGFibGUgdmFsdWVzIG9uIHRoZSBwcm90b3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZW9mIEFEVHMgYXJlIG11dGFibGVcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIuZmllbGRLaW5kICE9IFwic2NhbGFyXCIgJiYgbWVtYmVyLmZpZWxkS2luZCAhPSBcImVudW1cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHNjYWxhciBhbmQgZW51bSB2YWx1ZXMgYXJlIGltbXV0YWJsZSwgbWFwLCBsaXN0LCBhbmQgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAvLyBhcmUgbm90XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVtYmVyLnByZXNlbmNlID09IElNUExJQ0lUKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGltcGxpY2l0IHByZXNlbmNlIHRyYWNrcyBmaWVsZCBwcmVzZW5jZSBieSB6ZXJvIHZhbHVlcyAtIGUuZy4gMCwgZmFsc2UsIFwiXCIsIGFyZSB1bnNldCwgMSwgdHJ1ZSwgXCJ4XCIgYXJlIHNldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gbWVzc2FnZSwgbWFwLCBsaXN0IGZpZWxkcyBhcmUgbXV0YWJsZSwgYW5kIGFsc28gaGF2ZSBJTVBMSUNJVCBwcmVzZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lbWJlcnMuYWRkKG1lbWJlcik7XG4gICAgICAgICAgICAgICAgcHJvdG90eXBlW21lbWJlci5sb2NhbE5hbWVdID0gY3JlYXRlWmVyb0ZpZWxkKG1lbWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXNzYWdlUHJvdG90eXBlcy5zZXQoZGVzYywgeyBwcm90b3R5cGUsIG1lbWJlcnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbXNnID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICBtc2cuJHR5cGVOYW1lID0gZGVzYy50eXBlTmFtZTtcbiAgICAgICAgZm9yIChjb25zdCBtZW1iZXIgb2YgZGVzYy5tZW1iZXJzKSB7XG4gICAgICAgICAgICBpZiAobWVtYmVycy5oYXMobWVtYmVyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lbWJlci5raW5kID09IFwiZmllbGRcIikge1xuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIuZmllbGRLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVtYmVyLmZpZWxkS2luZCA9PSBcInNjYWxhclwiIHx8IG1lbWJlci5maWVsZEtpbmQgPT0gXCJlbnVtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlci5wcmVzZW5jZSAhPSBJTVBMSUNJVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtc2dbbWVtYmVyLmxvY2FsTmFtZV0gPSBjcmVhdGVaZXJvRmllbGQobWVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbXNnO1xufVxuLyoqXG4gKiBEbyB3ZSBuZWVkIHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gdHJhY2sgZmllbGQgcHJlc2VuY2U/XG4gKi9cbmZ1bmN0aW9uIG5lZWRzUHJvdG90eXBlQ2hhaW4oZGVzYykge1xuICAgIHN3aXRjaCAoZGVzYy5maWxlLmVkaXRpb24pIHtcbiAgICAgICAgY2FzZSBFRElUSU9OX1BST1RPMzpcbiAgICAgICAgICAgIC8vIHByb3RvMyBhbHdheXMgdXNlcyBpbXBsaWNpdCBwcmVzZW5jZSwgd2UgbmV2ZXIgbmVlZCB0aGUgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjYXNlIEVESVRJT05fUFJPVE8yOlxuICAgICAgICAgICAgLy8gcHJvdG8yIG5ldmVyIHVzZXMgaW1wbGljaXQgcHJlc2VuY2UsIHdlIGFsd2F5cyBuZWVkIHRoZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIElmIGEgbWVzc2FnZSB1c2VzIHNjYWxhciBvciBlbnVtIGZpZWxkcyB3aXRoIGV4cGxpY2l0IHByZXNlbmNlLCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyB0aGUgcHJvdG90eXBlIGNoYWluIHRvIHRyYWNrIHByZXNlbmNlLiBUaGlzIHJ1bGUgZG9lcyBub3QgYXBwbHkgdG8gZmllbGRzXG4gICAgICAgICAgICAvLyBpbiBhIG9uZW9mIGdyb3VwIC0gdGhleSB1c2UgYSBkaWZmZXJlbnQgbWVjaGFuaXNtIHRvIHRyYWNrIHByZXNlbmNlLlxuICAgICAgICAgICAgcmV0dXJuIGRlc2MuZmllbGRzLnNvbWUoKGYpID0+IGYucHJlc2VuY2UgIT0gSU1QTElDSVQgJiYgZi5maWVsZEtpbmQgIT0gXCJtZXNzYWdlXCIgJiYgIWYub25lb2YpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHplcm8gdmFsdWUgZm9yIG9uZW9mIGdyb3VwcywgYW5kIGZvciBldmVyeSBmaWVsZCBraW5kIGV4Y2VwdFxuICogbWVzc2FnZXMuIFNjYWxhciBhbmQgZW51bSBmaWVsZHMgY2FuIGhhdmUgZGVmYXVsdCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVplcm9GaWVsZChmaWVsZCkge1xuICAgIGlmIChmaWVsZC5raW5kID09IFwib25lb2ZcIikge1xuICAgICAgICByZXR1cm4geyBjYXNlOiB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmZpZWxkS2luZCA9PSBcImxpc3RcIikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChmaWVsZC5maWVsZEtpbmQgPT0gXCJtYXBcIikge1xuICAgICAgICByZXR1cm4ge307IC8vIE9iamVjdC5jcmVhdGUobnVsbCkgd291bGQgYmUgZGVzaXJhYmxlIGhlcmUsIGJ1dCBpcyB1bnN1cHBvcnRlZCBieSByZWFjdCBodHRwczovL3JlYWN0LmRldi9yZWZlcmVuY2UvcmVhY3QvdXNlLXNlcnZlciNzZXJpYWxpemFibGUtcGFyYW1ldGVycy1hbmQtcmV0dXJuLXZhbHVlc1xuICAgIH1cbiAgICBpZiAoZmllbGQuZmllbGRLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgIHJldHVybiB0b2tlblplcm9NZXNzYWdlRmllbGQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmdldERlZmF1bHRWYWx1ZSgpO1xuICAgIGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmllbGQuZmllbGRLaW5kID09IFwic2NhbGFyXCIgJiYgZmllbGQubG9uZ0FzU3RyaW5nXG4gICAgICAgICAgICA/IGRlZmF1bHRWYWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkLmZpZWxkS2luZCA9PSBcInNjYWxhclwiXG4gICAgICAgID8gc2NhbGFyWmVyb1ZhbHVlKGZpZWxkLnNjYWxhciwgZmllbGQubG9uZ0FzU3RyaW5nKVxuICAgICAgICA6IGZpZWxkLmVudW0udmFsdWVzWzBdLm51bWJlcjtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2NhbGFyVHlwZSwgfSBmcm9tIFwiLi4vZGVzY3JpcHRvcnMuanNcIjtcbmltcG9ydCB7IGNoZWNrRmllbGQsIGNoZWNrTGlzdEl0ZW0sIGNoZWNrTWFwRW50cnkgfSBmcm9tIFwiLi9yZWZsZWN0LWNoZWNrLmpzXCI7XG5pbXBvcnQgeyBGaWVsZEVycm9yIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmltcG9ydCB7IHVuc2FmZUNsZWFyLCB1bnNhZmVHZXQsIHVuc2FmZUlzU2V0LCB1bnNhZmVMb2NhbCwgdW5zYWZlT25lb2ZDYXNlLCB1bnNhZmVTZXQsIH0gZnJvbSBcIi4vdW5zYWZlLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tIFwiLi4vY3JlYXRlLmpzXCI7XG5pbXBvcnQgeyBpc1dyYXBwZXIsIGlzV3JhcHBlckRlc2MgfSBmcm9tIFwiLi4vd2t0L3dyYXBwZXJzLmpzXCI7XG5pbXBvcnQgeyBzY2FsYXJaZXJvVmFsdWUgfSBmcm9tIFwiLi9zY2FsYXIuanNcIjtcbmltcG9ydCB7IHByb3RvSW50NjQgfSBmcm9tIFwiLi4vcHJvdG8taW50NjQuanNcIjtcbmltcG9ydCB7IGlzT2JqZWN0LCBpc1JlZmxlY3RMaXN0LCBpc1JlZmxlY3RNYXAsIGlzUmVmbGVjdE1lc3NhZ2UsIH0gZnJvbSBcIi4vZ3VhcmQuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgUmVmbGVjdE1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWZsZWN0KG1lc3NhZ2VEZXNjLCBtZXNzYWdlLCBcbi8qKlxuICogQnkgZGVmYXVsdCwgZmllbGQgdmFsdWVzIGFyZSB2YWxpZGF0ZWQgd2hlbiBzZXR0aW5nIHRoZW0uIEZvciBleGFtcGxlLFxuICogYSB2YWx1ZSBmb3IgYW4gdWludDMyIGZpZWxkIG11c3QgYmUgYSBFQ01BU2NyaXB0IE51bWJlciA+PSAwLlxuICpcbiAqIFdoZW4gZmllbGQgdmFsdWVzIGFyZSB0cnVzdGVkLCBwZXJmb3JtYW5jZSBjYW4gYmUgaW1wcm92ZWQgYnkgZGlzYWJsaW5nXG4gKiBjaGVja3MuXG4gKi9cbmNoZWNrID0gdHJ1ZSkge1xuICAgIHJldHVybiBuZXcgUmVmbGVjdE1lc3NhZ2VJbXBsKG1lc3NhZ2VEZXNjLCBtZXNzYWdlLCBjaGVjayk7XG59XG5jbGFzcyBSZWZsZWN0TWVzc2FnZUltcGwge1xuICAgIGdldCBzb3J0ZWRGaWVsZHMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLl9zb3J0ZWRGaWVsZHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFxuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgKHRoaXMuX3NvcnRlZEZpZWxkcyA9IHRoaXMuZGVzYy5maWVsZHNcbiAgICAgICAgICAgIC5jb25jYXQoKVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEubnVtYmVyIC0gYi5udW1iZXIpKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2VEZXNjLCBtZXNzYWdlLCBjaGVjayA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5saXN0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5tYXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmNoZWNrID0gY2hlY2s7XG4gICAgICAgIHRoaXMuZGVzYyA9IG1lc3NhZ2VEZXNjO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzW3Vuc2FmZUxvY2FsXSA9IG1lc3NhZ2UgIT09IG51bGwgJiYgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6IGNyZWF0ZShtZXNzYWdlRGVzYyk7XG4gICAgICAgIHRoaXMuZmllbGRzID0gbWVzc2FnZURlc2MuZmllbGRzO1xuICAgICAgICB0aGlzLm9uZW9mcyA9IG1lc3NhZ2VEZXNjLm9uZW9mcztcbiAgICAgICAgdGhpcy5tZW1iZXJzID0gbWVzc2FnZURlc2MubWVtYmVycztcbiAgICB9XG4gICAgZmluZE51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maWVsZHNCeU51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fZmllbGRzQnlOdW1iZXIgPSBuZXcgTWFwKHRoaXMuZGVzYy5maWVsZHMubWFwKChmKSA9PiBbZi5udW1iZXIsIGZdKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkc0J5TnVtYmVyLmdldChudW1iZXIpO1xuICAgIH1cbiAgICBvbmVvZkNhc2Uob25lb2YpIHtcbiAgICAgICAgYXNzZXJ0T3duKHRoaXMubWVzc2FnZSwgb25lb2YpO1xuICAgICAgICByZXR1cm4gdW5zYWZlT25lb2ZDYXNlKHRoaXMubWVzc2FnZSwgb25lb2YpO1xuICAgIH1cbiAgICBpc1NldChmaWVsZCkge1xuICAgICAgICBhc3NlcnRPd24odGhpcy5tZXNzYWdlLCBmaWVsZCk7XG4gICAgICAgIHJldHVybiB1bnNhZmVJc1NldCh0aGlzLm1lc3NhZ2UsIGZpZWxkKTtcbiAgICB9XG4gICAgY2xlYXIoZmllbGQpIHtcbiAgICAgICAgYXNzZXJ0T3duKHRoaXMubWVzc2FnZSwgZmllbGQpO1xuICAgICAgICB1bnNhZmVDbGVhcih0aGlzLm1lc3NhZ2UsIGZpZWxkKTtcbiAgICB9XG4gICAgZ2V0KGZpZWxkKSB7XG4gICAgICAgIGFzc2VydE93bih0aGlzLm1lc3NhZ2UsIGZpZWxkKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB1bnNhZmVHZXQodGhpcy5tZXNzYWdlLCBmaWVsZCk7XG4gICAgICAgIHN3aXRjaCAoZmllbGQuZmllbGRLaW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gdGhpcy5saXN0cy5nZXQoZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmICghbGlzdCB8fCBsaXN0W3Vuc2FmZUxvY2FsXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0cy5zZXQoZmllbGQsIFxuICAgICAgICAgICAgICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgICAgICAgICAgICAgKGxpc3QgPSBuZXcgUmVmbGVjdExpc3RJbXBsKGZpZWxkLCB2YWx1ZSwgdGhpcy5jaGVjaykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICAgICAgbGV0IG1hcCA9IHRoaXMubWFwcy5nZXQoZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmICghbWFwIHx8IG1hcFt1bnNhZmVMb2NhbF0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwcy5zZXQoZmllbGQsIFxuICAgICAgICAgICAgICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgICAgICAgICAgICAgKG1hcCA9IG5ldyBSZWZsZWN0TWFwSW1wbChmaWVsZCwgdmFsdWUsIHRoaXMuY2hlY2spKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXA7XG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlVG9SZWZsZWN0KGZpZWxkLCB2YWx1ZSwgdGhpcy5jaGVjayk7XG4gICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gc2NhbGFyWmVyb1ZhbHVlKGZpZWxkLnNjYWxhciwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIDogbG9uZ1RvUmVmbGVjdChmaWVsZCwgdmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBmaWVsZC5lbnVtLnZhbHVlc1swXS5udW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldChmaWVsZCwgdmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0T3duKHRoaXMubWVzc2FnZSwgZmllbGQpO1xuICAgICAgICBpZiAodGhpcy5jaGVjaykge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gY2hlY2tGaWVsZChmaWVsZCwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbG9jYWw7XG4gICAgICAgIGlmIChmaWVsZC5maWVsZEtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgIGxvY2FsID0gbWVzc2FnZVRvTG9jYWwoZmllbGQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1JlZmxlY3RNYXAodmFsdWUpIHx8IGlzUmVmbGVjdExpc3QodmFsdWUpKSB7XG4gICAgICAgICAgICBsb2NhbCA9IHZhbHVlW3Vuc2FmZUxvY2FsXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvY2FsID0gbG9uZ1RvTG9jYWwoZmllbGQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB1bnNhZmVTZXQodGhpcy5tZXNzYWdlLCBmaWVsZCwgbG9jYWwpO1xuICAgIH1cbiAgICBnZXRVbmtub3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlLiR1bmtub3duO1xuICAgIH1cbiAgICBzZXRVbmtub3duKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZS4kdW5rbm93biA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE93bihvd25lciwgbWVtYmVyKSB7XG4gICAgaWYgKG1lbWJlci5wYXJlbnQudHlwZU5hbWUgIT09IG93bmVyLiR0eXBlTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRmllbGRFcnJvcihtZW1iZXIsIGBjYW5ub3QgdXNlICR7bWVtYmVyLnRvU3RyaW5nKCl9IHdpdGggbWVzc2FnZSAke293bmVyLiR0eXBlTmFtZX1gLCBcIkZvcmVpZ25GaWVsZEVycm9yXCIpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGEgUmVmbGVjdExpc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWZsZWN0TGlzdChmaWVsZCwgdW5zYWZlSW5wdXQsIFxuLyoqXG4gKiBCeSBkZWZhdWx0LCBmaWVsZCB2YWx1ZXMgYXJlIHZhbGlkYXRlZCB3aGVuIHNldHRpbmcgdGhlbS4gRm9yIGV4YW1wbGUsXG4gKiBhIHZhbHVlIGZvciBhbiB1aW50MzIgZmllbGQgbXVzdCBiZSBhIEVDTUFTY3JpcHQgTnVtYmVyID49IDAuXG4gKlxuICogV2hlbiBmaWVsZCB2YWx1ZXMgYXJlIHRydXN0ZWQsIHBlcmZvcm1hbmNlIGNhbiBiZSBpbXByb3ZlZCBieSBkaXNhYmxpbmdcbiAqIGNoZWNrcy5cbiAqL1xuY2hlY2sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIG5ldyBSZWZsZWN0TGlzdEltcGwoZmllbGQsIHVuc2FmZUlucHV0ICE9PSBudWxsICYmIHVuc2FmZUlucHV0ICE9PSB2b2lkIDAgPyB1bnNhZmVJbnB1dCA6IFtdLCBjaGVjayk7XG59XG5jbGFzcyBSZWZsZWN0TGlzdEltcGwge1xuICAgIGZpZWxkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmllbGQ7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXJyLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGQsIHVuc2FmZUlucHV0LCBjaGVjaykge1xuICAgICAgICB0aGlzLl9maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLl9hcnIgPSB0aGlzW3Vuc2FmZUxvY2FsXSA9IHVuc2FmZUlucHV0O1xuICAgICAgICB0aGlzLmNoZWNrID0gY2hlY2s7XG4gICAgfVxuICAgIGdldChpbmRleCkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fYXJyW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogbGlzdEl0ZW1Ub1JlZmxlY3QodGhpcy5fZmllbGQsIGl0ZW0sIHRoaXMuY2hlY2spO1xuICAgIH1cbiAgICBzZXQoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9hcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRmllbGRFcnJvcih0aGlzLl9maWVsZCwgYGxpc3QgaXRlbSAjJHtpbmRleCArIDF9OiBvdXQgb2YgcmFuZ2VgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVjaykge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gY2hlY2tMaXN0SXRlbSh0aGlzLl9maWVsZCwgaW5kZXgsIGl0ZW0pO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcnJbaW5kZXhdID0gbGlzdEl0ZW1Ub0xvY2FsKHRoaXMuX2ZpZWxkLCBpdGVtKTtcbiAgICB9XG4gICAgYWRkKGl0ZW0pIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGNoZWNrTGlzdEl0ZW0odGhpcy5fZmllbGQsIHRoaXMuX2Fyci5sZW5ndGgsIGl0ZW0pO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcnIucHVzaChsaXN0SXRlbVRvTG9jYWwodGhpcy5fZmllbGQsIGl0ZW0pKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2Fyci5zcGxpY2UoMCwgdGhpcy5fYXJyLmxlbmd0aCk7XG4gICAgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKTtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fyci5rZXlzKCk7XG4gICAgfVxuICAgICp2YWx1ZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLl9hcnIpIHtcbiAgICAgICAgICAgIHlpZWxkIGxpc3RJdGVtVG9SZWZsZWN0KHRoaXMuX2ZpZWxkLCBpdGVtLCB0aGlzLmNoZWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqZW50cmllcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9hcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHlpZWxkIFtpLCBsaXN0SXRlbVRvUmVmbGVjdCh0aGlzLl9maWVsZCwgdGhpcy5fYXJyW2ldLCB0aGlzLmNoZWNrKV07XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhIFJlZmxlY3RNYXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWZsZWN0TWFwKGZpZWxkLCB1bnNhZmVJbnB1dCwgXG4vKipcbiAqIEJ5IGRlZmF1bHQsIGZpZWxkIHZhbHVlcyBhcmUgdmFsaWRhdGVkIHdoZW4gc2V0dGluZyB0aGVtLiBGb3IgZXhhbXBsZSxcbiAqIGEgdmFsdWUgZm9yIGFuIHVpbnQzMiBmaWVsZCBtdXN0IGJlIGEgRUNNQVNjcmlwdCBOdW1iZXIgPj0gMC5cbiAqXG4gKiBXaGVuIGZpZWxkIHZhbHVlcyBhcmUgdHJ1c3RlZCwgcGVyZm9ybWFuY2UgY2FuIGJlIGltcHJvdmVkIGJ5IGRpc2FibGluZ1xuICogY2hlY2tzLlxuICovXG5jaGVjayA9IHRydWUpIHtcbiAgICByZXR1cm4gbmV3IFJlZmxlY3RNYXBJbXBsKGZpZWxkLCB1bnNhZmVJbnB1dCwgY2hlY2spO1xufVxuY2xhc3MgUmVmbGVjdE1hcEltcGwge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCB1bnNhZmVJbnB1dCwgY2hlY2sgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMub2JqID0gdGhpc1t1bnNhZmVMb2NhbF0gPSB1bnNhZmVJbnB1dCAhPT0gbnVsbCAmJiB1bnNhZmVJbnB1dCAhPT0gdm9pZCAwID8gdW5zYWZlSW5wdXQgOiB7fTtcbiAgICAgICAgdGhpcy5jaGVjayA9IGNoZWNrO1xuICAgICAgICB0aGlzLl9maWVsZCA9IGZpZWxkO1xuICAgIH1cbiAgICBmaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jaGVjaykge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gY2hlY2tNYXBFbnRyeSh0aGlzLl9maWVsZCwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JqW21hcEtleVRvTG9jYWwoa2V5KV0gPSBtYXBWYWx1ZVRvTG9jYWwodGhpcy5fZmllbGQsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgY29uc3QgayA9IG1hcEtleVRvTG9jYWwoa2V5KTtcbiAgICAgICAgY29uc3QgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub2JqLCBrKTtcbiAgICAgICAgaWYgKGhhcykge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXM7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLm9iaikpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9ialtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMub2JqW21hcEtleVRvTG9jYWwoa2V5KV07XG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsID0gbWFwVmFsdWVUb1JlZmxlY3QodGhpcy5fZmllbGQsIHZhbCwgdGhpcy5jaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub2JqLCBtYXBLZXlUb0xvY2FsKGtleSkpO1xuICAgIH1cbiAgICAqa2V5cygpIHtcbiAgICAgICAgZm9yIChjb25zdCBvYmpLZXkgb2YgT2JqZWN0LmtleXModGhpcy5vYmopKSB7XG4gICAgICAgICAgICB5aWVsZCBtYXBLZXlUb1JlZmxlY3Qob2JqS2V5LCB0aGlzLl9maWVsZC5tYXBLZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgICplbnRyaWVzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IG9iakVudHJ5IG9mIE9iamVjdC5lbnRyaWVzKHRoaXMub2JqKSkge1xuICAgICAgICAgICAgeWllbGQgW1xuICAgICAgICAgICAgICAgIG1hcEtleVRvUmVmbGVjdChvYmpFbnRyeVswXSwgdGhpcy5fZmllbGQubWFwS2V5KSxcbiAgICAgICAgICAgICAgICBtYXBWYWx1ZVRvUmVmbGVjdCh0aGlzLl9maWVsZCwgb2JqRW50cnlbMV0sIHRoaXMuY2hlY2spLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcygpO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMub2JqKS5sZW5ndGg7XG4gICAgfVxuICAgICp2YWx1ZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIE9iamVjdC52YWx1ZXModGhpcy5vYmopKSB7XG4gICAgICAgICAgICB5aWVsZCBtYXBWYWx1ZVRvUmVmbGVjdCh0aGlzLl9maWVsZCwgdmFsLCB0aGlzLmNoZWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgZm9yIChjb25zdCBtYXBFbnRyeSBvZiB0aGlzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2tmbi5jYWxsKHRoaXNBcmcsIG1hcEVudHJ5WzFdLCBtYXBFbnRyeVswXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBtZXNzYWdlVG9Mb2NhbChmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoIWlzUmVmbGVjdE1lc3NhZ2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzV3JhcHBlcih2YWx1ZS5tZXNzYWdlKSAmJlxuICAgICAgICAhZmllbGQub25lb2YgJiZcbiAgICAgICAgZmllbGQuZmllbGRLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgIC8vIFR5cGVzIGZyb20gZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIGFyZSB1bndyYXBwZWQgd2hlbiB1c2VkIGluXG4gICAgICAgIC8vIGEgc2luZ3VsYXIgZmllbGQgdGhhdCBpcyBub3QgcGFydCBvZiBhIG9uZW9mIGdyb3VwLlxuICAgICAgICByZXR1cm4gdmFsdWUubWVzc2FnZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmRlc2MudHlwZU5hbWUgPT0gXCJnb29nbGUucHJvdG9idWYuU3RydWN0XCIgJiZcbiAgICAgICAgZmllbGQucGFyZW50LnR5cGVOYW1lICE9IFwiZ29vZ2xlLnByb3RvYnVmLlZhbHVlXCIpIHtcbiAgICAgICAgLy8gZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBpcyByZXByZXNlbnRlZCB3aXRoIEpzb25PYmplY3Qgd2hlbiB1c2VkIGluIGFcbiAgICAgICAgLy8gZmllbGQsIGV4Y2VwdCB3aGVuIHVzZWQgaW4gZ29vZ2xlLnByb3RvYnVmLlZhbHVlLlxuICAgICAgICByZXR1cm4gd2t0U3RydWN0VG9Mb2NhbCh2YWx1ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLm1lc3NhZ2U7XG59XG5mdW5jdGlvbiBtZXNzYWdlVG9SZWZsZWN0KGZpZWxkLCB2YWx1ZSwgY2hlY2spIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXNXcmFwcGVyRGVzYyhmaWVsZC5tZXNzYWdlKSAmJlxuICAgICAgICAgICAgIWZpZWxkLm9uZW9mICYmXG4gICAgICAgICAgICBmaWVsZC5maWVsZEtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgIC8vIFR5cGVzIGZyb20gZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIGFyZSB1bndyYXBwZWQgd2hlbiB1c2VkIGluXG4gICAgICAgICAgICAvLyBhIHNpbmd1bGFyIGZpZWxkIHRoYXQgaXMgbm90IHBhcnQgb2YgYSBvbmVvZiBncm91cC5cbiAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgICR0eXBlTmFtZTogZmllbGQubWVzc2FnZS50eXBlTmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbG9uZ1RvUmVmbGVjdChmaWVsZC5tZXNzYWdlLmZpZWxkc1swXSwgdmFsdWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaWVsZC5tZXNzYWdlLnR5cGVOYW1lID09IFwiZ29vZ2xlLnByb3RvYnVmLlN0cnVjdFwiICYmXG4gICAgICAgICAgICBmaWVsZC5wYXJlbnQudHlwZU5hbWUgIT0gXCJnb29nbGUucHJvdG9idWYuVmFsdWVcIiAmJlxuICAgICAgICAgICAgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAvLyBnb29nbGUucHJvdG9idWYuU3RydWN0IGlzIHJlcHJlc2VudGVkIHdpdGggSnNvbk9iamVjdCB3aGVuIHVzZWQgaW4gYVxuICAgICAgICAgICAgLy8gZmllbGQsIGV4Y2VwdCB3aGVuIHVzZWQgaW4gZ29vZ2xlLnByb3RvYnVmLlZhbHVlLlxuICAgICAgICAgICAgdmFsdWUgPSB3a3RTdHJ1Y3RUb1JlZmxlY3QodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVmbGVjdE1lc3NhZ2VJbXBsKGZpZWxkLm1lc3NhZ2UsIHZhbHVlLCBjaGVjayk7XG59XG5mdW5jdGlvbiBsaXN0SXRlbVRvTG9jYWwoZmllbGQsIHZhbHVlKSB7XG4gICAgaWYgKGZpZWxkLmxpc3RLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlVG9Mb2NhbChmaWVsZCwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ1RvTG9jYWwoZmllbGQsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGxpc3RJdGVtVG9SZWZsZWN0KGZpZWxkLCB2YWx1ZSwgY2hlY2spIHtcbiAgICBpZiAoZmllbGQubGlzdEtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUb1JlZmxlY3QoZmllbGQsIHZhbHVlLCBjaGVjayk7XG4gICAgfVxuICAgIHJldHVybiBsb25nVG9SZWZsZWN0KGZpZWxkLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBtYXBWYWx1ZVRvTG9jYWwoZmllbGQsIHZhbHVlKSB7XG4gICAgaWYgKGZpZWxkLm1hcEtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUb0xvY2FsKGZpZWxkLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBsb25nVG9Mb2NhbChmaWVsZCwgdmFsdWUpO1xufVxuZnVuY3Rpb24gbWFwVmFsdWVUb1JlZmxlY3QoZmllbGQsIHZhbHVlLCBjaGVjaykge1xuICAgIGlmIChmaWVsZC5tYXBLaW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlVG9SZWZsZWN0KGZpZWxkLCB2YWx1ZSwgY2hlY2spO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBtYXBLZXlUb0xvY2FsKGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGtleSA9PSBcIm51bWJlclwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgbWFwIGtleSAoYW55IHNjYWxhciB2YWx1ZSBleGNlcHQgZmxvYXQsIGRvdWJsZSwgb3IgYnl0ZXMpIGZyb20gaXRzXG4gKiByZXByZXNlbnRhdGlvbiBpbiBhIG1lc3NhZ2UgKHN0cmluZyBvciBudW1iZXIsIHRoZSBvbmx5IHBvc3NpYmxlIG9iamVjdCBrZXlcbiAqIHR5cGVzKSB0byB0aGUgY2xvc2VzdCBwb3NzaWJsZSB0eXBlIGluIEVDTUFTY3JpcHQuXG4gKi9cbmZ1bmN0aW9uIG1hcEtleVRvUmVmbGVjdChrZXksIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNUUklORzpcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjoge1xuICAgICAgICAgICAgY29uc3QgbiA9IE51bWJlci5wYXJzZUludChrZXkpO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZShuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm90b0ludDY0LnVQYXJzZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gSU5UNjQsIFNGSVhFRDY0LCBTSU5UNjRcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvSW50NjQucGFyc2Uoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYikge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGxvbmdUb1JlZmxlY3QoZmllbGQsIHZhbHVlKSB7XG4gICAgc3dpdGNoIChmaWVsZC5zY2FsYXIpIHtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UNjQ6XG4gICAgICAgICAgICBpZiAoXCJsb25nQXNTdHJpbmdcIiBpbiBmaWVsZCAmJlxuICAgICAgICAgICAgICAgIGZpZWxkLmxvbmdBc1N0cmluZyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm90b0ludDY0LnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgICAgIGlmIChcImxvbmdBc1N0cmluZ1wiIGluIGZpZWxkICYmXG4gICAgICAgICAgICAgICAgZmllbGQubG9uZ0FzU3RyaW5nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3RvSW50NjQudVBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBsb25nVG9Mb2NhbChmaWVsZCwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKGZpZWxkLnNjYWxhcikge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UNjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgICAgIGlmIChcImxvbmdBc1N0cmluZ1wiIGluIGZpZWxkICYmIGZpZWxkLmxvbmdBc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm90b0ludDY0LnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgICAgIGlmIChcImxvbmdBc1N0cmluZ1wiIGluIGZpZWxkICYmIGZpZWxkLmxvbmdBc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm90b0ludDY0LnVQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd2t0U3RydWN0VG9SZWZsZWN0KGpzb24pIHtcbiAgICBjb25zdCBzdHJ1Y3QgPSB7XG4gICAgICAgICR0eXBlTmFtZTogXCJnb29nbGUucHJvdG9idWYuU3RydWN0XCIsXG4gICAgICAgIGZpZWxkczoge30sXG4gICAgfTtcbiAgICBpZiAoaXNPYmplY3QoanNvbikpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbikpIHtcbiAgICAgICAgICAgIHN0cnVjdC5maWVsZHNba10gPSB3a3RWYWx1ZVRvUmVmbGVjdCh2KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RydWN0O1xufVxuZnVuY3Rpb24gd2t0U3RydWN0VG9Mb2NhbCh2YWwpIHtcbiAgICBjb25zdCBqc29uID0ge307XG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModmFsLmZpZWxkcykpIHtcbiAgICAgICAganNvbltrXSA9IHdrdFZhbHVlVG9Mb2NhbCh2KTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG59XG5mdW5jdGlvbiB3a3RWYWx1ZVRvTG9jYWwodmFsKSB7XG4gICAgc3dpdGNoICh2YWwua2luZC5jYXNlKSB7XG4gICAgICAgIGNhc2UgXCJzdHJ1Y3RWYWx1ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHdrdFN0cnVjdFRvTG9jYWwodmFsLmtpbmQudmFsdWUpO1xuICAgICAgICBjYXNlIFwibGlzdFZhbHVlXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsLmtpbmQudmFsdWUudmFsdWVzLm1hcCh3a3RWYWx1ZVRvTG9jYWwpO1xuICAgICAgICBjYXNlIFwibnVsbFZhbHVlXCI6XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsLmtpbmQudmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gd2t0VmFsdWVUb1JlZmxlY3QoanNvbikge1xuICAgIGNvbnN0IHZhbHVlID0ge1xuICAgICAgICAkdHlwZU5hbWU6IFwiZ29vZ2xlLnByb3RvYnVmLlZhbHVlXCIsXG4gICAgICAgIGtpbmQ6IHsgY2FzZTogdW5kZWZpbmVkIH0sXG4gICAgfTtcbiAgICBzd2l0Y2ggKHR5cGVvZiBqc29uKSB7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGpzb24gfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICB2YWx1ZS5raW5kID0geyBjYXNlOiBcInN0cmluZ1ZhbHVlXCIsIHZhbHVlOiBqc29uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwiYm9vbFZhbHVlXCIsIHZhbHVlOiBqc29uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBudWxsVmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwibnVsbFZhbHVlXCIsIHZhbHVlOiBudWxsVmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0VmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgICR0eXBlTmFtZTogXCJnb29nbGUucHJvdG9idWYuTGlzdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YganNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFZhbHVlLnZhbHVlcy5wdXNoKHdrdFZhbHVlVG9SZWZsZWN0KGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZS5raW5kID0ge1xuICAgICAgICAgICAgICAgICAgICBjYXNlOiBcImxpc3RWYWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbGlzdFZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5raW5kID0ge1xuICAgICAgICAgICAgICAgICAgICBjYXNlOiBcInN0cnVjdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB3a3RTdHJ1Y3RUb1JlZmxlY3QoanNvbiksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IEJpbmFyeVdyaXRlciwgV2lyZVR5cGUgfSBmcm9tIFwiLi93aXJlL2JpbmFyeS1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gXCIuL2Rlc2NyaXB0b3JzLmpzXCI7XG4vLyBib290c3RyYXAtaW5qZWN0IGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2UuTEVHQUNZX1JFUVVJUkVEOiBjb25zdCAkbmFtZTogRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgTEVHQUNZX1JFUVVJUkVEID0gMztcbi8vIERlZmF1bHQgb3B0aW9ucyBmb3Igc2VyaWFsaXppbmcgYmluYXJ5IGRhdGEuXG5jb25zdCB3cml0ZURlZmF1bHRzID0ge1xuICAgIHdyaXRlVW5rbm93bkZpZWxkczogdHJ1ZSxcbn07XG5mdW5jdGlvbiBtYWtlV3JpdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgd3JpdGVEZWZhdWx0cyksIG9wdGlvbnMpIDogd3JpdGVEZWZhdWx0cztcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0JpbmFyeShzY2hlbWEsIG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gd3JpdGVGaWVsZHMobmV3IEJpbmFyeVdyaXRlcigpLCBtYWtlV3JpdGVPcHRpb25zKG9wdGlvbnMpLCByZWZsZWN0KHNjaGVtYSwgbWVzc2FnZSkpLmZpbmlzaCgpO1xufVxuZnVuY3Rpb24gd3JpdGVGaWVsZHMod3JpdGVyLCBvcHRzLCBtc2cpIHtcbiAgICB2YXIgX2E7XG4gICAgZm9yIChjb25zdCBmIG9mIG1zZy5zb3J0ZWRGaWVsZHMpIHtcbiAgICAgICAgaWYgKCFtc2cuaXNTZXQoZikpIHtcbiAgICAgICAgICAgIGlmIChmLnByZXNlbmNlID09IExFR0FDWV9SRVFVSVJFRCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSAke2Z9IHRvIGJpbmFyeTogcmVxdWlyZWQgZmllbGQgbm90IHNldGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVGaWVsZCh3cml0ZXIsIG9wdHMsIG1zZywgZik7XG4gICAgfVxuICAgIGlmIChvcHRzLndyaXRlVW5rbm93bkZpZWxkcykge1xuICAgICAgICBmb3IgKGNvbnN0IHsgbm8sIHdpcmVUeXBlLCBkYXRhIH0gb2YgKF9hID0gbXNnLmdldFVua25vd24oKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pIHtcbiAgICAgICAgICAgIHdyaXRlci50YWcobm8sIHdpcmVUeXBlKS5yYXcoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmllbGQod3JpdGVyLCBvcHRzLCBtc2csIGZpZWxkKSB7XG4gICAgdmFyIF9hO1xuICAgIHN3aXRjaCAoZmllbGQuZmllbGRLaW5kKSB7XG4gICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgIHdyaXRlU2NhbGFyKHdyaXRlciwgbXNnLmRlc2MudHlwZU5hbWUsIGZpZWxkLm5hbWUsIChfYSA9IGZpZWxkLnNjYWxhcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogU2NhbGFyVHlwZS5JTlQzMiwgZmllbGQubnVtYmVyLCBtc2cuZ2V0KGZpZWxkKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxpc3RcIjpcbiAgICAgICAgICAgIHdyaXRlTGlzdEZpZWxkKHdyaXRlciwgb3B0cywgZmllbGQsIG1zZy5nZXQoZmllbGQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgd3JpdGVNZXNzYWdlRmllbGQod3JpdGVyLCBvcHRzLCBmaWVsZCwgbXNnLmdldChmaWVsZCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBtc2cuZ2V0KGZpZWxkKSkge1xuICAgICAgICAgICAgICAgIHdyaXRlTWFwRW50cnkod3JpdGVyLCBvcHRzLCBmaWVsZCwga2V5LCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuZnVuY3Rpb24gd3JpdGVTY2FsYXIod3JpdGVyLCBtc2dOYW1lLCBmaWVsZE5hbWUsIHNjYWxhclR5cGUsIGZpZWxkTm8sIHZhbHVlKSB7XG4gICAgd3JpdGVTY2FsYXJWYWx1ZSh3cml0ZXIudGFnKGZpZWxkTm8sIHdyaXRlVHlwZU9mU2NhbGFyKHNjYWxhclR5cGUpKSwgbXNnTmFtZSwgZmllbGROYW1lLCBzY2FsYXJUeXBlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiB3cml0ZU1lc3NhZ2VGaWVsZCh3cml0ZXIsIG9wdHMsIGZpZWxkLCBtZXNzYWdlKSB7XG4gICAgaWYgKGZpZWxkLmRlbGltaXRlZEVuY29kaW5nKSB7XG4gICAgICAgIHdyaXRlRmllbGRzKHdyaXRlci50YWcoZmllbGQubnVtYmVyLCBXaXJlVHlwZS5TdGFydEdyb3VwKSwgb3B0cywgbWVzc2FnZSkudGFnKGZpZWxkLm51bWJlciwgV2lyZVR5cGUuRW5kR3JvdXApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd3JpdGVGaWVsZHMod3JpdGVyLnRhZyhmaWVsZC5udW1iZXIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRzLCBtZXNzYWdlKS5qb2luKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gd3JpdGVMaXN0RmllbGQod3JpdGVyLCBvcHRzLCBmaWVsZCwgbGlzdCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoZmllbGQubGlzdEtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgICAgICAgIHdyaXRlTWVzc2FnZUZpZWxkKHdyaXRlciwgb3B0cywgZmllbGQsIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGFyVHlwZSA9IChfYSA9IGZpZWxkLnNjYWxhcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogU2NhbGFyVHlwZS5JTlQzMjtcbiAgICBpZiAoZmllbGQucGFja2VkKSB7XG4gICAgICAgIGlmICghbGlzdC5zaXplKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVyLnRhZyhmaWVsZC5udW1iZXIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgICAgICAgd3JpdGVTY2FsYXJWYWx1ZSh3cml0ZXIsIGZpZWxkLnBhcmVudC50eXBlTmFtZSwgZmllbGQubmFtZSwgc2NhbGFyVHlwZSwgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVyLmpvaW4oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIGZpZWxkLnBhcmVudC50eXBlTmFtZSwgZmllbGQubmFtZSwgc2NhbGFyVHlwZSwgZmllbGQubnVtYmVyLCBpdGVtKTtcbiAgICB9XG59XG5mdW5jdGlvbiB3cml0ZU1hcEVudHJ5KHdyaXRlciwgb3B0cywgZmllbGQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgd3JpdGVyLnRhZyhmaWVsZC5udW1iZXIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpO1xuICAgIC8vIHdyaXRlIGtleSwgZXhwZWN0aW5nIGtleSBmaWVsZCBudW1iZXIgPSAxXG4gICAgd3JpdGVTY2FsYXIod3JpdGVyLCBmaWVsZC5wYXJlbnQudHlwZU5hbWUsIGZpZWxkLm5hbWUsIGZpZWxkLm1hcEtleSwgMSwga2V5KTtcbiAgICAvLyB3cml0ZSB2YWx1ZSwgZXhwZWN0aW5nIHZhbHVlIGZpZWxkIG51bWJlciA9IDJcbiAgICBzd2l0Y2ggKGZpZWxkLm1hcEtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgd3JpdGVTY2FsYXIod3JpdGVyLCBmaWVsZC5wYXJlbnQudHlwZU5hbWUsIGZpZWxkLm5hbWUsIChfYSA9IGZpZWxkLnNjYWxhcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogU2NhbGFyVHlwZS5JTlQzMiwgMiwgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICB3cml0ZUZpZWxkcyh3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRzLCB2YWx1ZSkuam9pbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHdyaXRlci5qb2luKCk7XG59XG5mdW5jdGlvbiB3cml0ZVNjYWxhclZhbHVlKHdyaXRlciwgbXNnTmFtZSwgZmllbGROYW1lLCB0eXBlLCB2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNUUklORzpcbiAgICAgICAgICAgICAgICB3cml0ZXIuc3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CT09MOlxuICAgICAgICAgICAgICAgIHdyaXRlci5ib29sKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyVHlwZS5ET1VCTEU6XG4gICAgICAgICAgICAgICAgd3JpdGVyLmRvdWJsZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICAgICAgd3JpdGVyLmZsb2F0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgICAgICAgICB3cml0ZXIuaW50MzIodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICAgICAgICAgIHdyaXRlci5pbnQ2NCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50NjQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgICAgICAgICAgd3JpdGVyLmZpeGVkNjQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJZVEVTOlxuICAgICAgICAgICAgICAgIHdyaXRlci5ieXRlcyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgICAgICAgICB3cml0ZXIuZml4ZWQzMih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVEMzI6XG4gICAgICAgICAgICAgICAgd3JpdGVyLnNmaXhlZDMyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQ2NDpcbiAgICAgICAgICAgICAgICB3cml0ZXIuc2ZpeGVkNjQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgICAgICAgICB3cml0ZXIuc2ludDY0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UMzI6XG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDMyOlxuICAgICAgICAgICAgICAgIHdyaXRlci5zaW50MzIodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSBmaWVsZCAke21zZ05hbWV9LiR7ZmllbGROYW1lfSB0byBiaW5hcnk6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxufVxuZnVuY3Rpb24gd3JpdGVUeXBlT2ZTY2FsYXIodHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIFdpcmVUeXBlLkJpdDY0O1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gV2lyZVR5cGUuQml0MzI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gV2lyZVR5cGUuVmFyaW50O1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gXCIuL2Rlc2NyaXB0b3JzLmpzXCI7XG5pbXBvcnQgeyByZWZsZWN0IH0gZnJvbSBcIi4vcmVmbGVjdC9yZWZsZWN0LmpzXCI7XG5pbXBvcnQgeyBpc1JlZmxlY3RNZXNzYWdlIH0gZnJvbSBcIi4vcmVmbGVjdC9ndWFyZC5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgYSBtZXNzYWdlLCBpbmNsdWRpbmcgZXh0ZW5zaW9ucyBhbmQgdW5rbm93biBmaWVsZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShzY2hlbWEsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gY2xvbmVSZWZsZWN0KHJlZmxlY3Qoc2NoZW1hLCBtZXNzYWdlKSkubWVzc2FnZTtcbn1cbmZ1bmN0aW9uIGNsb25lUmVmbGVjdChpKSB7XG4gICAgY29uc3QgbyA9IHJlZmxlY3QoaS5kZXNjKTtcbiAgICBmb3IgKGNvbnN0IGYgb2YgaS5maWVsZHMpIHtcbiAgICAgICAgaWYgKCFpLmlzU2V0KGYpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGYuZmllbGRLaW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBvLmdldChmKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaS5nZXQoZikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5hZGQoY2xvbmVTaW5ndWxhcihmLCBpdGVtKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IG8uZ2V0KGYpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgaS5nZXQoZikuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcC5zZXQoZW50cnlbMF0sIGNsb25lU2luZ3VsYXIoZiwgZW50cnlbMV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgby5zZXQoZiwgY2xvbmVTaW5ndWxhcihmLCBpLmdldChmKSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHVua25vd24gPSBpLmdldFVua25vd24oKTtcbiAgICBpZiAodW5rbm93biAmJiB1bmtub3duLmxlbmd0aCA+IDApIHtcbiAgICAgICAgby5zZXRVbmtub3duKFsuLi51bmtub3duXSk7XG4gICAgfVxuICAgIHJldHVybiBvO1xufVxuZnVuY3Rpb24gY2xvbmVTaW5ndWxhcihmaWVsZCwgdmFsdWUpIHtcbiAgICBpZiAoZmllbGQubWVzc2FnZSAhPT0gdW5kZWZpbmVkICYmIGlzUmVmbGVjdE1lc3NhZ2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjbG9uZVJlZmxlY3QodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoZmllbGQuc2NhbGFyID09IFNjYWxhclR5cGUuQllURVMgJiYgdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVCBjYW5ub3QgZXh0ZW5kIFVpbnQ4QXJyYXkgaW4gcHJhY3RpY2VcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBIeWRyYXRlIGEgbWVzc2FnZSBkZXNjcmlwdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXNzYWdlRGVzYyhmaWxlLCBwYXRoLCAuLi5wYXRocykge1xuICAgIHJldHVybiBwYXRocy5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MubmVzdGVkTWVzc2FnZXNbY3VyXSwgZmlsZS5tZXNzYWdlc1twYXRoXSk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogSHlkcmF0ZSBhbiBlbnVtIGRlc2NyaXB0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVudW1EZXNjKGZpbGUsIHBhdGgsIC4uLnBhdGhzKSB7XG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBmaWxlLmVudW1zW3BhdGhdO1xuICAgIH1cbiAgICBjb25zdCBlID0gcGF0aHMucG9wKCk7IC8vIHdlIGNoZWNrZWQgbGVuZ3RoIGFib3ZlXG4gICAgcmV0dXJuIHBhdGhzLnJlZHVjZSgoYWNjLCBjdXIpID0+IGFjYy5uZXN0ZWRNZXNzYWdlc1tjdXJdLCBmaWxlLm1lc3NhZ2VzW3BhdGhdKS5uZXN0ZWRFbnVtc1tlXTtcbn1cbi8qKlxuICogQ29uc3RydWN0IGEgVHlwZVNjcmlwdCBlbnVtIG9iamVjdCBhdCBydW50aW1lIGZyb20gYSBkZXNjcmlwdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHNFbnVtKGRlc2MpIHtcbiAgICBjb25zdCBlbnVtT2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkZXNjLnZhbHVlcykge1xuICAgICAgICBlbnVtT2JqZWN0W3ZhbHVlLmxvY2FsTmFtZV0gPSB2YWx1ZS5udW1iZXI7XG4gICAgICAgIGVudW1PYmplY3RbdmFsdWUubnVtYmVyXSA9IHZhbHVlLmxvY2FsTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1PYmplY3Q7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGJvb3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29kZWdlbnYyL2Jvb3QuanNcIjtcbmltcG9ydCB7IG1lc3NhZ2VEZXNjIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvZGVnZW52Mi9tZXNzYWdlLmpzXCI7XG5pbXBvcnQgeyBlbnVtRGVzYyB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb2RlZ2VudjIvZW51bS5qc1wiO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGZpbGUgZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8uXG4gKi9cbmV4cG9ydCBjb25zdCBmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yID0gLypAX19QVVJFX18qLyBib290KHsgXCJuYW1lXCI6IFwiZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG9cIiwgXCJwYWNrYWdlXCI6IFwiZ29vZ2xlLnByb3RvYnVmXCIsIFwibWVzc2FnZVR5cGVcIjogW3sgXCJuYW1lXCI6IFwiRmlsZURlc2NyaXB0b3JTZXRcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJmaWxlXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvXCIgfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiA1MzYwMDAwMDAsIFwiZW5kXCI6IDUzNjAwMDAwMSB9XSB9LCB7IFwibmFtZVwiOiBcIkZpbGVEZXNjcmlwdG9yUHJvdG9cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJuYW1lXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJwYWNrYWdlXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJkZXBlbmRlbmN5XCIsIFwibnVtYmVyXCI6IDMsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDMgfSwgeyBcIm5hbWVcIjogXCJwdWJsaWNfZGVwZW5kZW5jeVwiLCBcIm51bWJlclwiOiAxMCwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMyB9LCB7IFwibmFtZVwiOiBcIndlYWtfZGVwZW5kZW5jeVwiLCBcIm51bWJlclwiOiAxMSwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMyB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbl9kZXBlbmRlbmN5XCIsIFwibnVtYmVyXCI6IDE1LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAzIH0sIHsgXCJuYW1lXCI6IFwibWVzc2FnZV90eXBlXCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG9cIiB9LCB7IFwibmFtZVwiOiBcImVudW1fdHlwZVwiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b1wiIH0sIHsgXCJuYW1lXCI6IFwic2VydmljZVwiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90b1wiIH0sIHsgXCJuYW1lXCI6IFwiZXh0ZW5zaW9uXCIsIFwibnVtYmVyXCI6IDcsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90b1wiIH0sIHsgXCJuYW1lXCI6IFwib3B0aW9uc1wiLCBcIm51bWJlclwiOiA4LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNcIiB9LCB7IFwibmFtZVwiOiBcInNvdXJjZV9jb2RlX2luZm9cIiwgXCJudW1iZXJcIjogOSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvXCIgfSwgeyBcIm5hbWVcIjogXCJzeW50YXhcIiwgXCJudW1iZXJcIjogMTIsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJlZGl0aW9uXCIsIFwibnVtYmVyXCI6IDE0LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRWRpdGlvblwiIH1dIH0sIHsgXCJuYW1lXCI6IFwiRGVzY3JpcHRvclByb3RvXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwibmFtZVwiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZmllbGRcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvXCIgfSwgeyBcIm5hbWVcIjogXCJleHRlbnNpb25cIiwgXCJudW1iZXJcIjogNiwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvXCIgfSwgeyBcIm5hbWVcIjogXCJuZXN0ZWRfdHlwZVwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvXCIgfSwgeyBcIm5hbWVcIjogXCJlbnVtX3R5cGVcIiwgXCJudW1iZXJcIjogNCwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG9cIiB9LCB7IFwibmFtZVwiOiBcImV4dGVuc2lvbl9yYW5nZVwiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlXCIgfSwgeyBcIm5hbWVcIjogXCJvbmVvZl9kZWNsXCIsIFwibnVtYmVyXCI6IDgsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b1wiIH0sIHsgXCJuYW1lXCI6IFwib3B0aW9uc1wiLCBcIm51bWJlclwiOiA3LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnNcIiB9LCB7IFwibmFtZVwiOiBcInJlc2VydmVkX3JhbmdlXCIsIFwibnVtYmVyXCI6IDksIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZVwiIH0sIHsgXCJuYW1lXCI6IFwicmVzZXJ2ZWRfbmFtZVwiLCBcIm51bWJlclwiOiAxMCwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMyB9LCB7IFwibmFtZVwiOiBcInZpc2liaWxpdHlcIiwgXCJudW1iZXJcIjogMTEsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5TeW1ib2xWaXNpYmlsaXR5XCIgfV0sIFwibmVzdGVkVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJFeHRlbnNpb25SYW5nZVwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcInN0YXJ0XCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA1LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJlbmRcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbnNcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9uc1wiIH1dIH0sIHsgXCJuYW1lXCI6IFwiUmVzZXJ2ZWRSYW5nZVwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcInN0YXJ0XCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA1LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJlbmRcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9XSB9XSB9LCB7IFwibmFtZVwiOiBcIkV4dGVuc2lvblJhbmdlT3B0aW9uc1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIFwibnVtYmVyXCI6IDk5OSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25cIiB9LCB7IFwibmFtZVwiOiBcImRlY2xhcmF0aW9uXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuRGVjbGFyYXRpb25cIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMiB9IH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogNTAsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCIgfSwgeyBcIm5hbWVcIjogXCJ2ZXJpZmljYXRpb25cIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5WZXJpZmljYXRpb25TdGF0ZVwiLCBcImRlZmF1bHRWYWx1ZVwiOiBcIlVOVkVSSUZJRURcIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMiB9IH1dLCBcIm5lc3RlZFR5cGVcIjogW3sgXCJuYW1lXCI6IFwiRGVjbGFyYXRpb25cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJudW1iZXJcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImZ1bGxfbmFtZVwiLCBcIm51bWJlclwiOiAyLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwidHlwZVwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwicmVzZXJ2ZWRcIiwgXCJudW1iZXJcIjogNSwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcInJlcGVhdGVkXCIsIFwibnVtYmVyXCI6IDYsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEgfV0gfV0sIFwiZW51bVR5cGVcIjogW3sgXCJuYW1lXCI6IFwiVmVyaWZpY2F0aW9uU3RhdGVcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJERUNMQVJBVElPTlwiLCBcIm51bWJlclwiOiAwIH0sIHsgXCJuYW1lXCI6IFwiVU5WRVJJRklFRFwiLCBcIm51bWJlclwiOiAxIH1dIH1dLCBcImV4dGVuc2lvblJhbmdlXCI6IFt7IFwic3RhcnRcIjogMTAwMCwgXCJlbmRcIjogNTM2ODcwOTEyIH1dIH0sIHsgXCJuYW1lXCI6IFwiRmllbGREZXNjcmlwdG9yUHJvdG9cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJuYW1lXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJudW1iZXJcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImxhYmVsXCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbFwiIH0sIHsgXCJuYW1lXCI6IFwidHlwZVwiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZVwiIH0sIHsgXCJuYW1lXCI6IFwidHlwZV9uYW1lXCIsIFwibnVtYmVyXCI6IDYsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJleHRlbmRlZVwiLCBcIm51bWJlclwiOiAyLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZGVmYXVsdF92YWx1ZVwiLCBcIm51bWJlclwiOiA3LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwib25lb2ZfaW5kZXhcIiwgXCJudW1iZXJcIjogOSwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImpzb25fbmFtZVwiLCBcIm51bWJlclwiOiAxMCwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbnNcIiwgXCJudW1iZXJcIjogOCwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9uc1wiIH0sIHsgXCJuYW1lXCI6IFwicHJvdG8zX29wdGlvbmFsXCIsIFwibnVtYmVyXCI6IDE3LCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxIH1dLCBcImVudW1UeXBlXCI6IFt7IFwibmFtZVwiOiBcIlR5cGVcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJUWVBFX0RPVUJMRVwiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9GTE9BVFwiLCBcIm51bWJlclwiOiAyIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9JTlQ2NFwiLCBcIm51bWJlclwiOiAzIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9VSU5UNjRcIiwgXCJudW1iZXJcIjogNCB9LCB7IFwibmFtZVwiOiBcIlRZUEVfSU5UMzJcIiwgXCJudW1iZXJcIjogNSB9LCB7IFwibmFtZVwiOiBcIlRZUEVfRklYRUQ2NFwiLCBcIm51bWJlclwiOiA2IH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9GSVhFRDMyXCIsIFwibnVtYmVyXCI6IDcgfSwgeyBcIm5hbWVcIjogXCJUWVBFX0JPT0xcIiwgXCJudW1iZXJcIjogOCB9LCB7IFwibmFtZVwiOiBcIlRZUEVfU1RSSU5HXCIsIFwibnVtYmVyXCI6IDkgfSwgeyBcIm5hbWVcIjogXCJUWVBFX0dST1VQXCIsIFwibnVtYmVyXCI6IDEwIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9NRVNTQUdFXCIsIFwibnVtYmVyXCI6IDExIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9CWVRFU1wiLCBcIm51bWJlclwiOiAxMiB9LCB7IFwibmFtZVwiOiBcIlRZUEVfVUlOVDMyXCIsIFwibnVtYmVyXCI6IDEzIH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9FTlVNXCIsIFwibnVtYmVyXCI6IDE0IH0sIHsgXCJuYW1lXCI6IFwiVFlQRV9TRklYRUQzMlwiLCBcIm51bWJlclwiOiAxNSB9LCB7IFwibmFtZVwiOiBcIlRZUEVfU0ZJWEVENjRcIiwgXCJudW1iZXJcIjogMTYgfSwgeyBcIm5hbWVcIjogXCJUWVBFX1NJTlQzMlwiLCBcIm51bWJlclwiOiAxNyB9LCB7IFwibmFtZVwiOiBcIlRZUEVfU0lOVDY0XCIsIFwibnVtYmVyXCI6IDE4IH1dIH0sIHsgXCJuYW1lXCI6IFwiTGFiZWxcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJMQUJFTF9PUFRJT05BTFwiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiTEFCRUxfUkVQRUFURURcIiwgXCJudW1iZXJcIjogMyB9LCB7IFwibmFtZVwiOiBcIkxBQkVMX1JFUVVJUkVEXCIsIFwibnVtYmVyXCI6IDIgfV0gfV0gfSwgeyBcIm5hbWVcIjogXCJPbmVvZkRlc2NyaXB0b3JQcm90b1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcIm5hbWVcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbnNcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9uc1wiIH1dIH0sIHsgXCJuYW1lXCI6IFwiRW51bURlc2NyaXB0b3JQcm90b1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcIm5hbWVcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcInZhbHVlXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9cIiB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbnNcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zXCIgfSwgeyBcIm5hbWVcIjogXCJyZXNlcnZlZF9yYW5nZVwiLCBcIm51bWJlclwiOiA0LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZVwiIH0sIHsgXCJuYW1lXCI6IFwicmVzZXJ2ZWRfbmFtZVwiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAzIH0sIHsgXCJuYW1lXCI6IFwidmlzaWJpbGl0eVwiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuU3ltYm9sVmlzaWJpbGl0eVwiIH1dLCBcIm5lc3RlZFR5cGVcIjogW3sgXCJuYW1lXCI6IFwiRW51bVJlc2VydmVkUmFuZ2VcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJzdGFydFwiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogNSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZW5kXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiA1LCBcImxhYmVsXCI6IDEgfV0gfV0gfSwgeyBcIm5hbWVcIjogXCJFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJuYW1lXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJudW1iZXJcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcIm9wdGlvbnNcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnNcIiB9XSB9LCB7IFwibmFtZVwiOiBcIlNlcnZpY2VEZXNjcmlwdG9yUHJvdG9cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJuYW1lXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJtZXRob2RcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90b1wiIH0sIHsgXCJuYW1lXCI6IFwib3B0aW9uc1wiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnNcIiB9XSB9LCB7IFwibmFtZVwiOiBcIk1ldGhvZERlc2NyaXB0b3JQcm90b1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcIm5hbWVcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImlucHV0X3R5cGVcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcIm91dHB1dF90eXBlXCIsIFwibnVtYmVyXCI6IDMsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJvcHRpb25zXCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zXCIgfSwgeyBcIm5hbWVcIjogXCJjbGllbnRfc3RyZWFtaW5nXCIsIFwibnVtYmVyXCI6IDUsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcInNlcnZlcl9zdHJlYW1pbmdcIiwgXCJudW1iZXJcIjogNiwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiIH1dIH0sIHsgXCJuYW1lXCI6IFwiRmlsZU9wdGlvbnNcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJqYXZhX3BhY2thZ2VcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImphdmFfb3V0ZXJfY2xhc3NuYW1lXCIsIFwibnVtYmVyXCI6IDgsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJqYXZhX211bHRpcGxlX2ZpbGVzXCIsIFwibnVtYmVyXCI6IDEwLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJqYXZhX2dlbmVyYXRlX2VxdWFsc19hbmRfaGFzaFwiLCBcIm51bWJlclwiOiAyMCwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJvcHRpb25zXCI6IHsgXCJkZXByZWNhdGVkXCI6IHRydWUgfSB9LCB7IFwibmFtZVwiOiBcImphdmFfc3RyaW5nX2NoZWNrX3V0ZjhcIiwgXCJudW1iZXJcIjogMjcsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcIm9wdGltaXplX2ZvclwiLCBcIm51bWJlclwiOiA5LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlXCIsIFwiZGVmYXVsdFZhbHVlXCI6IFwiU1BFRURcIiB9LCB7IFwibmFtZVwiOiBcImdvX3BhY2thZ2VcIiwgXCJudW1iZXJcIjogMTEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJjY19nZW5lcmljX3NlcnZpY2VzXCIsIFwibnVtYmVyXCI6IDE2LCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJqYXZhX2dlbmVyaWNfc2VydmljZXNcIiwgXCJudW1iZXJcIjogMTcsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcInB5X2dlbmVyaWNfc2VydmljZXNcIiwgXCJudW1iZXJcIjogMTgsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcImRlcHJlY2F0ZWRcIiwgXCJudW1iZXJcIjogMjMsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcImNjX2VuYWJsZV9hcmVuYXNcIiwgXCJudW1iZXJcIjogMzEsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwidHJ1ZVwiIH0sIHsgXCJuYW1lXCI6IFwib2JqY19jbGFzc19wcmVmaXhcIiwgXCJudW1iZXJcIjogMzYsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJjc2hhcnBfbmFtZXNwYWNlXCIsIFwibnVtYmVyXCI6IDM3LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwic3dpZnRfcHJlZml4XCIsIFwibnVtYmVyXCI6IDM5LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwicGhwX2NsYXNzX3ByZWZpeFwiLCBcIm51bWJlclwiOiA0MCwgXCJ0eXBlXCI6IDksIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcInBocF9uYW1lc3BhY2VcIiwgXCJudW1iZXJcIjogNDEsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJwaHBfbWV0YWRhdGFfbmFtZXNwYWNlXCIsIFwibnVtYmVyXCI6IDQ0LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwicnVieV9wYWNrYWdlXCIsIFwibnVtYmVyXCI6IDQ1LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogNTAsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCIgfSwgeyBcIm5hbWVcIjogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBcIm51bWJlclwiOiA5OTksIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXCIgfV0sIFwiZW51bVR5cGVcIjogW3sgXCJuYW1lXCI6IFwiT3B0aW1pemVNb2RlXCIsIFwidmFsdWVcIjogW3sgXCJuYW1lXCI6IFwiU1BFRURcIiwgXCJudW1iZXJcIjogMSB9LCB7IFwibmFtZVwiOiBcIkNPREVfU0laRVwiLCBcIm51bWJlclwiOiAyIH0sIHsgXCJuYW1lXCI6IFwiTElURV9SVU5USU1FXCIsIFwibnVtYmVyXCI6IDMgfV0gfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA1MzY4NzA5MTIgfV0gfSwgeyBcIm5hbWVcIjogXCJNZXNzYWdlT3B0aW9uc1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcIm1lc3NhZ2Vfc2V0X3dpcmVfZm9ybWF0XCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcIm5vX3N0YW5kYXJkX2Rlc2NyaXB0b3JfYWNjZXNzb3JcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiIH0sIHsgXCJuYW1lXCI6IFwiZGVwcmVjYXRlZFwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJtYXBfZW50cnlcIiwgXCJudW1iZXJcIjogNywgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImRlcHJlY2F0ZWRfbGVnYWN5X2pzb25fZmllbGRfY29uZmxpY3RzXCIsIFwibnVtYmVyXCI6IDExLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcIm9wdGlvbnNcIjogeyBcImRlcHJlY2F0ZWRcIjogdHJ1ZSB9IH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogMTIsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCIgfSwgeyBcIm5hbWVcIjogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBcIm51bWJlclwiOiA5OTksIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXCIgfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA1MzY4NzA5MTIgfV0gfSwgeyBcIm5hbWVcIjogXCJGaWVsZE9wdGlvbnNcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJjdHlwZVwiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkNUeXBlXCIsIFwiZGVmYXVsdFZhbHVlXCI6IFwiU1RSSU5HXCIgfSwgeyBcIm5hbWVcIjogXCJwYWNrZWRcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImpzdHlwZVwiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZVwiLCBcImRlZmF1bHRWYWx1ZVwiOiBcIkpTX05PUk1BTFwiIH0sIHsgXCJuYW1lXCI6IFwibGF6eVwiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJ1bnZlcmlmaWVkX2xhenlcIiwgXCJudW1iZXJcIjogMTUsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcImRlcHJlY2F0ZWRcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiIH0sIHsgXCJuYW1lXCI6IFwid2Vha1wiLCBcIm51bWJlclwiOiAxMCwgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiLCBcIm9wdGlvbnNcIjogeyBcImRlcHJlY2F0ZWRcIjogdHJ1ZSB9IH0sIHsgXCJuYW1lXCI6IFwiZGVidWdfcmVkYWN0XCIsIFwibnVtYmVyXCI6IDE2LCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJyZXRlbnRpb25cIiwgXCJudW1iZXJcIjogMTcsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuT3B0aW9uUmV0ZW50aW9uXCIgfSwgeyBcIm5hbWVcIjogXCJ0YXJnZXRzXCIsIFwibnVtYmVyXCI6IDE5LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblRhcmdldFR5cGVcIiB9LCB7IFwibmFtZVwiOiBcImVkaXRpb25fZGVmYXVsdHNcIiwgXCJudW1iZXJcIjogMjAsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuRWRpdGlvbkRlZmF1bHRcIiB9LCB7IFwibmFtZVwiOiBcImZlYXR1cmVzXCIsIFwibnVtYmVyXCI6IDIxLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFwiIH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZV9zdXBwb3J0XCIsIFwibnVtYmVyXCI6IDIyLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkZlYXR1cmVTdXBwb3J0XCIgfSwgeyBcIm5hbWVcIjogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBcIm51bWJlclwiOiA5OTksIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXCIgfV0sIFwibmVzdGVkVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJFZGl0aW9uRGVmYXVsdFwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcImVkaXRpb25cIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25cIiB9LCB7IFwibmFtZVwiOiBcInZhbHVlXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfV0gfSwgeyBcIm5hbWVcIjogXCJGZWF0dXJlU3VwcG9ydFwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcImVkaXRpb25faW50cm9kdWNlZFwiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRWRpdGlvblwiIH0sIHsgXCJuYW1lXCI6IFwiZWRpdGlvbl9kZXByZWNhdGVkXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uXCIgfSwgeyBcIm5hbWVcIjogXCJkZXByZWNhdGlvbl93YXJuaW5nXCIsIFwibnVtYmVyXCI6IDMsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJlZGl0aW9uX3JlbW92ZWRcIiwgXCJudW1iZXJcIjogNCwgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25cIiB9XSB9XSwgXCJlbnVtVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJDVHlwZVwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIlNUUklOR1wiLCBcIm51bWJlclwiOiAwIH0sIHsgXCJuYW1lXCI6IFwiQ09SRFwiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiU1RSSU5HX1BJRUNFXCIsIFwibnVtYmVyXCI6IDIgfV0gfSwgeyBcIm5hbWVcIjogXCJKU1R5cGVcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJKU19OT1JNQUxcIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIkpTX1NUUklOR1wiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiSlNfTlVNQkVSXCIsIFwibnVtYmVyXCI6IDIgfV0gfSwgeyBcIm5hbWVcIjogXCJPcHRpb25SZXRlbnRpb25cIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJSRVRFTlRJT05fVU5LTk9XTlwiLCBcIm51bWJlclwiOiAwIH0sIHsgXCJuYW1lXCI6IFwiUkVURU5USU9OX1JVTlRJTUVcIiwgXCJudW1iZXJcIjogMSB9LCB7IFwibmFtZVwiOiBcIlJFVEVOVElPTl9TT1VSQ0VcIiwgXCJudW1iZXJcIjogMiB9XSB9LCB7IFwibmFtZVwiOiBcIk9wdGlvblRhcmdldFR5cGVcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJUQVJHRVRfVFlQRV9VTktOT1dOXCIsIFwibnVtYmVyXCI6IDAgfSwgeyBcIm5hbWVcIjogXCJUQVJHRVRfVFlQRV9GSUxFXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJUQVJHRVRfVFlQRV9FWFRFTlNJT05fUkFOR0VcIiwgXCJudW1iZXJcIjogMiB9LCB7IFwibmFtZVwiOiBcIlRBUkdFVF9UWVBFX01FU1NBR0VcIiwgXCJudW1iZXJcIjogMyB9LCB7IFwibmFtZVwiOiBcIlRBUkdFVF9UWVBFX0ZJRUxEXCIsIFwibnVtYmVyXCI6IDQgfSwgeyBcIm5hbWVcIjogXCJUQVJHRVRfVFlQRV9PTkVPRlwiLCBcIm51bWJlclwiOiA1IH0sIHsgXCJuYW1lXCI6IFwiVEFSR0VUX1RZUEVfRU5VTVwiLCBcIm51bWJlclwiOiA2IH0sIHsgXCJuYW1lXCI6IFwiVEFSR0VUX1RZUEVfRU5VTV9FTlRSWVwiLCBcIm51bWJlclwiOiA3IH0sIHsgXCJuYW1lXCI6IFwiVEFSR0VUX1RZUEVfU0VSVklDRVwiLCBcIm51bWJlclwiOiA4IH0sIHsgXCJuYW1lXCI6IFwiVEFSR0VUX1RZUEVfTUVUSE9EXCIsIFwibnVtYmVyXCI6IDkgfV0gfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA1MzY4NzA5MTIgfV0gfSwgeyBcIm5hbWVcIjogXCJPbmVvZk9wdGlvbnNcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJmZWF0dXJlc1wiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFwiIH0sIHsgXCJuYW1lXCI6IFwidW5pbnRlcnByZXRlZF9vcHRpb25cIiwgXCJudW1iZXJcIjogOTk5LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvblwiIH1dLCBcImV4dGVuc2lvblJhbmdlXCI6IFt7IFwic3RhcnRcIjogMTAwMCwgXCJlbmRcIjogNTM2ODcwOTEyIH1dIH0sIHsgXCJuYW1lXCI6IFwiRW51bU9wdGlvbnNcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJhbGxvd19hbGlhc1wiLCBcIm51bWJlclwiOiAyLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZGVwcmVjYXRlZFwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0c1wiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcIm9wdGlvbnNcIjogeyBcImRlcHJlY2F0ZWRcIjogdHJ1ZSB9IH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogNywgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRcIiB9LCB7IFwibmFtZVwiOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIFwibnVtYmVyXCI6IDk5OSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25cIiB9XSwgXCJleHRlbnNpb25SYW5nZVwiOiBbeyBcInN0YXJ0XCI6IDEwMDAsIFwiZW5kXCI6IDUzNjg3MDkxMiB9XSB9LCB7IFwibmFtZVwiOiBcIkVudW1WYWx1ZU9wdGlvbnNcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJkZXByZWNhdGVkXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDEsIFwiZGVmYXVsdFZhbHVlXCI6IFwiZmFsc2VcIiB9LCB7IFwibmFtZVwiOiBcImZlYXR1cmVzXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCIgfSwgeyBcIm5hbWVcIjogXCJkZWJ1Z19yZWRhY3RcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiIH0sIHsgXCJuYW1lXCI6IFwiZmVhdHVyZV9zdXBwb3J0XCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuRmVhdHVyZVN1cHBvcnRcIiB9LCB7IFwibmFtZVwiOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIFwibnVtYmVyXCI6IDk5OSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25cIiB9XSwgXCJleHRlbnNpb25SYW5nZVwiOiBbeyBcInN0YXJ0XCI6IDEwMDAsIFwiZW5kXCI6IDUzNjg3MDkxMiB9XSB9LCB7IFwibmFtZVwiOiBcIlNlcnZpY2VPcHRpb25zXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwiZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogMzQsIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCIgfSwgeyBcIm5hbWVcIjogXCJkZXByZWNhdGVkXCIsIFwibnVtYmVyXCI6IDMzLCBcInR5cGVcIjogOCwgXCJsYWJlbFwiOiAxLCBcImRlZmF1bHRWYWx1ZVwiOiBcImZhbHNlXCIgfSwgeyBcIm5hbWVcIjogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBcIm51bWJlclwiOiA5OTksIFwidHlwZVwiOiAxMSwgXCJsYWJlbFwiOiAzLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXCIgfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA1MzY4NzA5MTIgfV0gfSwgeyBcIm5hbWVcIjogXCJNZXRob2RPcHRpb25zXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwiZGVwcmVjYXRlZFwiLCBcIm51bWJlclwiOiAzMywgXCJ0eXBlXCI6IDgsIFwibGFiZWxcIjogMSwgXCJkZWZhdWx0VmFsdWVcIjogXCJmYWxzZVwiIH0sIHsgXCJuYW1lXCI6IFwiaWRlbXBvdGVuY3lfbGV2ZWxcIiwgXCJudW1iZXJcIjogMzQsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLklkZW1wb3RlbmN5TGV2ZWxcIiwgXCJkZWZhdWx0VmFsdWVcIjogXCJJREVNUE9URU5DWV9VTktOT1dOXCIgfSwgeyBcIm5hbWVcIjogXCJmZWF0dXJlc1wiLCBcIm51bWJlclwiOiAzNSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRcIiB9LCB7IFwibmFtZVwiOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIFwibnVtYmVyXCI6IDk5OSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25cIiB9XSwgXCJlbnVtVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJJZGVtcG90ZW5jeUxldmVsXCIsIFwidmFsdWVcIjogW3sgXCJuYW1lXCI6IFwiSURFTVBPVEVOQ1lfVU5LTk9XTlwiLCBcIm51bWJlclwiOiAwIH0sIHsgXCJuYW1lXCI6IFwiTk9fU0lERV9FRkZFQ1RTXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJJREVNUE9URU5UXCIsIFwibnVtYmVyXCI6IDIgfV0gfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA1MzY4NzA5MTIgfV0gfSwgeyBcIm5hbWVcIjogXCJVbmludGVycHJldGVkT3B0aW9uXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwibmFtZVwiLCBcIm51bWJlclwiOiAyLCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMywgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydFwiIH0sIHsgXCJuYW1lXCI6IFwiaWRlbnRpZmllcl92YWx1ZVwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwicG9zaXRpdmVfaW50X3ZhbHVlXCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiA0LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJuZWdhdGl2ZV9pbnRfdmFsdWVcIiwgXCJudW1iZXJcIjogNSwgXCJ0eXBlXCI6IDMsIFwibGFiZWxcIjogMSB9LCB7IFwibmFtZVwiOiBcImRvdWJsZV92YWx1ZVwiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogMSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwic3RyaW5nX3ZhbHVlXCIsIFwibnVtYmVyXCI6IDcsIFwidHlwZVwiOiAxMiwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiYWdncmVnYXRlX3ZhbHVlXCIsIFwibnVtYmVyXCI6IDgsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfV0sIFwibmVzdGVkVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJOYW1lUGFydFwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcIm5hbWVfcGFydFwiLCBcIm51bWJlclwiOiAxLCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAyIH0sIHsgXCJuYW1lXCI6IFwiaXNfZXh0ZW5zaW9uXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiA4LCBcImxhYmVsXCI6IDIgfV0gfV0gfSwgeyBcIm5hbWVcIjogXCJGZWF0dXJlU2V0XCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwiZmllbGRfcHJlc2VuY2VcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZVwiLCBcIm9wdGlvbnNcIjogeyBcInJldGVudGlvblwiOiAxLCBcInRhcmdldHNcIjogWzQsIDFdLCBcImVkaXRpb25EZWZhdWx0c1wiOiBbeyBcInZhbHVlXCI6IFwiRVhQTElDSVRcIiwgXCJlZGl0aW9uXCI6IDkwMCB9LCB7IFwidmFsdWVcIjogXCJJTVBMSUNJVFwiLCBcImVkaXRpb25cIjogOTk5IH0sIHsgXCJ2YWx1ZVwiOiBcIkVYUExJQ0lUXCIsIFwiZWRpdGlvblwiOiAxMDAwIH1dIH0gfSwgeyBcIm5hbWVcIjogXCJlbnVtX3R5cGVcIiwgXCJudW1iZXJcIjogMiwgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRW51bVR5cGVcIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMSwgXCJ0YXJnZXRzXCI6IFs2LCAxXSwgXCJlZGl0aW9uRGVmYXVsdHNcIjogW3sgXCJ2YWx1ZVwiOiBcIkNMT1NFRFwiLCBcImVkaXRpb25cIjogOTAwIH0sIHsgXCJ2YWx1ZVwiOiBcIk9QRU5cIiwgXCJlZGl0aW9uXCI6IDk5OSB9XSB9IH0sIHsgXCJuYW1lXCI6IFwicmVwZWF0ZWRfZmllbGRfZW5jb2RpbmdcIiwgXCJudW1iZXJcIjogMywgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuUmVwZWF0ZWRGaWVsZEVuY29kaW5nXCIsIFwib3B0aW9uc1wiOiB7IFwicmV0ZW50aW9uXCI6IDEsIFwidGFyZ2V0c1wiOiBbNCwgMV0sIFwiZWRpdGlvbkRlZmF1bHRzXCI6IFt7IFwidmFsdWVcIjogXCJFWFBBTkRFRFwiLCBcImVkaXRpb25cIjogOTAwIH0sIHsgXCJ2YWx1ZVwiOiBcIlBBQ0tFRFwiLCBcImVkaXRpb25cIjogOTk5IH1dIH0gfSwgeyBcIm5hbWVcIjogXCJ1dGY4X3ZhbGlkYXRpb25cIiwgXCJudW1iZXJcIjogNCwgXCJ0eXBlXCI6IDE0LCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuVXRmOFZhbGlkYXRpb25cIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMSwgXCJ0YXJnZXRzXCI6IFs0LCAxXSwgXCJlZGl0aW9uRGVmYXVsdHNcIjogW3sgXCJ2YWx1ZVwiOiBcIk5PTkVcIiwgXCJlZGl0aW9uXCI6IDkwMCB9LCB7IFwidmFsdWVcIjogXCJWRVJJRllcIiwgXCJlZGl0aW9uXCI6IDk5OSB9XSB9IH0sIHsgXCJuYW1lXCI6IFwibWVzc2FnZV9lbmNvZGluZ1wiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5NZXNzYWdlRW5jb2RpbmdcIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMSwgXCJ0YXJnZXRzXCI6IFs0LCAxXSwgXCJlZGl0aW9uRGVmYXVsdHNcIjogW3sgXCJ2YWx1ZVwiOiBcIkxFTkdUSF9QUkVGSVhFRFwiLCBcImVkaXRpb25cIjogOTAwIH1dIH0gfSwgeyBcIm5hbWVcIjogXCJqc29uX2Zvcm1hdFwiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5Kc29uRm9ybWF0XCIsIFwib3B0aW9uc1wiOiB7IFwicmV0ZW50aW9uXCI6IDEsIFwidGFyZ2V0c1wiOiBbMywgNiwgMV0sIFwiZWRpdGlvbkRlZmF1bHRzXCI6IFt7IFwidmFsdWVcIjogXCJMRUdBQ1lfQkVTVF9FRkZPUlRcIiwgXCJlZGl0aW9uXCI6IDkwMCB9LCB7IFwidmFsdWVcIjogXCJBTExPV1wiLCBcImVkaXRpb25cIjogOTk5IH1dIH0gfSwgeyBcIm5hbWVcIjogXCJlbmZvcmNlX25hbWluZ19zdHlsZVwiLCBcIm51bWJlclwiOiA3LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5FbmZvcmNlTmFtaW5nU3R5bGVcIiwgXCJvcHRpb25zXCI6IHsgXCJyZXRlbnRpb25cIjogMiwgXCJ0YXJnZXRzXCI6IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XSwgXCJlZGl0aW9uRGVmYXVsdHNcIjogW3sgXCJ2YWx1ZVwiOiBcIlNUWUxFX0xFR0FDWVwiLCBcImVkaXRpb25cIjogOTAwIH0sIHsgXCJ2YWx1ZVwiOiBcIlNUWUxFMjAyNFwiLCBcImVkaXRpb25cIjogMTAwMSB9XSB9IH0sIHsgXCJuYW1lXCI6IFwiZGVmYXVsdF9zeW1ib2xfdmlzaWJpbGl0eVwiLCBcIm51bWJlclwiOiA4LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5WaXNpYmlsaXR5RmVhdHVyZS5EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVwiLCBcIm9wdGlvbnNcIjogeyBcInJldGVudGlvblwiOiAyLCBcInRhcmdldHNcIjogWzFdLCBcImVkaXRpb25EZWZhdWx0c1wiOiBbeyBcInZhbHVlXCI6IFwiRVhQT1JUX0FMTFwiLCBcImVkaXRpb25cIjogOTAwIH0sIHsgXCJ2YWx1ZVwiOiBcIkVYUE9SVF9UT1BfTEVWRUxcIiwgXCJlZGl0aW9uXCI6IDEwMDEgfV0gfSB9XSwgXCJuZXN0ZWRUeXBlXCI6IFt7IFwibmFtZVwiOiBcIlZpc2liaWxpdHlGZWF0dXJlXCIsIFwiZW51bVR5cGVcIjogW3sgXCJuYW1lXCI6IFwiRGVmYXVsdFN5bWJvbFZpc2liaWxpdHlcIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJERUZBVUxUX1NZTUJPTF9WSVNJQklMSVRZX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIkVYUE9SVF9BTExcIiwgXCJudW1iZXJcIjogMSB9LCB7IFwibmFtZVwiOiBcIkVYUE9SVF9UT1BfTEVWRUxcIiwgXCJudW1iZXJcIjogMiB9LCB7IFwibmFtZVwiOiBcIkxPQ0FMX0FMTFwiLCBcIm51bWJlclwiOiAzIH0sIHsgXCJuYW1lXCI6IFwiU1RSSUNUXCIsIFwibnVtYmVyXCI6IDQgfV0gfV0gfV0sIFwiZW51bVR5cGVcIjogW3sgXCJuYW1lXCI6IFwiRmllbGRQcmVzZW5jZVwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIkZJRUxEX1BSRVNFTkNFX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIkVYUExJQ0lUXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJJTVBMSUNJVFwiLCBcIm51bWJlclwiOiAyIH0sIHsgXCJuYW1lXCI6IFwiTEVHQUNZX1JFUVVJUkVEXCIsIFwibnVtYmVyXCI6IDMgfV0gfSwgeyBcIm5hbWVcIjogXCJFbnVtVHlwZVwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIkVOVU1fVFlQRV9VTktOT1dOXCIsIFwibnVtYmVyXCI6IDAgfSwgeyBcIm5hbWVcIjogXCJPUEVOXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJDTE9TRURcIiwgXCJudW1iZXJcIjogMiB9XSB9LCB7IFwibmFtZVwiOiBcIlJlcGVhdGVkRmllbGRFbmNvZGluZ1wiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIlJFUEVBVEVEX0ZJRUxEX0VOQ09ESU5HX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIlBBQ0tFRFwiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiRVhQQU5ERURcIiwgXCJudW1iZXJcIjogMiB9XSB9LCB7IFwibmFtZVwiOiBcIlV0ZjhWYWxpZGF0aW9uXCIsIFwidmFsdWVcIjogW3sgXCJuYW1lXCI6IFwiVVRGOF9WQUxJREFUSU9OX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIlZFUklGWVwiLCBcIm51bWJlclwiOiAyIH0sIHsgXCJuYW1lXCI6IFwiTk9ORVwiLCBcIm51bWJlclwiOiAzIH1dIH0sIHsgXCJuYW1lXCI6IFwiTWVzc2FnZUVuY29kaW5nXCIsIFwidmFsdWVcIjogW3sgXCJuYW1lXCI6IFwiTUVTU0FHRV9FTkNPRElOR19VTktOT1dOXCIsIFwibnVtYmVyXCI6IDAgfSwgeyBcIm5hbWVcIjogXCJMRU5HVEhfUFJFRklYRURcIiwgXCJudW1iZXJcIjogMSB9LCB7IFwibmFtZVwiOiBcIkRFTElNSVRFRFwiLCBcIm51bWJlclwiOiAyIH1dIH0sIHsgXCJuYW1lXCI6IFwiSnNvbkZvcm1hdFwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIkpTT05fRk9STUFUX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIkFMTE9XXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJMRUdBQ1lfQkVTVF9FRkZPUlRcIiwgXCJudW1iZXJcIjogMiB9XSB9LCB7IFwibmFtZVwiOiBcIkVuZm9yY2VOYW1pbmdTdHlsZVwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIkVORk9SQ0VfTkFNSU5HX1NUWUxFX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIlNUWUxFMjAyNFwiLCBcIm51bWJlclwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiU1RZTEVfTEVHQUNZXCIsIFwibnVtYmVyXCI6IDIgfV0gfV0sIFwiZXh0ZW5zaW9uUmFuZ2VcIjogW3sgXCJzdGFydFwiOiAxMDAwLCBcImVuZFwiOiA5OTk1IH0sIHsgXCJzdGFydFwiOiA5OTk1LCBcImVuZFwiOiAxMDAwMCB9LCB7IFwic3RhcnRcIjogMTAwMDAsIFwiZW5kXCI6IDEwMDAxIH1dIH0sIHsgXCJuYW1lXCI6IFwiRmVhdHVyZVNldERlZmF1bHRzXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwiZGVmYXVsdHNcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXREZWZhdWx0cy5GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHRcIiB9LCB7IFwibmFtZVwiOiBcIm1pbmltdW1fZWRpdGlvblwiLCBcIm51bWJlclwiOiA0LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRWRpdGlvblwiIH0sIHsgXCJuYW1lXCI6IFwibWF4aW11bV9lZGl0aW9uXCIsIFwibnVtYmVyXCI6IDUsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uXCIgfV0sIFwibmVzdGVkVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJGZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHRcIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJlZGl0aW9uXCIsIFwibnVtYmVyXCI6IDMsIFwidHlwZVwiOiAxNCwgXCJsYWJlbFwiOiAxLCBcInR5cGVOYW1lXCI6IFwiLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uXCIgfSwgeyBcIm5hbWVcIjogXCJvdmVycmlkYWJsZV9mZWF0dXJlc1wiLCBcIm51bWJlclwiOiA0LCBcInR5cGVcIjogMTEsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFwiIH0sIHsgXCJuYW1lXCI6IFwiZml4ZWRfZmVhdHVyZXNcIiwgXCJudW1iZXJcIjogNSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDEsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRcIiB9XSB9XSB9LCB7IFwibmFtZVwiOiBcIlNvdXJjZUNvZGVJbmZvXCIsIFwiZmllbGRcIjogW3sgXCJuYW1lXCI6IFwibG9jYXRpb25cIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uXCIgfV0sIFwibmVzdGVkVHlwZVwiOiBbeyBcIm5hbWVcIjogXCJMb2NhdGlvblwiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcInBhdGhcIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDUsIFwibGFiZWxcIjogMywgXCJvcHRpb25zXCI6IHsgXCJwYWNrZWRcIjogdHJ1ZSB9IH0sIHsgXCJuYW1lXCI6IFwic3BhblwiLCBcIm51bWJlclwiOiAyLCBcInR5cGVcIjogNSwgXCJsYWJlbFwiOiAzLCBcIm9wdGlvbnNcIjogeyBcInBhY2tlZFwiOiB0cnVlIH0gfSwgeyBcIm5hbWVcIjogXCJsZWFkaW5nX2NvbW1lbnRzXCIsIFwibnVtYmVyXCI6IDMsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJ0cmFpbGluZ19jb21tZW50c1wiLCBcIm51bWJlclwiOiA0LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwibGVhZGluZ19kZXRhY2hlZF9jb21tZW50c1wiLCBcIm51bWJlclwiOiA2LCBcInR5cGVcIjogOSwgXCJsYWJlbFwiOiAzIH1dIH1dLCBcImV4dGVuc2lvblJhbmdlXCI6IFt7IFwic3RhcnRcIjogNTM2MDAwMDAwLCBcImVuZFwiOiA1MzYwMDAwMDEgfV0gfSwgeyBcIm5hbWVcIjogXCJHZW5lcmF0ZWRDb2RlSW5mb1wiLCBcImZpZWxkXCI6IFt7IFwibmFtZVwiOiBcImFubm90YXRpb25cIiwgXCJudW1iZXJcIjogMSwgXCJ0eXBlXCI6IDExLCBcImxhYmVsXCI6IDMsIFwidHlwZU5hbWVcIjogXCIuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb25cIiB9XSwgXCJuZXN0ZWRUeXBlXCI6IFt7IFwibmFtZVwiOiBcIkFubm90YXRpb25cIiwgXCJmaWVsZFwiOiBbeyBcIm5hbWVcIjogXCJwYXRoXCIsIFwibnVtYmVyXCI6IDEsIFwidHlwZVwiOiA1LCBcImxhYmVsXCI6IDMsIFwib3B0aW9uc1wiOiB7IFwicGFja2VkXCI6IHRydWUgfSB9LCB7IFwibmFtZVwiOiBcInNvdXJjZV9maWxlXCIsIFwibnVtYmVyXCI6IDIsIFwidHlwZVwiOiA5LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJiZWdpblwiLCBcIm51bWJlclwiOiAzLCBcInR5cGVcIjogNSwgXCJsYWJlbFwiOiAxIH0sIHsgXCJuYW1lXCI6IFwiZW5kXCIsIFwibnVtYmVyXCI6IDQsIFwidHlwZVwiOiA1LCBcImxhYmVsXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJzZW1hbnRpY1wiLCBcIm51bWJlclwiOiA1LCBcInR5cGVcIjogMTQsIFwibGFiZWxcIjogMSwgXCJ0eXBlTmFtZVwiOiBcIi5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5TZW1hbnRpY1wiIH1dLCBcImVudW1UeXBlXCI6IFt7IFwibmFtZVwiOiBcIlNlbWFudGljXCIsIFwidmFsdWVcIjogW3sgXCJuYW1lXCI6IFwiTk9ORVwiLCBcIm51bWJlclwiOiAwIH0sIHsgXCJuYW1lXCI6IFwiU0VUXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJBTElBU1wiLCBcIm51bWJlclwiOiAyIH1dIH1dIH1dIH1dLCBcImVudW1UeXBlXCI6IFt7IFwibmFtZVwiOiBcIkVkaXRpb25cIiwgXCJ2YWx1ZVwiOiBbeyBcIm5hbWVcIjogXCJFRElUSU9OX1VOS05PV05cIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIkVESVRJT05fTEVHQUNZXCIsIFwibnVtYmVyXCI6IDkwMCB9LCB7IFwibmFtZVwiOiBcIkVESVRJT05fUFJPVE8yXCIsIFwibnVtYmVyXCI6IDk5OCB9LCB7IFwibmFtZVwiOiBcIkVESVRJT05fUFJPVE8zXCIsIFwibnVtYmVyXCI6IDk5OSB9LCB7IFwibmFtZVwiOiBcIkVESVRJT05fMjAyM1wiLCBcIm51bWJlclwiOiAxMDAwIH0sIHsgXCJuYW1lXCI6IFwiRURJVElPTl8yMDI0XCIsIFwibnVtYmVyXCI6IDEwMDEgfSwgeyBcIm5hbWVcIjogXCJFRElUSU9OXzFfVEVTVF9PTkxZXCIsIFwibnVtYmVyXCI6IDEgfSwgeyBcIm5hbWVcIjogXCJFRElUSU9OXzJfVEVTVF9PTkxZXCIsIFwibnVtYmVyXCI6IDIgfSwgeyBcIm5hbWVcIjogXCJFRElUSU9OXzk5OTk3X1RFU1RfT05MWVwiLCBcIm51bWJlclwiOiA5OTk5NyB9LCB7IFwibmFtZVwiOiBcIkVESVRJT05fOTk5OThfVEVTVF9PTkxZXCIsIFwibnVtYmVyXCI6IDk5OTk4IH0sIHsgXCJuYW1lXCI6IFwiRURJVElPTl85OTk5OV9URVNUX09OTFlcIiwgXCJudW1iZXJcIjogOTk5OTkgfSwgeyBcIm5hbWVcIjogXCJFRElUSU9OX01BWFwiLCBcIm51bWJlclwiOiAyMTQ3NDgzNjQ3IH1dIH0sIHsgXCJuYW1lXCI6IFwiU3ltYm9sVmlzaWJpbGl0eVwiLCBcInZhbHVlXCI6IFt7IFwibmFtZVwiOiBcIlZJU0lCSUxJVFlfVU5TRVRcIiwgXCJudW1iZXJcIjogMCB9LCB7IFwibmFtZVwiOiBcIlZJU0lCSUxJVFlfTE9DQUxcIiwgXCJudW1iZXJcIjogMSB9LCB7IFwibmFtZVwiOiBcIlZJU0lCSUxJVFlfRVhQT1JUXCIsIFwibnVtYmVyXCI6IDIgfV0gfV0gfSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXQuXG4gKiBVc2UgYGNyZWF0ZShGaWxlRGVzY3JpcHRvclNldFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRmlsZURlc2NyaXB0b3JTZXRTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uXG4gKiBVc2UgYGNyZWF0ZShGaWxlRGVzY3JpcHRvclByb3RvU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGaWxlRGVzY3JpcHRvclByb3RvU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uXG4gKiBVc2UgYGNyZWF0ZShEZXNjcmlwdG9yUHJvdG9TY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERlc2NyaXB0b3JQcm90b1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMik7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlLlxuICogVXNlIGBjcmVhdGUoRGVzY3JpcHRvclByb3RvX0V4dGVuc2lvblJhbmdlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBEZXNjcmlwdG9yUHJvdG9fRXh0ZW5zaW9uUmFuZ2VTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDIsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5SZXNlcnZlZFJhbmdlLlxuICogVXNlIGBjcmVhdGUoRGVzY3JpcHRvclByb3RvX1Jlc2VydmVkUmFuZ2VTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERlc2NyaXB0b3JQcm90b19SZXNlcnZlZFJhbmdlU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAyLCAxKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuXG4gKiBVc2UgYGNyZWF0ZShFeHRlbnNpb25SYW5nZU9wdGlvbnNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEV4dGVuc2lvblJhbmdlT3B0aW9uc1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMyk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLkRlY2xhcmF0aW9uLlxuICogVXNlIGBjcmVhdGUoRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX0RlY2xhcmF0aW9uU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBFeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb25TY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDMsIDApO1xuLyoqXG4gKiBUaGUgdmVyaWZpY2F0aW9uIHN0YXRlIG9mIHRoZSBleHRlbnNpb24gcmFuZ2UuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5WZXJpZmljYXRpb25TdGF0ZVxuICovXG5leHBvcnQgdmFyIEV4dGVuc2lvblJhbmdlT3B0aW9uc19WZXJpZmljYXRpb25TdGF0ZTtcbihmdW5jdGlvbiAoRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlKSB7XG4gICAgLyoqXG4gICAgICogQWxsIHRoZSBleHRlbnNpb25zIG9mIHRoZSByYW5nZSBtdXN0IGJlIGRlY2xhcmVkLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERFQ0xBUkFUSU9OID0gMDtcbiAgICAgKi9cbiAgICBFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGVbRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlW1wiREVDTEFSQVRJT05cIl0gPSAwXSA9IFwiREVDTEFSQVRJT05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVU5WRVJJRklFRCA9IDE7XG4gICAgICovXG4gICAgRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlW0V4dGVuc2lvblJhbmdlT3B0aW9uc19WZXJpZmljYXRpb25TdGF0ZVtcIlVOVkVSSUZJRURcIl0gPSAxXSA9IFwiVU5WRVJJRklFRFwiO1xufSkoRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlIHx8IChFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5WZXJpZmljYXRpb25TdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEV4dGVuc2lvblJhbmdlT3B0aW9uc19WZXJpZmljYXRpb25TdGF0ZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMywgMCk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uXG4gKiBVc2UgYGNyZWF0ZShGaWVsZERlc2NyaXB0b3JQcm90b1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRmllbGREZXNjcmlwdG9yUHJvdG9TY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDQpO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZVxuICovXG5leHBvcnQgdmFyIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGU7XG4oZnVuY3Rpb24gKEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUpIHtcbiAgICAvKipcbiAgICAgKiAwIGlzIHJlc2VydmVkIGZvciBlcnJvcnMuXG4gICAgICogT3JkZXIgaXMgd2VpcmQgZm9yIGhpc3RvcmljYWwgcmVhc29ucy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0RPVUJMRSA9IDE7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiRE9VQkxFXCJdID0gMV0gPSBcIkRPVUJMRVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0ZMT0FUID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGTE9BVFwiXSA9IDJdID0gXCJGTE9BVFwiO1xuICAgIC8qKlxuICAgICAqIE5vdCBaaWdaYWcgZW5jb2RlZC4gIE5lZ2F0aXZlIG51bWJlcnMgdGFrZSAxMCBieXRlcy4gIFVzZSBUWVBFX1NJTlQ2NCBpZlxuICAgICAqIG5lZ2F0aXZlIHZhbHVlcyBhcmUgbGlrZWx5LlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfSU5UNjQgPSAzO1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIklOVDY0XCJdID0gM10gPSBcIklOVDY0XCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfVUlOVDY0ID0gNDtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJVSU5UNjRcIl0gPSA0XSA9IFwiVUlOVDY0XCI7XG4gICAgLyoqXG4gICAgICogTm90IFppZ1phZyBlbmNvZGVkLiAgTmVnYXRpdmUgbnVtYmVycyB0YWtlIDEwIGJ5dGVzLiAgVXNlIFRZUEVfU0lOVDMyIGlmXG4gICAgICogbmVnYXRpdmUgdmFsdWVzIGFyZSBsaWtlbHkuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9JTlQzMiA9IDU7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiSU5UMzJcIl0gPSA1XSA9IFwiSU5UMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9GSVhFRDY0ID0gNjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGSVhFRDY0XCJdID0gNl0gPSBcIkZJWEVENjRcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9GSVhFRDMyID0gNztcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGSVhFRDMyXCJdID0gN10gPSBcIkZJWEVEMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9CT09MID0gODtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJCT09MXCJdID0gOF0gPSBcIkJPT0xcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9TVFJJTkcgPSA5O1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIlNUUklOR1wiXSA9IDldID0gXCJTVFJJTkdcIjtcbiAgICAvKipcbiAgICAgKiBUYWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAgKiBHcm91cCB0eXBlIGlzIGRlcHJlY2F0ZWQgYW5kIG5vdCBzdXBwb3J0ZWQgYWZ0ZXIgZ29vZ2xlLnByb3RvYnVmLiBIb3dldmVyLCBQcm90bzNcbiAgICAgKiBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHN0aWxsIGJlIGFibGUgdG8gcGFyc2UgdGhlIGdyb3VwIHdpcmUgZm9ybWF0IGFuZFxuICAgICAqIHRyZWF0IGdyb3VwIGZpZWxkcyBhcyB1bmtub3duIGZpZWxkcy4gIEluIEVkaXRpb25zLCB0aGUgZ3JvdXAgd2lyZSBmb3JtYXRcbiAgICAgKiBjYW4gYmUgZW5hYmxlZCB2aWEgdGhlIGBtZXNzYWdlX2VuY29kaW5nYCBmZWF0dXJlLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfR1JPVVAgPSAxMDtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJHUk9VUFwiXSA9IDEwXSA9IFwiR1JPVVBcIjtcbiAgICAvKipcbiAgICAgKiBMZW5ndGgtZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX01FU1NBR0UgPSAxMTtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJNRVNTQUdFXCJdID0gMTFdID0gXCJNRVNTQUdFXCI7XG4gICAgLyoqXG4gICAgICogTmV3IGluIHZlcnNpb24gMi5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0JZVEVTID0gMTI7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiQllURVNcIl0gPSAxMl0gPSBcIkJZVEVTXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfVUlOVDMyID0gMTM7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiVUlOVDMyXCJdID0gMTNdID0gXCJVSU5UMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9FTlVNID0gMTQ7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiRU5VTVwiXSA9IDE0XSA9IFwiRU5VTVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX1NGSVhFRDMyID0gMTU7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiU0ZJWEVEMzJcIl0gPSAxNV0gPSBcIlNGSVhFRDMyXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfU0ZJWEVENjQgPSAxNjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJTRklYRUQ2NFwiXSA9IDE2XSA9IFwiU0ZJWEVENjRcIjtcbiAgICAvKipcbiAgICAgKiBVc2VzIFppZ1phZyBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX1NJTlQzMiA9IDE3O1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIlNJTlQzMlwiXSA9IDE3XSA9IFwiU0lOVDMyXCI7XG4gICAgLyoqXG4gICAgICogVXNlcyBaaWdaYWcgZW5jb2RpbmcuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9TSU5UNjQgPSAxODtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJTSU5UNjRcIl0gPSAxOF0gPSBcIlNJTlQ2NFwiO1xufSkoRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSB8fCAoRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVTY2hlbWEgPSAvKkBfX1BVUkVfXyovIGVudW1EZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDQsIDApO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uTGFiZWxcbiAqL1xuZXhwb3J0IHZhciBGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbDtcbihmdW5jdGlvbiAoRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwpIHtcbiAgICAvKipcbiAgICAgKiAwIGlzIHJlc2VydmVkIGZvciBlcnJvcnNcbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMQUJFTF9PUFRJT05BTCA9IDE7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbXCJPUFRJT05BTFwiXSA9IDFdID0gXCJPUFRJT05BTFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMQUJFTF9SRVBFQVRFRCA9IDM7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbXCJSRVBFQVRFRFwiXSA9IDNdID0gXCJSRVBFQVRFRFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSByZXF1aXJlZCBsYWJlbCBpcyBvbmx5IGFsbG93ZWQgaW4gZ29vZ2xlLnByb3RvYnVmLiAgSW4gcHJvdG8zIGFuZCBFZGl0aW9uc1xuICAgICAqIGl0J3MgZXhwbGljaXRseSBwcm9oaWJpdGVkLiAgSW4gRWRpdGlvbnMsIHRoZSBgZmllbGRfcHJlc2VuY2VgIGZlYXR1cmVcbiAgICAgKiBjYW4gYmUgdXNlZCB0byBnZXQgdGhpcyBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMQUJFTF9SRVFVSVJFRCA9IDI7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWxbXCJSRVFVSVJFRFwiXSA9IDJdID0gXCJSRVFVSVJFRFwiO1xufSkoRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwgfHwgKEZpZWxkRGVzY3JpcHRvclByb3RvX0xhYmVsID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbC5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpZWxkRGVzY3JpcHRvclByb3RvX0xhYmVsU2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCA0LCAxKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5cbiAqIFVzZSBgY3JlYXRlKE9uZW9mRGVzY3JpcHRvclByb3RvU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBPbmVvZkRlc2NyaXB0b3JQcm90b1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgNSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5cbiAqIFVzZSBgY3JlYXRlKEVudW1EZXNjcmlwdG9yUHJvdG9TY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVudW1EZXNjcmlwdG9yUHJvdG9TY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDYpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uRW51bVJlc2VydmVkUmFuZ2UuXG4gKiBVc2UgYGNyZWF0ZShFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCA2LCAwKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uXG4gKiBVc2UgYGNyZWF0ZShFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9TY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVudW1WYWx1ZURlc2NyaXB0b3JQcm90b1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgNyk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by5cbiAqIFVzZSBgY3JlYXRlKFNlcnZpY2VEZXNjcmlwdG9yUHJvdG9TY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VEZXNjcmlwdG9yUHJvdG9TY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDgpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90by5cbiAqIFVzZSBgY3JlYXRlKE1ldGhvZERlc2NyaXB0b3JQcm90b1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWV0aG9kRGVzY3JpcHRvclByb3RvU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCA5KTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy5cbiAqIFVzZSBgY3JlYXRlKEZpbGVPcHRpb25zU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGaWxlT3B0aW9uc1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTApO1xuLyoqXG4gKiBHZW5lcmF0ZWQgY2xhc3NlcyBjYW4gYmUgb3B0aW1pemVkIGZvciBzcGVlZCBvciBjb2RlIHNpemUuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLk9wdGltaXplTW9kZVxuICovXG5leHBvcnQgdmFyIEZpbGVPcHRpb25zX09wdGltaXplTW9kZTtcbihmdW5jdGlvbiAoRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlKSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgY29tcGxldGUgY29kZSBmb3IgcGFyc2luZywgc2VyaWFsaXphdGlvbixcbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBTUEVFRCA9IDE7XG4gICAgICovXG4gICAgRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlW0ZpbGVPcHRpb25zX09wdGltaXplTW9kZVtcIlNQRUVEXCJdID0gMV0gPSBcIlNQRUVEXCI7XG4gICAgLyoqXG4gICAgICogZXRjLlxuICAgICAqXG4gICAgICogVXNlIFJlZmxlY3Rpb25PcHMgdG8gaW1wbGVtZW50IHRoZXNlIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQ09ERV9TSVpFID0gMjtcbiAgICAgKi9cbiAgICBGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGVbRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlW1wiQ09ERV9TSVpFXCJdID0gMl0gPSBcIkNPREVfU0laRVwiO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGNvZGUgdXNpbmcgTWVzc2FnZUxpdGUgYW5kIHRoZSBsaXRlIHJ1bnRpbWUuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTElURV9SVU5USU1FID0gMztcbiAgICAgKi9cbiAgICBGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGVbRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlW1wiTElURV9SVU5USU1FXCJdID0gM10gPSBcIkxJVEVfUlVOVElNRVwiO1xufSkoRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlIHx8IChGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLk9wdGltaXplTW9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpbGVPcHRpb25zX09wdGltaXplTW9kZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTAsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLlxuICogVXNlIGBjcmVhdGUoTWVzc2FnZU9wdGlvbnNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1lc3NhZ2VPcHRpb25zU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxMSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLlxuICogVXNlIGBjcmVhdGUoRmllbGRPcHRpb25zU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGaWVsZE9wdGlvbnNTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDEyKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuRWRpdGlvbkRlZmF1bHQuXG4gKiBVc2UgYGNyZWF0ZShGaWVsZE9wdGlvbnNfRWRpdGlvbkRlZmF1bHRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpZWxkT3B0aW9uc19FZGl0aW9uRGVmYXVsdFNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTIsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5GZWF0dXJlU3VwcG9ydC5cbiAqIFVzZSBgY3JlYXRlKEZpZWxkT3B0aW9uc19GZWF0dXJlU3VwcG9ydFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRmllbGRPcHRpb25zX0ZlYXR1cmVTdXBwb3J0U2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxMiwgMSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuQ1R5cGVcbiAqL1xuZXhwb3J0IHZhciBGaWVsZE9wdGlvbnNfQ1R5cGU7XG4oZnVuY3Rpb24gKEZpZWxkT3B0aW9uc19DVHlwZSkge1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbW9kZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBTVFJJTkcgPSAwO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19DVHlwZVtGaWVsZE9wdGlvbnNfQ1R5cGVbXCJTVFJJTkdcIl0gPSAwXSA9IFwiU1RSSU5HXCI7XG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbiBbY3R5cGU9Q09SRF0gbWF5IGJlIGFwcGxpZWQgdG8gYSBub24tcmVwZWF0ZWQgZmllbGQgb2YgdHlwZVxuICAgICAqIFwiYnl0ZXNcIi4gSXQgaW5kaWNhdGVzIHRoYXQgaW4gQysrLCB0aGUgZGF0YSBzaG91bGQgYmUgc3RvcmVkIGluIGEgQ29yZFxuICAgICAqIGluc3RlYWQgb2YgYSBzdHJpbmcuICBGb3IgdmVyeSBsYXJnZSBzdHJpbmdzLCB0aGlzIG1heSByZWR1Y2UgbWVtb3J5XG4gICAgICogZnJhZ21lbnRhdGlvbi4gSXQgbWF5IGFsc28gYWxsb3cgYmV0dGVyIHBlcmZvcm1hbmNlIHdoZW4gcGFyc2luZyBmcm9tIGFcbiAgICAgKiBDb3JkLCBvciB3aGVuIHBhcnNpbmcgd2l0aCBhbGlhc2luZyBlbmFibGVkLCBhcyB0aGUgcGFyc2VkIENvcmQgbWF5IHRoZW5cbiAgICAgKiBhbGlhcyB0aGUgb3JpZ2luYWwgYnVmZmVyLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IENPUkQgPSAxO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19DVHlwZVtGaWVsZE9wdGlvbnNfQ1R5cGVbXCJDT1JEXCJdID0gMV0gPSBcIkNPUkRcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU1RSSU5HX1BJRUNFID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfQ1R5cGVbRmllbGRPcHRpb25zX0NUeXBlW1wiU1RSSU5HX1BJRUNFXCJdID0gMl0gPSBcIlNUUklOR19QSUVDRVwiO1xufSkoRmllbGRPcHRpb25zX0NUeXBlIHx8IChGaWVsZE9wdGlvbnNfQ1R5cGUgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5DVHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpZWxkT3B0aW9uc19DVHlwZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTIsIDApO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZVxuICovXG5leHBvcnQgdmFyIEZpZWxkT3B0aW9uc19KU1R5cGU7XG4oZnVuY3Rpb24gKEZpZWxkT3B0aW9uc19KU1R5cGUpIHtcbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIGRlZmF1bHQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBKU19OT1JNQUwgPSAwO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19KU1R5cGVbRmllbGRPcHRpb25zX0pTVHlwZVtcIkpTX05PUk1BTFwiXSA9IDBdID0gXCJKU19OT1JNQUxcIjtcbiAgICAvKipcbiAgICAgKiBVc2UgSmF2YVNjcmlwdCBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEpTX1NUUklORyA9IDE7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX0pTVHlwZVtGaWVsZE9wdGlvbnNfSlNUeXBlW1wiSlNfU1RSSU5HXCJdID0gMV0gPSBcIkpTX1NUUklOR1wiO1xuICAgIC8qKlxuICAgICAqIFVzZSBKYXZhU2NyaXB0IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogSlNfTlVNQkVSID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfSlNUeXBlW0ZpZWxkT3B0aW9uc19KU1R5cGVbXCJKU19OVU1CRVJcIl0gPSAyXSA9IFwiSlNfTlVNQkVSXCI7XG59KShGaWVsZE9wdGlvbnNfSlNUeXBlIHx8IChGaWVsZE9wdGlvbnNfSlNUeXBlID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuSlNUeXBlLlxuICovXG5leHBvcnQgY29uc3QgRmllbGRPcHRpb25zX0pTVHlwZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTIsIDEpO1xuLyoqXG4gKiBJZiBzZXQgdG8gUkVURU5USU9OX1NPVVJDRSwgdGhlIG9wdGlvbiB3aWxsIGJlIG9taXR0ZWQgZnJvbSB0aGUgYmluYXJ5LlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuT3B0aW9uUmV0ZW50aW9uXG4gKi9cbmV4cG9ydCB2YXIgRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbjtcbihmdW5jdGlvbiAoRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbikge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBSRVRFTlRJT05fVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbltGaWVsZE9wdGlvbnNfT3B0aW9uUmV0ZW50aW9uW1wiUkVURU5USU9OX1VOS05PV05cIl0gPSAwXSA9IFwiUkVURU5USU9OX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogUkVURU5USU9OX1JVTlRJTUUgPSAxO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25bRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbltcIlJFVEVOVElPTl9SVU5USU1FXCJdID0gMV0gPSBcIlJFVEVOVElPTl9SVU5USU1FXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFJFVEVOVElPTl9TT1VSQ0UgPSAyO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25bRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbltcIlJFVEVOVElPTl9TT1VSQ0VcIl0gPSAyXSA9IFwiUkVURU5USU9OX1NPVVJDRVwiO1xufSkoRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbiB8fCAoRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbiA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblJldGVudGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25TY2hlbWEgPSAvKkBfX1BVUkVfXyovIGVudW1EZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDEyLCAyKTtcbi8qKlxuICogVGhpcyBpbmRpY2F0ZXMgdGhlIHR5cGVzIG9mIGVudGl0aWVzIHRoYXQgdGhlIGZpZWxkIG1heSBhcHBseSB0byB3aGVuIHVzZWRcbiAqIGFzIGFuIG9wdGlvbi4gSWYgaXQgaXMgdW5zZXQsIHRoZW4gdGhlIGZpZWxkIG1heSBiZSBmcmVlbHkgdXNlZCBhcyBhblxuICogb3B0aW9uIG9uIGFueSBraW5kIG9mIGVudGl0eS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblRhcmdldFR5cGVcbiAqL1xuZXhwb3J0IHZhciBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZTtcbihmdW5jdGlvbiAoRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9VTktOT1dOXCJdID0gMF0gPSBcIlRBUkdFVF9UWVBFX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfRklMRSA9IDE7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9GSUxFXCJdID0gMV0gPSBcIlRBUkdFVF9UWVBFX0ZJTEVcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfRVhURU5TSU9OX1JBTkdFID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtcIlRBUkdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRVwiXSA9IDJdID0gXCJUQVJHRVRfVFlQRV9FWFRFTlNJT05fUkFOR0VcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfTUVTU0FHRSA9IDM7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9NRVNTQUdFXCJdID0gM10gPSBcIlRBUkdFVF9UWVBFX01FU1NBR0VcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfRklFTEQgPSA0O1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfRklFTERcIl0gPSA0XSA9IFwiVEFSR0VUX1RZUEVfRklFTERcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfT05FT0YgPSA1O1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfT05FT0ZcIl0gPSA1XSA9IFwiVEFSR0VUX1RZUEVfT05FT0ZcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfRU5VTSA9IDY7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9FTlVNXCJdID0gNl0gPSBcIlRBUkdFVF9UWVBFX0VOVU1cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfRU5VTV9FTlRSWSA9IDc7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9FTlVNX0VOVFJZXCJdID0gN10gPSBcIlRBUkdFVF9UWVBFX0VOVU1fRU5UUllcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfU0VSVklDRSA9IDg7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9TRVJWSUNFXCJdID0gOF0gPSBcIlRBUkdFVF9UWVBFX1NFUlZJQ0VcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVEFSR0VUX1RZUEVfTUVUSE9EID0gOTtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtcIlRBUkdFVF9UWVBFX01FVEhPRFwiXSA9IDldID0gXCJUQVJHRVRfVFlQRV9NRVRIT0RcIjtcbn0pKEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlIHx8IChGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZSA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblRhcmdldFR5cGUuXG4gKi9cbmV4cG9ydCBjb25zdCBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTIsIDMpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9ucy5cbiAqIFVzZSBgY3JlYXRlKE9uZW9mT3B0aW9uc1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgT25lb2ZPcHRpb25zU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxMyk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuXG4gKiBVc2UgYGNyZWF0ZShFbnVtT3B0aW9uc1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRW51bU9wdGlvbnNTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDE0KTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zLlxuICogVXNlIGBjcmVhdGUoRW51bVZhbHVlT3B0aW9uc1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRW51bVZhbHVlT3B0aW9uc1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTUpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLlxuICogVXNlIGBjcmVhdGUoU2VydmljZU9wdGlvbnNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VPcHRpb25zU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxNik7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy5cbiAqIFVzZSBgY3JlYXRlKE1ldGhvZE9wdGlvbnNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1ldGhvZE9wdGlvbnNTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDE3KTtcbi8qKlxuICogSXMgdGhpcyBtZXRob2Qgc2lkZS1lZmZlY3QtZnJlZSAob3Igc2FmZSBpbiBIVFRQIHBhcmxhbmNlKSwgb3IgaWRlbXBvdGVudCxcbiAqIG9yIG5laXRoZXI/IEhUVFAgYmFzZWQgUlBDIGltcGxlbWVudGF0aW9uIG1heSBjaG9vc2UgR0VUIHZlcmIgZm9yIHNhZmVcbiAqIG1ldGhvZHMsIGFuZCBQVVQgdmVyYiBmb3IgaWRlbXBvdGVudCBtZXRob2RzIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgUE9TVC5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy5JZGVtcG90ZW5jeUxldmVsXG4gKi9cbmV4cG9ydCB2YXIgTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsO1xuKGZ1bmN0aW9uIChNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWwpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogSURFTVBPVEVOQ1lfVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsW01ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtcIklERU1QT1RFTkNZX1VOS05PV05cIl0gPSAwXSA9IFwiSURFTVBPVEVOQ1lfVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIGltcGxpZXMgaWRlbXBvdGVudFxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE5PX1NJREVfRUZGRUNUUyA9IDE7XG4gICAgICovXG4gICAgTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsW01ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtcIk5PX1NJREVfRUZGRUNUU1wiXSA9IDFdID0gXCJOT19TSURFX0VGRkVDVFNcIjtcbiAgICAvKipcbiAgICAgKiBpZGVtcG90ZW50LCBidXQgbWF5IGhhdmUgc2lkZSBlZmZlY3RzXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogSURFTVBPVEVOVCA9IDI7XG4gICAgICovXG4gICAgTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsW01ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtcIklERU1QT1RFTlRcIl0gPSAyXSA9IFwiSURFTVBPVEVOVFwiO1xufSkoTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsIHx8IChNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWwgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbC5cbiAqL1xuZXhwb3J0IGNvbnN0IE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTcsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uXG4gKiBVc2UgYGNyZWF0ZShVbmludGVycHJldGVkT3B0aW9uU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBVbmludGVycHJldGVkT3B0aW9uU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOCk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydC5cbiAqIFVzZSBgY3JlYXRlKFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnRTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDE4LCAwKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlxuICogVXNlIGBjcmVhdGUoRmVhdHVyZVNldFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRmVhdHVyZVNldFNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuVmlzaWJpbGl0eUZlYXR1cmUuXG4gKiBVc2UgYGNyZWF0ZShGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOSwgMCk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlZpc2liaWxpdHlGZWF0dXJlLkRlZmF1bHRTeW1ib2xWaXNpYmlsaXR5XG4gKi9cbmV4cG9ydCB2YXIgRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eTtcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eSkge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBERUZBVUxUX1NZTUJPTF9WSVNJQklMSVRZX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfVmlzaWJpbGl0eUZlYXR1cmVfRGVmYXVsdFN5bWJvbFZpc2liaWxpdHlbRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVtcIkRFRkFVTFRfU1lNQk9MX1ZJU0lCSUxJVFlfVU5LTk9XTlwiXSA9IDBdID0gXCJERUZBVUxUX1NZTUJPTF9WSVNJQklMSVRZX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHByZS1FRElUSU9OXzIwMjQsIGFsbCBVTlNFVCB2aXNpYmlsaXR5IGFyZSBleHBvcnQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRVhQT1JUX0FMTCA9IDE7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVtGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5W1wiRVhQT1JUX0FMTFwiXSA9IDFdID0gXCJFWFBPUlRfQUxMXCI7XG4gICAgLyoqXG4gICAgICogQWxsIHRvcC1sZXZlbCBzeW1ib2xzIGRlZmF1bHQgdG8gZXhwb3J0LCBuZXN0ZWQgZGVmYXVsdCB0byBsb2NhbC5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFWFBPUlRfVE9QX0xFVkVMID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5W0ZlYXR1cmVTZXRfVmlzaWJpbGl0eUZlYXR1cmVfRGVmYXVsdFN5bWJvbFZpc2liaWxpdHlbXCJFWFBPUlRfVE9QX0xFVkVMXCJdID0gMl0gPSBcIkVYUE9SVF9UT1BfTEVWRUxcIjtcbiAgICAvKipcbiAgICAgKiBBbGwgc3ltYm9scyBkZWZhdWx0IHRvIGxvY2FsLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IExPQ0FMX0FMTCA9IDM7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVtGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5W1wiTE9DQUxfQUxMXCJdID0gM10gPSBcIkxPQ0FMX0FMTFwiO1xuICAgIC8qKlxuICAgICAqIEFsbCBzeW1ib2xzIGxvY2FsIGJ5IGRlZmF1bHQuIE5lc3RlZCB0eXBlcyBjYW5ub3QgYmUgZXhwb3J0ZWQuXG4gICAgICogV2l0aCBzcGVjaWFsIGNhc2UgY2F2ZWF0IGZvciBtZXNzYWdlIHsgZW51bSB7fSByZXNlcnZlZCAxIHRvIG1heDsgfVxuICAgICAqIFRoaXMgaXMgdGhlIHJlY29tbWVuZGVkIHNldHRpbmcgZm9yIG5ldyBwcm90b3MuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU1RSSUNUID0gNDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5W0ZlYXR1cmVTZXRfVmlzaWJpbGl0eUZlYXR1cmVfRGVmYXVsdFN5bWJvbFZpc2liaWxpdHlbXCJTVFJJQ1RcIl0gPSA0XSA9IFwiU1RSSUNUXCI7XG59KShGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5IHx8IChGZWF0dXJlU2V0X1Zpc2liaWxpdHlGZWF0dXJlX0RlZmF1bHRTeW1ib2xWaXNpYmlsaXR5ID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlZpc2liaWxpdHlGZWF0dXJlLkRlZmF1bHRTeW1ib2xWaXNpYmlsaXR5LlxuICovXG5leHBvcnQgY29uc3QgRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTksIDAsIDApO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5GaWVsZFByZXNlbmNlXG4gKi9cbmV4cG9ydCB2YXIgRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlO1xuKGZ1bmN0aW9uIChGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRklFTERfUFJFU0VOQ0VfVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW0ZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZVtcIkZJRUxEX1BSRVNFTkNFX1VOS05PV05cIl0gPSAwXSA9IFwiRklFTERfUFJFU0VOQ0VfVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFWFBMSUNJVCA9IDE7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW0ZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZVtcIkVYUExJQ0lUXCJdID0gMV0gPSBcIkVYUExJQ0lUXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IElNUExJQ0lUID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW1wiSU1QTElDSVRcIl0gPSAyXSA9IFwiSU1QTElDSVRcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTEVHQUNZX1JFUVVJUkVEID0gMztcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW1wiTEVHQUNZX1JFUVVJUkVEXCJdID0gM10gPSBcIkxFR0FDWV9SRVFVSVJFRFwiO1xufSkoRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlIHx8IChGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMTksIDApO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5FbnVtVHlwZVxuICovXG5leHBvcnQgdmFyIEZlYXR1cmVTZXRfRW51bVR5cGU7XG4oZnVuY3Rpb24gKEZlYXR1cmVTZXRfRW51bVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRU5VTV9UWVBFX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRW51bVR5cGVbRmVhdHVyZVNldF9FbnVtVHlwZVtcIkVOVU1fVFlQRV9VTktOT1dOXCJdID0gMF0gPSBcIkVOVU1fVFlQRV9VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE9QRU4gPSAxO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRW51bVR5cGVbRmVhdHVyZVNldF9FbnVtVHlwZVtcIk9QRU5cIl0gPSAxXSA9IFwiT1BFTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBDTE9TRUQgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRW51bVR5cGVbRmVhdHVyZVNldF9FbnVtVHlwZVtcIkNMT1NFRFwiXSA9IDJdID0gXCJDTE9TRURcIjtcbn0pKEZlYXR1cmVTZXRfRW51bVR5cGUgfHwgKEZlYXR1cmVTZXRfRW51bVR5cGUgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRW51bVR5cGUuXG4gKi9cbmV4cG9ydCBjb25zdCBGZWF0dXJlU2V0X0VudW1UeXBlU2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOSwgMSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlJlcGVhdGVkRmllbGRFbmNvZGluZ1xuICovXG5leHBvcnQgdmFyIEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nO1xuKGZ1bmN0aW9uIChGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZykge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBSRVBFQVRFRF9GSUVMRF9FTkNPRElOR19VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZ1tGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZ1tcIlJFUEVBVEVEX0ZJRUxEX0VOQ09ESU5HX1VOS05PV05cIl0gPSAwXSA9IFwiUkVQRUFURURfRklFTERfRU5DT0RJTkdfVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBQQUNLRUQgPSAxO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nW0ZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nW1wiUEFDS0VEXCJdID0gMV0gPSBcIlBBQ0tFRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFWFBBTkRFRCA9IDI7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmdbRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmdbXCJFWFBBTkRFRFwiXSA9IDJdID0gXCJFWFBBTkRFRFwiO1xufSkoRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmcgfHwgKEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlJlcGVhdGVkRmllbGRFbmNvZGluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nU2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOSwgMik7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlV0ZjhWYWxpZGF0aW9uXG4gKi9cbmV4cG9ydCB2YXIgRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbjtcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbikge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBVVEY4X1ZBTElEQVRJT05fVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbltGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uW1wiVVRGOF9WQUxJREFUSU9OX1VOS05PV05cIl0gPSAwXSA9IFwiVVRGOF9WQUxJREFUSU9OX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVkVSSUZZID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uW0ZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25bXCJWRVJJRllcIl0gPSAyXSA9IFwiVkVSSUZZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE5PTkUgPSAzO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25bRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbltcIk5PTkVcIl0gPSAzXSA9IFwiTk9ORVwiO1xufSkoRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbiB8fCAoRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbiA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5VdGY4VmFsaWRhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25TY2hlbWEgPSAvKkBfX1BVUkVfXyovIGVudW1EZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDE5LCAzKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuTWVzc2FnZUVuY29kaW5nXG4gKi9cbmV4cG9ydCB2YXIgRmVhdHVyZVNldF9NZXNzYWdlRW5jb2Rpbmc7XG4oZnVuY3Rpb24gKEZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE1FU1NBR0VfRU5DT0RJTkdfVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbXCJNRVNTQUdFX0VOQ09ESU5HX1VOS05PV05cIl0gPSAwXSA9IFwiTUVTU0FHRV9FTkNPRElOR19VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IExFTkdUSF9QUkVGSVhFRCA9IDE7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbXCJMRU5HVEhfUFJFRklYRURcIl0gPSAxXSA9IFwiTEVOR1RIX1BSRUZJWEVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERFTElNSVRFRCA9IDI7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdbXCJERUxJTUlURURcIl0gPSAyXSA9IFwiREVMSU1JVEVEXCI7XG59KShGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZyB8fCAoRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmcgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuTWVzc2FnZUVuY29kaW5nLlxuICovXG5leHBvcnQgY29uc3QgRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmdTY2hlbWEgPSAvKkBfX1BVUkVfXyovIGVudW1EZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDE5LCA0KTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuSnNvbkZvcm1hdFxuICovXG5leHBvcnQgdmFyIEZlYXR1cmVTZXRfSnNvbkZvcm1hdDtcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9Kc29uRm9ybWF0KSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEpTT05fRk9STUFUX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJKU09OX0ZPUk1BVF9VTktOT1dOXCJdID0gMF0gPSBcIkpTT05fRk9STUFUX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQUxMT1cgPSAxO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJBTExPV1wiXSA9IDFdID0gXCJBTExPV1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMRUdBQ1lfQkVTVF9FRkZPUlQgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJMRUdBQ1lfQkVTVF9FRkZPUlRcIl0gPSAyXSA9IFwiTEVHQUNZX0JFU1RfRUZGT1JUXCI7XG59KShGZWF0dXJlU2V0X0pzb25Gb3JtYXQgfHwgKEZlYXR1cmVTZXRfSnNvbkZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5Kc29uRm9ybWF0LlxuICovXG5leHBvcnQgY29uc3QgRmVhdHVyZVNldF9Kc29uRm9ybWF0U2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOSwgNSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkVuZm9yY2VOYW1pbmdTdHlsZVxuICovXG5leHBvcnQgdmFyIEZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlO1xuKGZ1bmN0aW9uIChGZWF0dXJlU2V0X0VuZm9yY2VOYW1pbmdTdHlsZSkge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFTkZPUkNFX05BTUlOR19TVFlMRV9VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0VuZm9yY2VOYW1pbmdTdHlsZVtGZWF0dXJlU2V0X0VuZm9yY2VOYW1pbmdTdHlsZVtcIkVORk9SQ0VfTkFNSU5HX1NUWUxFX1VOS05PV05cIl0gPSAwXSA9IFwiRU5GT1JDRV9OQU1JTkdfU1RZTEVfVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBTVFlMRTIwMjQgPSAxO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlW0ZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlW1wiU1RZTEUyMDI0XCJdID0gMV0gPSBcIlNUWUxFMjAyNFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBTVFlMRV9MRUdBQ1kgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlW0ZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlW1wiU1RZTEVfTEVHQUNZXCJdID0gMl0gPSBcIlNUWUxFX0xFR0FDWVwiO1xufSkoRmVhdHVyZVNldF9FbmZvcmNlTmFtaW5nU3R5bGUgfHwgKEZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkVuZm9yY2VOYW1pbmdTdHlsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZlYXR1cmVTZXRfRW5mb3JjZU5hbWluZ1N0eWxlU2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAxOSwgNik7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldERlZmF1bHRzLlxuICogVXNlIGBjcmVhdGUoRmVhdHVyZVNldERlZmF1bHRzU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGZWF0dXJlU2V0RGVmYXVsdHNTY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDIwKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0RGVmYXVsdHMuRmVhdHVyZVNldEVkaXRpb25EZWZhdWx0LlxuICogVXNlIGBjcmVhdGUoRmVhdHVyZVNldERlZmF1bHRzX0ZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRmVhdHVyZVNldERlZmF1bHRzX0ZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdFNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMjAsIDApO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLlxuICogVXNlIGBjcmVhdGUoU291cmNlQ29kZUluZm9TY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNvdXJjZUNvZGVJbmZvU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAyMSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBnb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24uXG4gKiBVc2UgYGNyZWF0ZShTb3VyY2VDb2RlSW5mb19Mb2NhdGlvblNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU291cmNlQ29kZUluZm9fTG9jYXRpb25TY2hlbWEgPSAvKkBfX1BVUkVfXyovIG1lc3NhZ2VEZXNjKGZpbGVfZ29vZ2xlX3Byb3RvYnVmX2Rlc2NyaXB0b3IsIDIxLCAwKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5cbiAqIFVzZSBgY3JlYXRlKEdlbmVyYXRlZENvZGVJbmZvU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBHZW5lcmF0ZWRDb2RlSW5mb1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gbWVzc2FnZURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMjIpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb24uXG4gKiBVc2UgYGNyZWF0ZShHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uU2NoZW1hID0gLypAX19QVVJFX18qLyBtZXNzYWdlRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAyMiwgMCk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGlkZW50aWZpZWQgb2JqZWN0J3MgZWZmZWN0IG9uIHRoZSBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICogLnByb3RvIGZpbGUuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb24uU2VtYW50aWNcbiAqL1xuZXhwb3J0IHZhciBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljO1xuKGZ1bmN0aW9uIChHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljKSB7XG4gICAgLyoqXG4gICAgICogVGhlcmUgaXMgbm8gZWZmZWN0IG9yIHRoZSBlZmZlY3QgaXMgaW5kZXNjcmliYWJsZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBOT05FID0gMDtcbiAgICAgKi9cbiAgICBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljW0dlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCBpcyBzZXQgb3Igb3RoZXJ3aXNlIG11dGF0ZWQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU0VUID0gMTtcbiAgICAgKi9cbiAgICBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljW0dlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbXCJTRVRcIl0gPSAxXSA9IFwiU0VUXCI7XG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgdG8gdGhlIGVsZW1lbnQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQUxJQVMgPSAyO1xuICAgICAqL1xuICAgIEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbl9TZW1hbnRpY1tcIkFMSUFTXCJdID0gMl0gPSBcIkFMSUFTXCI7XG59KShHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljIHx8IChHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLlNlbWFudGljLlxuICovXG5leHBvcnQgY29uc3QgR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbl9TZW1hbnRpY1NjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMjIsIDAsIDApO1xuLyoqXG4gKiBUaGUgZnVsbCBzZXQgb2Yga25vd24gZWRpdGlvbnMuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25cbiAqL1xuZXhwb3J0IHZhciBFZGl0aW9uO1xuKGZ1bmN0aW9uIChFZGl0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQSBwbGFjZWhvbGRlciBmb3IgYW4gdW5rbm93biBlZGl0aW9uIHZhbHVlLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl9VTktOT1dOXCJdID0gMF0gPSBcIkVESVRJT05fVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEEgcGxhY2Vob2xkZXIgZWRpdGlvbiBmb3Igc3BlY2lmeWluZyBkZWZhdWx0IGJlaGF2aW9ycyAqYmVmb3JlKiBhIGZlYXR1cmVcbiAgICAgKiB3YXMgZmlyc3QgaW50cm9kdWNlZC4gIFRoaXMgaXMgZWZmZWN0aXZlbHkgYW4gXCJpbmZpbml0ZSBwYXN0XCIuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl9MRUdBQ1kgPSA5MDA7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl9MRUdBQ1lcIl0gPSA5MDBdID0gXCJFRElUSU9OX0xFR0FDWVwiO1xuICAgIC8qKlxuICAgICAqIExlZ2FjeSBzeW50YXggXCJlZGl0aW9uc1wiLiAgVGhlc2UgcHJlLWRhdGUgZWRpdGlvbnMsIGJ1dCBiZWhhdmUgbXVjaCBsaWtlXG4gICAgICogZGlzdGluY3QgZWRpdGlvbnMuICBUaGVzZSBjYW4ndCBiZSB1c2VkIHRvIHNwZWNpZnkgdGhlIGVkaXRpb24gb2YgcHJvdG9cbiAgICAgKiBmaWxlcywgYnV0IGZlYXR1cmUgZGVmaW5pdGlvbnMgbXVzdCBzdXBwbHkgcHJvdG8yL3Byb3RvMyBkZWZhdWx0cyBmb3JcbiAgICAgKiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OX1BST1RPMiA9IDk5ODtcbiAgICAgKi9cbiAgICBFZGl0aW9uW0VkaXRpb25bXCJFRElUSU9OX1BST1RPMlwiXSA9IDk5OF0gPSBcIkVESVRJT05fUFJPVE8yXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fUFJPVE8zID0gOTk5O1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fUFJPVE8zXCJdID0gOTk5XSA9IFwiRURJVElPTl9QUk9UTzNcIjtcbiAgICAvKipcbiAgICAgKiBFZGl0aW9ucyB0aGF0IGhhdmUgYmVlbiByZWxlYXNlZC4gIFRoZSBzcGVjaWZpYyB2YWx1ZXMgYXJlIGFyYml0cmFyeSBhbmRcbiAgICAgKiBzaG91bGQgbm90IGJlIGRlcGVuZGVkIG9uLCBidXQgdGhleSB3aWxsIGFsd2F5cyBiZSB0aW1lLW9yZGVyZWQgZm9yIGVhc3lcbiAgICAgKiBjb21wYXJpc29uLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fMjAyMyA9IDEwMDA7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl8yMDIzXCJdID0gMTAwMF0gPSBcIkVESVRJT05fMjAyM1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OXzIwMjQgPSAxMDAxO1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fMjAyNFwiXSA9IDEwMDFdID0gXCJFRElUSU9OXzIwMjRcIjtcbiAgICAvKipcbiAgICAgKiBQbGFjZWhvbGRlciBlZGl0aW9ucyBmb3IgdGVzdGluZyBmZWF0dXJlIHJlc29sdXRpb24uICBUaGVzZSBzaG91bGQgbm90IGJlXG4gICAgICogdXNlZCBvciByZWxpZWQgb24gb3V0c2lkZSBvZiB0ZXN0cy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OXzFfVEVTVF9PTkxZID0gMTtcbiAgICAgKi9cbiAgICBFZGl0aW9uW0VkaXRpb25bXCJFRElUSU9OXzFfVEVTVF9PTkxZXCJdID0gMV0gPSBcIkVESVRJT05fMV9URVNUX09OTFlcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl8yX1RFU1RfT05MWSA9IDI7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl8yX1RFU1RfT05MWVwiXSA9IDJdID0gXCJFRElUSU9OXzJfVEVTVF9PTkxZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fOTk5OTdfVEVTVF9PTkxZID0gOTk5OTc7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl85OTk5N19URVNUX09OTFlcIl0gPSA5OTk5N10gPSBcIkVESVRJT05fOTk5OTdfVEVTVF9PTkxZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fOTk5OThfVEVTVF9PTkxZID0gOTk5OTg7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl85OTk5OF9URVNUX09OTFlcIl0gPSA5OTk5OF0gPSBcIkVESVRJT05fOTk5OThfVEVTVF9PTkxZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fOTk5OTlfVEVTVF9PTkxZID0gOTk5OTk7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl85OTk5OV9URVNUX09OTFlcIl0gPSA5OTk5OV0gPSBcIkVESVRJT05fOTk5OTlfVEVTVF9PTkxZXCI7XG4gICAgLyoqXG4gICAgICogUGxhY2Vob2xkZXIgZm9yIHNwZWNpZnlpbmcgdW5ib3VuZGVkIGVkaXRpb24gc3VwcG9ydC4gIFRoaXMgc2hvdWxkIG9ubHlcbiAgICAgKiBldmVyIGJlIHVzZWQgYnkgcGx1Z2lucyB0aGF0IGNhbiBleHBlY3QgdG8gbmV2ZXIgcmVxdWlyZSBhbnkgY2hhbmdlcyB0b1xuICAgICAqIHN1cHBvcnQgYSBuZXcgZWRpdGlvbi5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OX01BWCA9IDIxNDc0ODM2NDc7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl9NQVhcIl0gPSAyMTQ3NDgzNjQ3XSA9IFwiRURJVElPTl9NQVhcIjtcbn0pKEVkaXRpb24gfHwgKEVkaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gZ29vZ2xlLnByb3RvYnVmLkVkaXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBFZGl0aW9uU2NoZW1hID0gLypAX19QVVJFX18qLyBlbnVtRGVzYyhmaWxlX2dvb2dsZV9wcm90b2J1Zl9kZXNjcmlwdG9yLCAwKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSAndmlzaWJpbGl0eScgb2YgYSBzeW1ib2wgd2l0aCByZXNwZWN0IHRvIHRoZSBwcm90byBpbXBvcnRcbiAqIHN5c3RlbS4gU3ltYm9scyBjYW4gb25seSBiZSBpbXBvcnRlZCB3aGVuIHRoZSB2aXNpYmlsaXR5IHJ1bGVzIGRvIG5vdCBwcmV2ZW50XG4gKiBpdCAoZXg6IGxvY2FsIHN5bWJvbHMgY2Fubm90IGJlIGltcG9ydGVkKS4gIFZpc2liaWxpdHkgbW9kaWZpZXJzIGNhbiBvbmx5IHNldFxuICogb24gYG1lc3NhZ2VgIGFuZCBgZW51bWAgYXMgdGhleSBhcmUgdGhlIG9ubHkgdHlwZXMgYXZhaWxhYmxlIHRvIGJlIHJlZmVyZW5jZWRcbiAqIGZyb20gb3RoZXIgZmlsZXMuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLlN5bWJvbFZpc2liaWxpdHlcbiAqL1xuZXhwb3J0IHZhciBTeW1ib2xWaXNpYmlsaXR5O1xuKGZ1bmN0aW9uIChTeW1ib2xWaXNpYmlsaXR5KSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFZJU0lCSUxJVFlfVU5TRVQgPSAwO1xuICAgICAqL1xuICAgIFN5bWJvbFZpc2liaWxpdHlbU3ltYm9sVmlzaWJpbGl0eVtcIlZJU0lCSUxJVFlfVU5TRVRcIl0gPSAwXSA9IFwiVklTSUJJTElUWV9VTlNFVFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBWSVNJQklMSVRZX0xPQ0FMID0gMTtcbiAgICAgKi9cbiAgICBTeW1ib2xWaXNpYmlsaXR5W1N5bWJvbFZpc2liaWxpdHlbXCJWSVNJQklMSVRZX0xPQ0FMXCJdID0gMV0gPSBcIlZJU0lCSUxJVFlfTE9DQUxcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVklTSUJJTElUWV9FWFBPUlQgPSAyO1xuICAgICAqL1xuICAgIFN5bWJvbFZpc2liaWxpdHlbU3ltYm9sVmlzaWJpbGl0eVtcIlZJU0lCSUxJVFlfRVhQT1JUXCJdID0gMl0gPSBcIlZJU0lCSUxJVFlfRVhQT1JUXCI7XG59KShTeW1ib2xWaXNpYmlsaXR5IHx8IChTeW1ib2xWaXNpYmlsaXR5ID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5TeW1ib2xWaXNpYmlsaXR5LlxuICovXG5leHBvcnQgY29uc3QgU3ltYm9sVmlzaWJpbGl0eVNjaGVtYSA9IC8qQF9fUFVSRV9fKi8gZW51bURlc2MoZmlsZV9nb29nbGVfcHJvdG9idWZfZGVzY3JpcHRvciwgMSk7XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHByb3RvQ2FtZWxDYXNlIH0gZnJvbSBcIi4uL3JlZmxlY3QvbmFtZXMuanNcIjtcbmltcG9ydCB7IGlzRmllbGRTZXQsIGNsZWFyRmllbGQgfSBmcm9tIFwiLi4vZmllbGRzLmpzXCI7XG5pbXBvcnQgeyBiYXNlNjRFbmNvZGUgfSBmcm9tIFwiLi4vd2lyZS9iYXNlNjQtZW5jb2RpbmcuanNcIjtcbmltcG9ydCB7IHRvQmluYXJ5IH0gZnJvbSBcIi4uL3RvLWJpbmFyeS5qc1wiO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tIFwiLi4vY2xvbmUuanNcIjtcbmltcG9ydCB7IEVkaXRpb24sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLCBGaWVsZE9wdGlvbnNTY2hlbWEsIEZpbGVEZXNjcmlwdG9yUHJvdG9TY2hlbWEsIERlc2NyaXB0b3JQcm90b1NjaGVtYSwgRW51bURlc2NyaXB0b3JQcm90b1NjaGVtYSwgfSBmcm9tIFwiLi4vd2t0L2dlbi9nb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvcl9wYi5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIHRvIGVtYmVkIGEgZmlsZSBkZXNjcmlwdG9yIGluXG4gKiBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1iZWRGaWxlRGVzYyhmaWxlKSB7XG4gICAgY29uc3QgZW1iZWQgPSB7XG4gICAgICAgIGJvb3RhYmxlOiBmYWxzZSxcbiAgICAgICAgcHJvdG8oKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpcHBlZCA9IGNsb25lKEZpbGVEZXNjcmlwdG9yUHJvdG9TY2hlbWEsIGZpbGUpO1xuICAgICAgICAgICAgY2xlYXJGaWVsZChzdHJpcHBlZCwgRmlsZURlc2NyaXB0b3JQcm90b1NjaGVtYS5maWVsZC5kZXBlbmRlbmN5KTtcbiAgICAgICAgICAgIGNsZWFyRmllbGQoc3RyaXBwZWQsIEZpbGVEZXNjcmlwdG9yUHJvdG9TY2hlbWEuZmllbGQuc291cmNlQ29kZUluZm8pO1xuICAgICAgICAgICAgc3RyaXBwZWQubWVzc2FnZVR5cGUubWFwKHN0cmlwSnNvbk5hbWVzKTtcbiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZDtcbiAgICAgICAgfSxcbiAgICAgICAgYmFzZTY0KCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSB0b0JpbmFyeShGaWxlRGVzY3JpcHRvclByb3RvU2NoZW1hLCB0aGlzLnByb3RvKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGJhc2U2NEVuY29kZShieXRlcywgXCJzdGRfcmF3XCIpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGZpbGUubmFtZSA9PSBcImdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvXCJcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGVtYmVkKSwgeyBib290YWJsZTogdHJ1ZSwgYm9vdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRmlsZURlc2NyaXB0b3JQcm90b0Jvb3QodGhpcy5wcm90bygpKTtcbiAgICAgICAgICAgIH0gfSkgOiBlbWJlZDtcbn1cbmZ1bmN0aW9uIHN0cmlwSnNvbk5hbWVzKGQpIHtcbiAgICBmb3IgKGNvbnN0IGYgb2YgZC5maWVsZCkge1xuICAgICAgICBpZiAoZi5qc29uTmFtZSA9PT0gcHJvdG9DYW1lbENhc2UoZi5uYW1lKSkge1xuICAgICAgICAgICAgY2xlYXJGaWVsZChmLCBGaWVsZERlc2NyaXB0b3JQcm90b1NjaGVtYS5maWVsZC5qc29uTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBuIG9mIGQubmVzdGVkVHlwZSkge1xuICAgICAgICBzdHJpcEpzb25OYW1lcyhuKTtcbiAgICB9XG59XG4vKipcbiAqIENvbXB1dGUgdGhlIHBhdGggdG8gYSBtZXNzYWdlLCBlbnVtZXJhdGlvbiwgZXh0ZW5zaW9uLCBvciBzZXJ2aWNlIGluIGFcbiAqIGZpbGUgZGVzY3JpcHRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0aEluRmlsZURlc2MoZGVzYykge1xuICAgIGlmIChkZXNjLmtpbmQgPT0gXCJzZXJ2aWNlXCIpIHtcbiAgICAgICAgcmV0dXJuIFtkZXNjLmZpbGUuc2VydmljZXMuaW5kZXhPZihkZXNjKV07XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudCA9IGRlc2MucGFyZW50O1xuICAgIGlmIChwYXJlbnQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN3aXRjaCAoZGVzYy5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbZGVzYy5maWxlLmVudW1zLmluZGV4T2YoZGVzYyldO1xuICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gW2Rlc2MuZmlsZS5tZXNzYWdlcy5pbmRleE9mKGRlc2MpXTtcbiAgICAgICAgICAgIGNhc2UgXCJleHRlbnNpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gW2Rlc2MuZmlsZS5leHRlbnNpb25zLmluZGV4T2YoZGVzYyldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRQYXRoKGN1cikge1xuICAgICAgICBjb25zdCBuZXN0ZWQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcGFyZW50ID0gY3VyLnBhcmVudDsgcGFyZW50Oykge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gcGFyZW50Lm5lc3RlZE1lc3NhZ2VzLmluZGV4T2YoY3VyKTtcbiAgICAgICAgICAgIG5lc3RlZC51bnNoaWZ0KGlkeCk7XG4gICAgICAgICAgICBjdXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICBwYXJlbnQgPSBjdXIucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIG5lc3RlZC51bnNoaWZ0KGN1ci5maWxlLm1lc3NhZ2VzLmluZGV4T2YoY3VyKSk7XG4gICAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfVxuICAgIGNvbnN0IHBhdGggPSBmaW5kUGF0aChwYXJlbnQpO1xuICAgIHN3aXRjaCAoZGVzYy5raW5kKSB7XG4gICAgICAgIGNhc2UgXCJleHRlbnNpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBbLi4ucGF0aCwgcGFyZW50Lm5lc3RlZEV4dGVuc2lvbnMuaW5kZXhPZihkZXNjKV07XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICByZXR1cm4gWy4uLnBhdGgsIHBhcmVudC5uZXN0ZWRNZXNzYWdlcy5pbmRleE9mKGRlc2MpXTtcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgIHJldHVybiBbLi4ucGF0aCwgcGFyZW50Lm5lc3RlZEVudW1zLmluZGV4T2YoZGVzYyldO1xuICAgIH1cbn1cbi8qKlxuICogVGhlIGZpbGUgZGVzY3JpcHRvciBmb3IgZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8gY2Fubm90IGJlIGVtYmVkZGVkXG4gKiBpbiBzZXJpYWxpemVkIGZvcm0sIHNpbmNlIGl0IGlzIHJlcXVpcmVkIHRvIHBhcnNlIGl0c2VsZi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGluc3RhbmNlIG9mIHRoZSBtZXNzYWdlLCBhbmQgcmV0dXJucyBhIHBsYWluIG9iamVjdFxuICogdGhhdCBjYW4gYmUgaHlkcmF0ZWQgdG8gdGhlIG1lc3NhZ2UgYWdhaW4gdmlhIGJvb3RGaWxlRGVzY3JpcHRvclByb3RvKCkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIHdpdGggYSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvXG4gKiBmb3IgZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8sIGFuZCBvbmx5IHN1cHBvcnRzIGZlYXR1cmVzIHRoYXQgYXJlXG4gKiByZWxldmFudCBmb3IgdGhlIHNwZWNpZmljIHVzZSBjYXNlLiBGb3IgZXhhbXBsZSwgaXQgZGlzY2FyZHMgZmlsZSBvcHRpb25zLFxuICogcmVzZXJ2ZWQgcmFuZ2VzIGFuZCByZXNlcnZlZCBuYW1lcywgYW5kIGZpZWxkIG9wdGlvbnMgdGhhdCBhcmUgdW51c2VkIGluXG4gKiBkZXNjcmlwdG9yLnByb3RvLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlRGVzY3JpcHRvclByb3RvQm9vdChwcm90bykge1xuICAgIHZhciBfYTtcbiAgICBhc3NlcnQocHJvdG8ubmFtZSA9PSBcImdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvXCIpO1xuICAgIGFzc2VydChwcm90by5wYWNrYWdlID09IFwiZ29vZ2xlLnByb3RvYnVmXCIpO1xuICAgIGFzc2VydCghcHJvdG8uZGVwZW5kZW5jeS5sZW5ndGgpO1xuICAgIGFzc2VydCghcHJvdG8ucHVibGljRGVwZW5kZW5jeS5sZW5ndGgpO1xuICAgIGFzc2VydCghcHJvdG8ud2Vha0RlcGVuZGVuY3kubGVuZ3RoKTtcbiAgICBhc3NlcnQoIXByb3RvLm9wdGlvbkRlcGVuZGVuY3kubGVuZ3RoKTtcbiAgICBhc3NlcnQoIXByb3RvLnNlcnZpY2UubGVuZ3RoKTtcbiAgICBhc3NlcnQoIXByb3RvLmV4dGVuc2lvbi5sZW5ndGgpO1xuICAgIGFzc2VydChwcm90by5zb3VyY2VDb2RlSW5mbyA9PT0gdW5kZWZpbmVkKTtcbiAgICBhc3NlcnQocHJvdG8uc3ludGF4ID09IFwiXCIgfHwgcHJvdG8uc3ludGF4ID09IFwicHJvdG8yXCIpO1xuICAgIGFzc2VydCghKChfYSA9IHByb3RvLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mZWF0dXJlcykpOyAvLyB3ZSdyZSBkcm9wcGluZyBmaWxlIG9wdGlvbnNcbiAgICBhc3NlcnQocHJvdG8uZWRpdGlvbiA9PT0gRWRpdGlvbi5FRElUSU9OX1VOS05PV04pO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHByb3RvLm5hbWUsXG4gICAgICAgIHBhY2thZ2U6IHByb3RvLnBhY2thZ2UsXG4gICAgICAgIG1lc3NhZ2VUeXBlOiBwcm90by5tZXNzYWdlVHlwZS5tYXAoY3JlYXRlRGVzY3JpcHRvckJvb3QpLFxuICAgICAgICBlbnVtVHlwZTogcHJvdG8uZW51bVR5cGUubWFwKGNyZWF0ZUVudW1EZXNjcmlwdG9yQm9vdCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JCb290KHByb3RvKSB7XG4gICAgYXNzZXJ0KHByb3RvLmV4dGVuc2lvbi5sZW5ndGggPT0gMCk7XG4gICAgYXNzZXJ0KCFwcm90by5vbmVvZkRlY2wubGVuZ3RoKTtcbiAgICBhc3NlcnQoIXByb3RvLm9wdGlvbnMpO1xuICAgIGFzc2VydCghaXNGaWVsZFNldChwcm90bywgRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLnZpc2liaWxpdHkpKTtcbiAgICBjb25zdCBiID0ge1xuICAgICAgICBuYW1lOiBwcm90by5uYW1lLFxuICAgIH07XG4gICAgaWYgKHByb3RvLmZpZWxkLmxlbmd0aCkge1xuICAgICAgICBiLmZpZWxkID0gcHJvdG8uZmllbGQubWFwKGNyZWF0ZUZpZWxkRGVzY3JpcHRvckJvb3QpO1xuICAgIH1cbiAgICBpZiAocHJvdG8ubmVzdGVkVHlwZS5sZW5ndGgpIHtcbiAgICAgICAgYi5uZXN0ZWRUeXBlID0gcHJvdG8ubmVzdGVkVHlwZS5tYXAoY3JlYXRlRGVzY3JpcHRvckJvb3QpO1xuICAgIH1cbiAgICBpZiAocHJvdG8uZW51bVR5cGUubGVuZ3RoKSB7XG4gICAgICAgIGIuZW51bVR5cGUgPSBwcm90by5lbnVtVHlwZS5tYXAoY3JlYXRlRW51bURlc2NyaXB0b3JCb290KTtcbiAgICB9XG4gICAgaWYgKHByb3RvLmV4dGVuc2lvblJhbmdlLmxlbmd0aCkge1xuICAgICAgICBiLmV4dGVuc2lvblJhbmdlID0gcHJvdG8uZXh0ZW5zaW9uUmFuZ2UubWFwKChyKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQoIXIub3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogci5zdGFydCwgZW5kOiByLmVuZCB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWVsZERlc2NyaXB0b3JCb290KHByb3RvKSB7XG4gICAgYXNzZXJ0KGlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLm5hbWUpKTtcbiAgICBhc3NlcnQoaXNGaWVsZFNldChwcm90bywgRmllbGREZXNjcmlwdG9yUHJvdG9TY2hlbWEuZmllbGQubnVtYmVyKSk7XG4gICAgYXNzZXJ0KGlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLnR5cGUpKTtcbiAgICBhc3NlcnQoIWlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLm9uZW9mSW5kZXgpKTtcbiAgICBhc3NlcnQoIWlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLmpzb25OYW1lKSB8fFxuICAgICAgICBwcm90by5qc29uTmFtZSA9PT0gcHJvdG9DYW1lbENhc2UocHJvdG8ubmFtZSkpO1xuICAgIGNvbnN0IGIgPSB7XG4gICAgICAgIG5hbWU6IHByb3RvLm5hbWUsXG4gICAgICAgIG51bWJlcjogcHJvdG8ubnVtYmVyLFxuICAgICAgICB0eXBlOiBwcm90by50eXBlLFxuICAgIH07XG4gICAgaWYgKGlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLmxhYmVsKSkge1xuICAgICAgICBiLmxhYmVsID0gcHJvdG8ubGFiZWw7XG4gICAgfVxuICAgIGlmIChpc0ZpZWxkU2V0KHByb3RvLCBGaWVsZERlc2NyaXB0b3JQcm90b1NjaGVtYS5maWVsZC50eXBlTmFtZSkpIHtcbiAgICAgICAgYi50eXBlTmFtZSA9IHByb3RvLnR5cGVOYW1lO1xuICAgIH1cbiAgICBpZiAoaXNGaWVsZFNldChwcm90bywgRmllbGREZXNjcmlwdG9yUHJvdG9TY2hlbWEuZmllbGQuZXh0ZW5kZWUpKSB7XG4gICAgICAgIGIuZXh0ZW5kZWUgPSBwcm90by5leHRlbmRlZTtcbiAgICB9XG4gICAgaWYgKGlzRmllbGRTZXQocHJvdG8sIEZpZWxkRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLmRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgYi5kZWZhdWx0VmFsdWUgPSBwcm90by5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIGlmIChwcm90by5vcHRpb25zKSB7XG4gICAgICAgIGIub3B0aW9ucyA9IGNyZWF0ZUZpZWxkT3B0aW9uc0Jvb3QocHJvdG8ub3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBiO1xufVxuZnVuY3Rpb24gY3JlYXRlRmllbGRPcHRpb25zQm9vdChwcm90bykge1xuICAgIGNvbnN0IGIgPSB7fTtcbiAgICBhc3NlcnQoIWlzRmllbGRTZXQocHJvdG8sIEZpZWxkT3B0aW9uc1NjaGVtYS5maWVsZC5jdHlwZSkpO1xuICAgIGlmIChpc0ZpZWxkU2V0KHByb3RvLCBGaWVsZE9wdGlvbnNTY2hlbWEuZmllbGQucGFja2VkKSkge1xuICAgICAgICBiLnBhY2tlZCA9IHByb3RvLnBhY2tlZDtcbiAgICB9XG4gICAgYXNzZXJ0KCFpc0ZpZWxkU2V0KHByb3RvLCBGaWVsZE9wdGlvbnNTY2hlbWEuZmllbGQuanN0eXBlKSk7XG4gICAgYXNzZXJ0KCFpc0ZpZWxkU2V0KHByb3RvLCBGaWVsZE9wdGlvbnNTY2hlbWEuZmllbGQubGF6eSkpO1xuICAgIGFzc2VydCghaXNGaWVsZFNldChwcm90bywgRmllbGRPcHRpb25zU2NoZW1hLmZpZWxkLnVudmVyaWZpZWRMYXp5KSk7XG4gICAgaWYgKGlzRmllbGRTZXQocHJvdG8sIEZpZWxkT3B0aW9uc1NjaGVtYS5maWVsZC5kZXByZWNhdGVkKSkge1xuICAgICAgICBiLmRlcHJlY2F0ZWQgPSBwcm90by5kZXByZWNhdGVkO1xuICAgIH1cbiAgICBhc3NlcnQoIWlzRmllbGRTZXQocHJvdG8sIEZpZWxkT3B0aW9uc1NjaGVtYS5maWVsZC53ZWFrKSk7XG4gICAgYXNzZXJ0KCFpc0ZpZWxkU2V0KHByb3RvLCBGaWVsZE9wdGlvbnNTY2hlbWEuZmllbGQuZGVidWdSZWRhY3QpKTtcbiAgICBpZiAoaXNGaWVsZFNldChwcm90bywgRmllbGRPcHRpb25zU2NoZW1hLmZpZWxkLnJldGVudGlvbikpIHtcbiAgICAgICAgYi5yZXRlbnRpb24gPSBwcm90by5yZXRlbnRpb247XG4gICAgfVxuICAgIGlmIChwcm90by50YXJnZXRzLmxlbmd0aCkge1xuICAgICAgICBiLnRhcmdldHMgPSBwcm90by50YXJnZXRzO1xuICAgIH1cbiAgICBpZiAocHJvdG8uZWRpdGlvbkRlZmF1bHRzLmxlbmd0aCkge1xuICAgICAgICBiLmVkaXRpb25EZWZhdWx0cyA9IHByb3RvLmVkaXRpb25EZWZhdWx0cy5tYXAoKGQpID0+ICh7XG4gICAgICAgICAgICB2YWx1ZTogZC52YWx1ZSxcbiAgICAgICAgICAgIGVkaXRpb246IGQuZWRpdGlvbixcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBhc3NlcnQoIWlzRmllbGRTZXQocHJvdG8sIEZpZWxkT3B0aW9uc1NjaGVtYS5maWVsZC5mZWF0dXJlcykpO1xuICAgIGFzc2VydCghaXNGaWVsZFNldChwcm90bywgRmllbGRPcHRpb25zU2NoZW1hLmZpZWxkLnVuaW50ZXJwcmV0ZWRPcHRpb24pKTtcbiAgICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVudW1EZXNjcmlwdG9yQm9vdChwcm90bykge1xuICAgIGFzc2VydCghcHJvdG8ub3B0aW9ucyk7XG4gICAgYXNzZXJ0KCFpc0ZpZWxkU2V0KHByb3RvLCBFbnVtRGVzY3JpcHRvclByb3RvU2NoZW1hLmZpZWxkLnZpc2liaWxpdHkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBwcm90by5uYW1lLFxuICAgICAgICB2YWx1ZTogcHJvdG8udmFsdWUubWFwKCh2KSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQoIXYub3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHYubmFtZSxcbiAgICAgICAgICAgICAgICBudW1iZXI6IHYubnVtYmVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbi8qKlxuICogQXNzZXJ0IHRoYXQgY29uZGl0aW9uIGlzIHRydXRoeSBvciB0aHJvdyBlcnJvci5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbikge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBIeWRyYXRlIGFuIGV4dGVuc2lvbiBkZXNjcmlwdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHREZXNjKGZpbGUsIHBhdGgsIC4uLnBhdGhzKSB7XG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBmaWxlLmV4dGVuc2lvbnNbcGF0aF07XG4gICAgfVxuICAgIGNvbnN0IGUgPSBwYXRocy5wb3AoKTsgLy8gd2UgY2hlY2tlZCBsZW5ndGggYWJvdmVcbiAgICByZXR1cm4gcGF0aHMucmVkdWNlKChhY2MsIGN1cikgPT4gYWNjLm5lc3RlZE1lc3NhZ2VzW2N1cl0sIGZpbGUubWVzc2FnZXNbcGF0aF0pLm5lc3RlZEV4dGVuc2lvbnNbZV07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IFNjYWxhclR5cGUgfSBmcm9tIFwiLi9kZXNjcmlwdG9ycy5qc1wiO1xuaW1wb3J0IHsgc2NhbGFyWmVyb1ZhbHVlIH0gZnJvbSBcIi4vcmVmbGVjdC9zY2FsYXIuanNcIjtcbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IEJpbmFyeVJlYWRlciwgV2lyZVR5cGUgfSBmcm9tIFwiLi93aXJlL2JpbmFyeS1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgdmFyaW50MzJ3cml0ZSB9IGZyb20gXCIuL3dpcmUvdmFyaW50LmpzXCI7XG4vLyBEZWZhdWx0IG9wdGlvbnMgZm9yIHBhcnNpbmcgYmluYXJ5IGRhdGEuXG5jb25zdCByZWFkRGVmYXVsdHMgPSB7XG4gICAgcmVhZFVua25vd25GaWVsZHM6IHRydWUsXG59O1xuZnVuY3Rpb24gbWFrZVJlYWRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVhZERlZmF1bHRzKSwgb3B0aW9ucykgOiByZWFkRGVmYXVsdHM7XG59XG4vKipcbiAqIFBhcnNlIHNlcmlhbGl6ZWQgYmluYXJ5IGRhdGEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQmluYXJ5KHNjaGVtYSwgYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtc2cgPSByZWZsZWN0KHNjaGVtYSwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgcmVhZE1lc3NhZ2UobXNnLCBuZXcgQmluYXJ5UmVhZGVyKGJ5dGVzKSwgbWFrZVJlYWRPcHRpb25zKG9wdGlvbnMpLCBmYWxzZSwgYnl0ZXMuYnl0ZUxlbmd0aCk7XG4gICAgcmV0dXJuIG1zZy5tZXNzYWdlO1xufVxuLyoqXG4gKiBQYXJzZSBmcm9tIGJpbmFyeSBkYXRhLCBtZXJnaW5nIGZpZWxkcy5cbiAqXG4gKiBSZXBlYXRlZCBmaWVsZHMgYXJlIGFwcGVuZGVkLiBNYXAgZW50cmllcyBhcmUgYWRkZWQsIG92ZXJ3cml0aW5nXG4gKiBleGlzdGluZyBrZXlzLlxuICpcbiAqIElmIGEgbWVzc2FnZSBmaWVsZCBpcyBhbHJlYWR5IHByZXNlbnQsIGl0IHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlXG4gKiBuZXcgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRnJvbUJpbmFyeShzY2hlbWEsIHRhcmdldCwgYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICByZWFkTWVzc2FnZShyZWZsZWN0KHNjaGVtYSwgdGFyZ2V0LCBmYWxzZSksIG5ldyBCaW5hcnlSZWFkZXIoYnl0ZXMpLCBtYWtlUmVhZE9wdGlvbnMob3B0aW9ucyksIGZhbHNlLCBieXRlcy5ieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuLyoqXG4gKiBJZiBgZGVsaW1pdGVkYCBpcyBmYWxzZSwgcmVhZCB0aGUgbGVuZ3RoIGdpdmVuIGluIGBsZW5ndGhPckRlbGltaXRlZEZpZWxkTm9gLlxuICpcbiAqIElmIGBkZWxpbWl0ZWRgIGlzIHRydWUsIHJlYWQgdW50aWwgYW4gRW5kR3JvdXAgdGFnLiBgbGVuZ3RoT3JEZWxpbWl0ZWRGaWVsZE5vYFxuICogaXMgdGhlIGV4cGVjdGVkIGZpZWxkIG51bWJlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWFkTWVzc2FnZShtZXNzYWdlLCByZWFkZXIsIG9wdGlvbnMsIGRlbGltaXRlZCwgbGVuZ3RoT3JEZWxpbWl0ZWRGaWVsZE5vKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGVuZCA9IGRlbGltaXRlZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoT3JEZWxpbWl0ZWRGaWVsZE5vO1xuICAgIGxldCBmaWVsZE5vO1xuICAgIGxldCB3aXJlVHlwZTtcbiAgICBjb25zdCB1bmtub3duRmllbGRzID0gKF9hID0gbWVzc2FnZS5nZXRVbmtub3duKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgIFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgIGlmIChkZWxpbWl0ZWQgJiYgd2lyZVR5cGUgPT0gV2lyZVR5cGUuRW5kR3JvdXApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpZWxkID0gbWVzc2FnZS5maW5kTnVtYmVyKGZpZWxkTm8pO1xuICAgICAgICBpZiAoIWZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVhZGVyLnNraXAod2lyZVR5cGUsIGZpZWxkTm8pO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVhZFVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICB1bmtub3duRmllbGRzLnB1c2goeyBubzogZmllbGRObywgd2lyZVR5cGUsIGRhdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZWFkRmllbGQobWVzc2FnZSwgcmVhZGVyLCBmaWVsZCwgd2lyZVR5cGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoZGVsaW1pdGVkKSB7XG4gICAgICAgIGlmICh3aXJlVHlwZSAhPSBXaXJlVHlwZS5FbmRHcm91cCB8fCBmaWVsZE5vICE9PSBsZW5ndGhPckRlbGltaXRlZEZpZWxkTm8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZW5kIGdyb3VwIHRhZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5rbm93bkZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG1lc3NhZ2Uuc2V0VW5rbm93bih1bmtub3duRmllbGRzKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmllbGQobWVzc2FnZSwgcmVhZGVyLCBmaWVsZCwgd2lyZVR5cGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgc3dpdGNoIChmaWVsZC5maWVsZEtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgbWVzc2FnZS5zZXQoZmllbGQsIHJlYWRTY2FsYXIocmVhZGVyLCBmaWVsZC5zY2FsYXIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgY29uc3QgdmFsID0gcmVhZFNjYWxhcihyZWFkZXIsIFNjYWxhclR5cGUuSU5UMzIpO1xuICAgICAgICAgICAgaWYgKGZpZWxkLmVudW0ub3Blbikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2V0KGZpZWxkLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2sgPSBmaWVsZC5lbnVtLnZhbHVlcy5zb21lKCh2KSA9PiB2Lm51bWJlciA9PT0gdmFsKTtcbiAgICAgICAgICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXQoZmllbGQsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMucmVhZFVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyaW50MzJ3cml0ZSh2YWwsIGJ5dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5rbm93bkZpZWxkcyA9IChfYSA9IG1lc3NhZ2UuZ2V0VW5rbm93bigpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgdW5rbm93bkZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vOiBmaWVsZC5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aXJlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KGJ5dGVzKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2V0VW5rbm93bih1bmtub3duRmllbGRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2V0KGZpZWxkLCByZWFkTWVzc2FnZUZpZWxkKHJlYWRlciwgb3B0aW9ucywgZmllbGQsIG1lc3NhZ2UuZ2V0KGZpZWxkKSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsaXN0XCI6XG4gICAgICAgICAgICByZWFkTGlzdEZpZWxkKHJlYWRlciwgd2lyZVR5cGUsIG1lc3NhZ2UuZ2V0KGZpZWxkKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgcmVhZE1hcEVudHJ5KHJlYWRlciwgbWVzc2FnZS5nZXQoZmllbGQpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbi8vIFJlYWQgYSBtYXAgZmllbGQsIGV4cGVjdGluZyBrZXkgZmllbGQgPSAxLCB2YWx1ZSBmaWVsZCA9IDJcbmZ1bmN0aW9uIHJlYWRNYXBFbnRyeShyZWFkZXIsIG1hcCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZpZWxkID0gbWFwLmZpZWxkKCk7XG4gICAgbGV0IGtleTtcbiAgICBsZXQgdmFsO1xuICAgIC8vIFJlYWQgdGhlIGxlbmd0aCBvZiB0aGUgbWFwIGVudHJ5LCB3aGljaCBpcyBhIHZhcmludC5cbiAgICBjb25zdCBsZW4gPSByZWFkZXIudWludDMyKCk7XG4gICAgLy8gV0FSTklORzogQ2FsY3VsYXRlIGVuZCBBRlRFUiBhZHZhbmNpbmcgcmVhZGVyLnBvcyAoYWJvdmUpLCBzbyB0aGF0XG4gICAgLy8gICAgICAgICAgcmVhZGVyLnBvcyBpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIG1hcCBlbnRyeS5cbiAgICBjb25zdCBlbmQgPSByZWFkZXIucG9zICsgbGVuO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgIGNvbnN0IFtmaWVsZE5vXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAga2V5ID0gcmVhZFNjYWxhcihyZWFkZXIsIGZpZWxkLm1hcEtleSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5tYXBLaW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHJlYWRTY2FsYXIocmVhZGVyLCBmaWVsZC5zY2FsYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIG9wdGlvbnMsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5ID0gc2NhbGFyWmVyb1ZhbHVlKGZpZWxkLm1hcEtleSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZC5tYXBLaW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgdmFsID0gc2NhbGFyWmVyb1ZhbHVlKGZpZWxkLnNjYWxhciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBmaWVsZC5lbnVtLnZhbHVlc1swXS5udW1iZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIHZhbCA9IHJlZmxlY3QoZmllbGQubWVzc2FnZSwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWFwLnNldChrZXksIHZhbCk7XG59XG5mdW5jdGlvbiByZWFkTGlzdEZpZWxkKHJlYWRlciwgd2lyZVR5cGUsIGxpc3QsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZmllbGQgPSBsaXN0LmZpZWxkKCk7XG4gICAgaWYgKGZpZWxkLmxpc3RLaW5kID09PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICBsaXN0LmFkZChyZWFkTWVzc2FnZUZpZWxkKHJlYWRlciwgb3B0aW9ucywgZmllbGQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzY2FsYXJUeXBlID0gKF9hID0gZmllbGQuc2NhbGFyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBTY2FsYXJUeXBlLklOVDMyO1xuICAgIGNvbnN0IHBhY2tlZCA9IHdpcmVUeXBlID09IFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCAmJlxuICAgICAgICBzY2FsYXJUeXBlICE9IFNjYWxhclR5cGUuU1RSSU5HICYmXG4gICAgICAgIHNjYWxhclR5cGUgIT0gU2NhbGFyVHlwZS5CWVRFUztcbiAgICBpZiAoIXBhY2tlZCkge1xuICAgICAgICBsaXN0LmFkZChyZWFkU2NhbGFyKHJlYWRlciwgc2NhbGFyVHlwZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGUgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZSkge1xuICAgICAgICBsaXN0LmFkZChyZWFkU2NhbGFyKHJlYWRlciwgc2NhbGFyVHlwZSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlYWRNZXNzYWdlRmllbGQocmVhZGVyLCBvcHRpb25zLCBmaWVsZCwgbWVyZ2VNZXNzYWdlKSB7XG4gICAgY29uc3QgZGVsaW1pdGVkID0gZmllbGQuZGVsaW1pdGVkRW5jb2Rpbmc7XG4gICAgY29uc3QgbWVzc2FnZSA9IG1lcmdlTWVzc2FnZSAhPT0gbnVsbCAmJiBtZXJnZU1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lcmdlTWVzc2FnZSA6IHJlZmxlY3QoZmllbGQubWVzc2FnZSwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgcmVhZE1lc3NhZ2UobWVzc2FnZSwgcmVhZGVyLCBvcHRpb25zLCBkZWxpbWl0ZWQsIGRlbGltaXRlZCA/IGZpZWxkLm51bWJlciA6IHJlYWRlci51aW50MzIoKSk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiByZWFkU2NhbGFyKHJlYWRlciwgdHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkRPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZG91YmxlKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5pbnQzMigpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmludDY0KCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZml4ZWQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5maXhlZDMyKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuc2ZpeGVkMzIoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zZml4ZWQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zaW50NjQoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIudWludDMyKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnNpbnQzMigpO1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgYmFzZTY0RGVjb2RlIH0gZnJvbSBcIi4uL3dpcmUvYmFzZTY0LWVuY29kaW5nLmpzXCI7XG5pbXBvcnQgeyBGaWxlRGVzY3JpcHRvclByb3RvU2NoZW1hIH0gZnJvbSBcIi4uL3drdC9nZW4vZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3JfcGIuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUZpbGVSZWdpc3RyeSB9IGZyb20gXCIuLi9yZWdpc3RyeS5qc1wiO1xuaW1wb3J0IHsgcmVzdG9yZUpzb25OYW1lcyB9IGZyb20gXCIuL3Jlc3RvcmUtanNvbi1uYW1lcy5qc1wiO1xuaW1wb3J0IHsgZnJvbUJpbmFyeSB9IGZyb20gXCIuLi9mcm9tLWJpbmFyeS5qc1wiO1xuLyoqXG4gKiBIeWRyYXRlIGEgZmlsZSBkZXNjcmlwdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWxlRGVzYyhiNjQsIGltcG9ydHMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgcm9vdCA9IGZyb21CaW5hcnkoRmlsZURlc2NyaXB0b3JQcm90b1NjaGVtYSwgYmFzZTY0RGVjb2RlKGI2NCkpO1xuICAgIHJvb3QubWVzc2FnZVR5cGUuZm9yRWFjaChyZXN0b3JlSnNvbk5hbWVzKTtcbiAgICByb290LmRlcGVuZGVuY3kgPSAoX2EgPSBpbXBvcnRzID09PSBudWxsIHx8IGltcG9ydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltcG9ydHMubWFwKChmKSA9PiBmLnByb3RvLm5hbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICBjb25zdCByZWcgPSBjcmVhdGVGaWxlUmVnaXN0cnkocm9vdCwgKHByb3RvRmlsZU5hbWUpID0+IGltcG9ydHMgPT09IG51bGwgfHwgaW1wb3J0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1wb3J0cy5maW5kKChmKSA9PiBmLnByb3RvLm5hbWUgPT09IHByb3RvRmlsZU5hbWUpKTtcbiAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdHlsZS9ub05vbk51bGxBc3NlcnRpb246IG5vbi1udWxsIGFzc2VydGlvbiBiZWNhdXNlIHdlIGp1c3QgY3JlYXRlZCB0aGUgcmVnaXN0cnkgZnJvbSB0aGUgZmlsZSB3ZSBsb29rIHVwXG4gICAgcmV0dXJuIHJlZy5nZXRGaWxlKHJvb3QubmFtZSk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogSHlkcmF0ZSBhIHNlcnZpY2UgZGVzY3JpcHRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VydmljZURlc2MoZmlsZSwgcGF0aCwgLi4ucGF0aHMpIHtcbiAgICBpZiAocGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbGUuc2VydmljZXNbcGF0aF07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IHBhY2thZ2VOYW1lID0gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IHdrdFB1YmxpY0ltcG9ydFBhdGhzID0ge1xuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2NvbXBpbGVyL3BsdWdpbi5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2FwaS5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2NwcF9mZWF0dXJlcy5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG9cIjogcGFja2FnZU5hbWUgKyBcIi93a3RcIixcbiAgICBcImdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG4gICAgXCJnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL2dvX2ZlYXR1cmVzLnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG4gICAgXCJnb29nbGUvcHJvdG9idWYvamF2YV9mZWF0dXJlcy5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL3NvdXJjZV9jb250ZXh0LnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG4gICAgXCJnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG4gICAgXCJnb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG4gICAgXCJnb29nbGUvcHJvdG9idWYvdHlwZS5wcm90b1wiOiBwYWNrYWdlTmFtZSArIFwiL3drdFwiLFxuICAgIFwiZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvXCI6IHBhY2thZ2VOYW1lICsgXCIvd2t0XCIsXG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG4vLyBiaW9tZS1pZ25vcmUgZm9ybWF0OiB3YW50IHRoaXMgdG8gcmVhZCB3ZWxsXG5leHBvcnQgY29uc3Qgc3ltYm9scyA9IHtcbiAgICBpc01lc3NhZ2U6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2lzLW1lc3NhZ2UuanNcIiwgZnJvbTogcGFja2FnZU5hbWUgfSxcbiAgICBNZXNzYWdlOiB7IHR5cGVPbmx5OiB0cnVlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL3R5cGVzLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lIH0sXG4gICAgY3JlYXRlOiB7IHR5cGVPbmx5OiBmYWxzZSwgYm9vdHN0cmFwV2t0RnJvbTogXCIuLi8uLi9jcmVhdGUuanNcIiwgZnJvbTogcGFja2FnZU5hbWUgfSxcbiAgICBmcm9tSnNvbjogeyB0eXBlT25seTogZmFsc2UsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vZnJvbS1qc29uLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lIH0sXG4gICAgZnJvbUpzb25TdHJpbmc6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2Zyb20tanNvbi5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSB9LFxuICAgIGZyb21CaW5hcnk6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2Zyb20tYmluYXJ5LmpzXCIsIGZyb206IHBhY2thZ2VOYW1lIH0sXG4gICAgdG9CaW5hcnk6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL3RvLWJpbmFyeS5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSB9LFxuICAgIHRvSnNvbjogeyB0eXBlT25seTogZmFsc2UsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vdG8tanNvbi5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSB9LFxuICAgIHRvSnNvblN0cmluZzogeyB0eXBlT25seTogZmFsc2UsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vdG8tanNvbi5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSB9LFxuICAgIHByb3RvSW50NjQ6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL3Byb3RvLWludDY0LmpzXCIsIGZyb206IHBhY2thZ2VOYW1lIH0sXG4gICAgSnNvblZhbHVlOiB7IHR5cGVPbmx5OiB0cnVlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2pzb24tdmFsdWUuanNcIiwgZnJvbTogcGFja2FnZU5hbWUgfSxcbiAgICBKc29uT2JqZWN0OiB7IHR5cGVPbmx5OiB0cnVlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2pzb24tdmFsdWUuanNcIiwgZnJvbTogcGFja2FnZU5hbWUgfSxcbiAgICBjb2RlZ2VuOiB7XG4gICAgICAgIGJvb3Q6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2NvZGVnZW52Mi9ib290LmpzXCIsIGZyb206IHBhY2thZ2VOYW1lICsgXCIvY29kZWdlbnYyXCIgfSxcbiAgICAgICAgZmlsZURlc2M6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2NvZGVnZW52Mi9maWxlLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lICsgXCIvY29kZWdlbnYyXCIgfSxcbiAgICAgICAgZW51bURlc2M6IHsgdHlwZU9ubHk6IGZhbHNlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2NvZGVnZW52Mi9lbnVtLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lICsgXCIvY29kZWdlbnYyXCIgfSxcbiAgICAgICAgZXh0RGVzYzogeyB0eXBlT25seTogZmFsc2UsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vY29kZWdlbnYyL2V4dGVuc2lvbi5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSArIFwiL2NvZGVnZW52MlwiIH0sXG4gICAgICAgIG1lc3NhZ2VEZXNjOiB7IHR5cGVPbmx5OiBmYWxzZSwgYm9vdHN0cmFwV2t0RnJvbTogXCIuLi8uLi9jb2RlZ2VudjIvbWVzc2FnZS5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSArIFwiL2NvZGVnZW52MlwiIH0sXG4gICAgICAgIHNlcnZpY2VEZXNjOiB7IHR5cGVPbmx5OiBmYWxzZSwgYm9vdHN0cmFwV2t0RnJvbTogXCIuLi8uLi9jb2RlZ2VudjIvc2VydmljZS5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSArIFwiL2NvZGVnZW52MlwiIH0sXG4gICAgICAgIHRzRW51bTogeyB0eXBlT25seTogZmFsc2UsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vY29kZWdlbnYyL2VudW0uanNcIiwgZnJvbTogcGFja2FnZU5hbWUgKyBcIi9jb2RlZ2VudjJcIiB9LFxuICAgICAgICBHZW5GaWxlOiB7IHR5cGVPbmx5OiB0cnVlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2NvZGVnZW52Mi90eXBlcy5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSArIFwiL2NvZGVnZW52MlwiIH0sXG4gICAgICAgIEdlbkVudW06IHsgdHlwZU9ubHk6IHRydWUsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vY29kZWdlbnYyL3R5cGVzLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lICsgXCIvY29kZWdlbnYyXCIgfSxcbiAgICAgICAgR2VuRXh0ZW5zaW9uOiB7IHR5cGVPbmx5OiB0cnVlLCBib290c3RyYXBXa3RGcm9tOiBcIi4uLy4uL2NvZGVnZW52Mi90eXBlcy5qc1wiLCBmcm9tOiBwYWNrYWdlTmFtZSArIFwiL2NvZGVnZW52MlwiIH0sXG4gICAgICAgIEdlbk1lc3NhZ2U6IHsgdHlwZU9ubHk6IHRydWUsIGJvb3RzdHJhcFdrdEZyb206IFwiLi4vLi4vY29kZWdlbnYyL3R5cGVzLmpzXCIsIGZyb206IHBhY2thZ2VOYW1lICsgXCIvY29kZWdlbnYyXCIgfSxcbiAgICAgICAgR2VuU2VydmljZTogeyB0eXBlT25seTogdHJ1ZSwgYm9vdHN0cmFwV2t0RnJvbTogXCIuLi8uLi9jb2RlZ2VudjIvdHlwZXMuanNcIiwgZnJvbTogcGFja2FnZU5hbWUgKyBcIi9jb2RlZ2VudjJcIiB9LFxuICAgIH0sXG59O1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL2Rlc2NyaXB0b3JzLmpzXCI7XG4vKipcbiAqIFJldHVybiB0aGUgVHlwZVNjcmlwdCB0eXBlIChhcyBhIHN0cmluZykgZm9yIHRoZSBnaXZlbiBzY2FsYXIgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxhclR5cGVTY3JpcHRUeXBlKHNjYWxhciwgbG9uZ0FzU3RyaW5nKSB7XG4gICAgc3dpdGNoIChzY2FsYXIpIHtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNUUklORzpcbiAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIHJldHVybiBcImJvb2xlYW5cIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICAgICAgcmV0dXJuIGxvbmdBc1N0cmluZyA/IFwic3RyaW5nXCIgOiBcImJpZ2ludFwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gXCJVaW50OEFycmF5XCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybiB0aGUgSlNPTiB0eXBlIChhcyBhIHN0cmluZykgZm9yIHRoZSBnaXZlbiBzY2FsYXIgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxhckpzb25UeXBlKHNjYWxhcikge1xuICAgIHN3aXRjaCAoc2NhbGFyKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5ET1VCTEU6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiBgbnVtYmVyIHwgXCJOYU5cIiB8IFwiSW5maW5pdHlcIiB8IFwiLUluZmluaXR5XCJgO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CWVRFUzpcbiAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuY2xhc3MgYnJhbmR2MiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudiA9IFwiY29kZWdlbnYyXCI7XG4gICAgICAgIHRoaXMuYSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmIgPSBmYWxzZTtcbiAgICB9XG59XG5leHBvcnQge307XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmV4cG9ydCAqIGZyb20gXCIuL2Jvb3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VtYmVkLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnVtLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9leHRlbnNpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ZpbGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lc3NhZ2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NlcnZpY2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N5bWJvbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NjYWxhci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXMuanNcIjtcbiIsICIvLyBAZ2VuZXJhdGVkIGJ5IHByb3RvYy1nZW4tZXMgdjIuOS4wIHdpdGggcGFyYW1ldGVyIFwidGFyZ2V0PXRzXCJcbi8vIEBnZW5lcmF0ZWQgZnJvbSBmaWxlIHByb3RvL3dzX21lc3NhZ2VzLnByb3RvIChwYWNrYWdlIGxpZ2h0c3BlZWRkdWVsLndzLCBzeW50YXggcHJvdG8zKVxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IHR5cGUgeyBHZW5FbnVtLCBHZW5GaWxlLCBHZW5NZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1Zi9jb2RlZ2VudjJcIjtcbmltcG9ydCB7IGVudW1EZXNjLCBmaWxlRGVzYywgbWVzc2FnZURlc2MgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmL2NvZGVnZW52MlwiO1xuaW1wb3J0IHR5cGUgeyBNZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZmlsZSBwcm90by93c19tZXNzYWdlcy5wcm90by5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbGVfcHJvdG9fd3NfbWVzc2FnZXM6IEdlbkZpbGUgPSAvKkBfX1BVUkVfXyovXG4gIGZpbGVEZXNjKFwiQ2hkd2NtOTBieTkzYzE5dFpYTnpZV2RsY3k1d2NtOTBieElSYkdsbmFIUnpjR1ZsWkdSMVpXd3VkM01pMUE0S0NsZHpSVzUyWld4dmNHVVNOZ29NYzNSaGRHVmZkWEJrWVhSbEdBRWdBU2dMTWg0dWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVUzUmhkR1ZWY0dSaGRHVklBQkkxQ2dseWIyOXRYMloxYkd3WUFpQUJLQXN5SUM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1U2IyOXRSblZzYkVWeWNtOXlTQUFTTFFvRWFtOXBiaGdLSUFFb0N6SWRMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMa05zYVdWdWRFcHZhVzVJQUJJd0NnbHpjR0YzYmw5aWIzUVlDeUFCS0FzeUd5NXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NVRjR0YzYmtKdmRFZ0FFallLREdGa1pGOTNZWGx3YjJsdWRCZ01JQUVvQ3pJZUxteHBaMmgwYzNCbFpXUmtkV1ZzTG5kekxrRmtaRmRoZVhCdmFXNTBTQUFTUEFvUGRYQmtZWFJsWDNkaGVYQnZhVzUwR0EwZ0FTZ0xNaUV1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VlhCa1lYUmxWMkY1Y0c5cGJuUklBQkk0Q2cxdGIzWmxYM2RoZVhCdmFXNTBHQTRnQVNnTE1oOHViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVUVzkyWlZkaGVYQnZhVzUwU0FBU1BBb1BaR1ZzWlhSbFgzZGhlWEJ2YVc1MEdBOGdBU2dMTWlFdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVJHVnNaWFJsVjJGNWNHOXBiblJJQUJJOENnOWpiR1ZoY2w5M1lYbHdiMmx1ZEhNWUVDQUJLQXN5SVM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1RGJHVmhjbGRoZVhCdmFXNTBjMGdBRWtBS0VXTnZibVpwWjNWeVpWOXRhWE56YVd4bEdCRWdBU2dMTWlNdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVEyOXVabWxuZFhKbFRXbHpjMmxzWlVnQUVrVUtGR0ZrWkY5dGFYTnphV3hsWDNkaGVYQnZhVzUwR0JJZ0FTZ0xNaVV1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011UVdSa1RXbHpjMmxzWlZkaGVYQnZhVzUwU0FBU1Znb2RkWEJrWVhSbFgyMXBjM05wYkdWZmQyRjVjRzlwYm5SZmMzQmxaV1FZRXlBQktBc3lMUzVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVWY0dSaGRHVk5hWE56YVd4bFYyRjVjRzlwYm5SVGNHVmxaRWdBRWtjS0ZXMXZkbVZmYldsemMybHNaVjkzWVhsd2IybHVkQmdVSUFFb0N6SW1MbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMazF2ZG1WTmFYTnphV3hsVjJGNWNHOXBiblJJQUJKTENoZGtaV3hsZEdWZmJXbHpjMmxzWlY5M1lYbHdiMmx1ZEJnVklBRW9DeklvTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGtSbGJHVjBaVTFwYzNOcGJHVlhZWGx3YjJsdWRFZ0FFa01LRTJOc1pXRnlYMjFwYzNOcGJHVmZjbTkxZEdVWUZpQUJLQXN5SkM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1RGJHVmhjazFwYzNOcGJHVlNiM1YwWlVnQUVqOEtFV0ZrWkY5dGFYTnphV3hsWDNKdmRYUmxHQmNnQVNnTE1pSXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVRV1JrVFdsemMybHNaVkp2ZFhSbFNBQVNSUW9VY21WdVlXMWxYMjFwYzNOcGJHVmZjbTkxZEdVWUdDQUJLQXN5SlM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1U1pXNWhiV1ZOYVhOemFXeGxVbTkxZEdWSUFCSkZDaFJrWld4bGRHVmZiV2x6YzJsc1pWOXliM1YwWlJnWklBRW9DeklsTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGtSbGJHVjBaVTFwYzNOcGJHVlNiM1YwWlVnQUVrd0tHSE5sZEY5aFkzUnBkbVZmYldsemMybHNaVjl5YjNWMFpSZ2FJQUVvQ3pJb0xteHBaMmgwYzNCbFpXUmtkV1ZzTG5kekxsTmxkRUZqZEdsMlpVMXBjM05wYkdWU2IzVjBaVWdBRWpvS0RteGhkVzVqYUY5dGFYTnphV3hsR0JzZ0FTZ0xNaUF1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VEdGMWJtTm9UV2x6YzJsc1pVZ0FFakFLQ1dSaFoxOXpkR0Z5ZEJnZUlBRW9DekliTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGtSaFoxTjBZWEowU0FBU01nb0taR0ZuWDJOaGJtTmxiQmdmSUFFb0N6SWNMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMa1JoWjBOaGJtTmxiRWdBRWpjS0RXUmhaMTl6ZEc5eWVWOWhZMnNZSUNBQktBc3lIaTVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVFWVdkVGRHOXllVUZqYTBnQUVpNEtDR1JoWjE5c2FYTjBHQ0VnQVNnTE1ob3ViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVSR0ZuVEdsemRFZ0FFa0VLRW0xcGMzTnBiMjVmYzNCaGQyNWZkMkYyWlJnb0lBRW9DeklqTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGsxcGMzTnBiMjVUY0dGM2JsZGhkbVZJQUJKRENoTnRhWE56YVc5dVgzTjBiM0o1WDJWMlpXNTBHQ2tnQVNnTE1pUXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVUV2x6YzJsdmJsTjBiM0o1UlhabGJuUklBQkkvQ2hGa1lXZGZiR2x6ZEY5eVpYTndiMjV6WlJneUlBRW9DeklpTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGtSaFoweHBjM1JTWlhOd2IyNXpaVWdBRWtzS0YyMXBjM05wYjI1ZlltVmhZMjl1WDNOdVlYQnphRzkwR0R3Z0FTZ0xNaWd1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VFdsemMybHZia0psWVdOdmJsTnVZWEJ6YUc5MFNBQVNSUW9VYldsemMybHZibDlpWldGamIyNWZaR1ZzZEdFWVBTQUJLQXN5SlM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1TmFYTnphVzl1UW1WaFkyOXVSR1ZzZEdGSUFFSUpDZ2R3WVhsc2IyRmtJck1GQ2d0VGRHRjBaVlZ3WkdGMFpSSUxDZ051YjNjWUFTQUJLQUVTSkFvQ2JXVVlBaUFCS0FzeUdDNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NUhhRzl6ZEJJb0NnWm5hRzl6ZEhNWUF5QURLQXN5R0M1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1SGFHOXpkQklwQ2dSdFpYUmhHQVFnQVNnTE1oc3ViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVVbTl2YlUxbGRHRVNMQW9JYldsemMybHNaWE1ZQlNBREtBc3lHaTVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVOYVhOemFXeGxFamdLRG0xcGMzTnBiR1ZmWTI5dVptbG5HQVlnQVNnTE1pQXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVUV2x6YzJsc1pVTnZibVpwWnhJMkNoRnRhWE56YVd4bFgzZGhlWEJ2YVc1MGN4Z0hJQU1vQ3pJYkxteHBaMmgwYzNCbFpXUmtkV1ZzTG5kekxsZGhlWEJ2YVc1MEVqY0tEbTFwYzNOcGJHVmZjbTkxZEdWekdBZ2dBeWdMTWg4dWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVRXbHpjMmxzWlZKdmRYUmxFaHdLRkdGamRHbDJaVjl0YVhOemFXeGxYM0p2ZFhSbEdBa2dBU2dKRWhvS0VtNWxlSFJmYldsemMybHNaVjl5WldGa2VSZ0tJQUVvQVJJdENnTmtZV2NZQ3lBQktBc3lHeTVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVFWVdkVGRHRjBaVWdBaUFFQkVqUUtDV2x1ZG1WdWRHOXllUmdNSUFFb0N6SWNMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMa2x1ZG1WdWRHOXllVWdCaUFFQkVqRUtCWE4wYjNKNUdBMGdBU2dMTWgwdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVUzUnZjbmxUZEdGMFpVZ0NpQUVCRWtBS0RHTmhjR0ZpYVd4cGRHbGxjeGdPSUFFb0N6SWxMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMbEJzWVhsbGNrTmhjR0ZpYVd4cGRHbGxjMGdEaUFFQlFnWUtCRjlrWVdkQ0RBb0tYMmx1ZG1WdWRHOXllVUlJQ2daZmMzUnZjbmxDRHdvTlgyTmhjR0ZpYVd4cGRHbGxjeUlnQ2cxU2IyOXRSblZzYkVWeWNtOXlFZzhLQjIxbGMzTmhaMlVZQVNBQktBa2lSZ29LUTJ4cFpXNTBTbTlwYmhJTUNnUnVZVzFsR0FFZ0FTZ0pFZ3dLQkhKdmIyMFlBaUFCS0FrU0RRb0ZiV0Z3WDNjWUF5QUJLQUVTRFFvRmJXRndYMmdZQkNBQktBRWlDZ29JVTNCaGQyNUNiM1FpTWdvTFFXUmtWMkY1Y0c5cGJuUVNDUW9CZUJnQklBRW9BUklKQ2dGNUdBSWdBU2dCRWcwS0JYTndaV1ZrR0FNZ0FTZ0JJaTRLRGxWd1pHRjBaVmRoZVhCdmFXNTBFZzBLQldsdVpHVjRHQUVnQVNnRkVnMEtCWE53WldWa0dBSWdBU2dCSWpNS0RFMXZkbVZYWVhsd2IybHVkQklOQ2dWcGJtUmxlQmdCSUFFb0JSSUpDZ0Y0R0FJZ0FTZ0JFZ2tLQVhrWUF5QUJLQUVpSHdvT1JHVnNaWFJsVjJGNWNHOXBiblFTRFFvRmFXNWtaWGdZQVNBQktBVWlFQW9PUTJ4bFlYSlhZWGx3YjJsdWRITWlQd29RUTI5dVptbG5kWEpsVFdsemMybHNaUklWQ2cxdGFYTnphV3hsWDNOd1pXVmtHQUVnQVNnQkVoUUtERzFwYzNOcGJHVmZZV2R5YnhnQ0lBRW9BU0pMQ2hKQlpHUk5hWE56YVd4bFYyRjVjRzlwYm5RU0VBb0ljbTkxZEdWZmFXUVlBU0FCS0FrU0NRb0JlQmdDSUFFb0FSSUpDZ0Y1R0FNZ0FTZ0JFZzBLQlhOd1pXVmtHQVFnQVNnQklrd0tHbFZ3WkdGMFpVMXBjM05wYkdWWFlYbHdiMmx1ZEZOd1pXVmtFaEFLQ0hKdmRYUmxYMmxrR0FFZ0FTZ0pFZzBLQldsdVpHVjRHQUlnQVNnRkVnMEtCWE53WldWa0dBTWdBU2dCSWt3S0UwMXZkbVZOYVhOemFXeGxWMkY1Y0c5cGJuUVNFQW9JY205MWRHVmZhV1FZQVNBQktBa1NEUW9GYVc1a1pYZ1lBaUFCS0FVU0NRb0JlQmdESUFFb0FSSUpDZ0Y1R0FRZ0FTZ0JJamdLRlVSbGJHVjBaVTFwYzNOcGJHVlhZWGx3YjJsdWRCSVFDZ2h5YjNWMFpWOXBaQmdCSUFFb0NSSU5DZ1ZwYm1SbGVCZ0NJQUVvQlNJbENoRkRiR1ZoY2sxcGMzTnBiR1ZTYjNWMFpSSVFDZ2h5YjNWMFpWOXBaQmdCSUFFb0NTSWZDZzlCWkdSTmFYTnphV3hsVW05MWRHVVNEQW9FYm1GdFpSZ0JJQUVvQ1NJMENoSlNaVzVoYldWTmFYTnphV3hsVW05MWRHVVNFQW9JY205MWRHVmZhV1FZQVNBQktBa1NEQW9FYm1GdFpSZ0NJQUVvQ1NJbUNoSkVaV3hsZEdWTmFYTnphV3hsVW05MWRHVVNFQW9JY205MWRHVmZhV1FZQVNBQktBa2lLUW9WVTJWMFFXTjBhWFpsVFdsemMybHNaVkp2ZFhSbEVoQUtDSEp2ZFhSbFgybGtHQUVnQVNnSklpRUtEVXhoZFc1amFFMXBjM05wYkdVU0VBb0ljbTkxZEdWZmFXUVlBU0FCS0FraWdnSUtCVWRvYjNOMEVnb0tBbWxrR0FFZ0FTZ0pFZ2tLQVhnWUFpQUJLQUVTQ1FvQmVSZ0RJQUVvQVJJS0NnSjJlQmdFSUFFb0FSSUtDZ0oyZVJnRklBRW9BUklKQ2dGMEdBWWdBU2dCRWd3S0JITmxiR1lZQnlBQktBZ1NMZ29KZDJGNWNHOXBiblJ6R0FnZ0F5Z0xNaHN1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VjJGNWNHOXBiblFTSGdvV1kzVnljbVZ1ZEY5M1lYbHdiMmx1ZEY5cGJtUmxlQmdKSUFFb0JSSUtDZ0pvY0JnS0lBRW9CUklOQ2dWcmFXeHNjeGdMSUFFb0JSSXlDZ1JvWldGMEdBd2dBU2dMTWg4dWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVUyaHBjRWhsWVhSV2FXVjNTQUNJQVFGQ0J3b0ZYMmhsWVhRaUx3b0lWMkY1Y0c5cGJuUVNDUW9CZUJnQklBRW9BUklKQ2dGNUdBSWdBU2dCRWcwS0JYTndaV1ZrR0FNZ0FTZ0JJaXNLQ0ZKdmIyMU5aWFJoRWdrS0FXTVlBU0FCS0FFU0NRb0JkeGdDSUFFb0FSSUpDZ0ZvR0FNZ0FTZ0JJb3NDQ2dkTmFYTnphV3hsRWdvS0FtbGtHQUVnQVNnSkVnMEtCVzkzYm1WeUdBSWdBU2dKRWd3S0JITmxiR1lZQXlBQktBZ1NDUW9CZUJnRUlBRW9BUklKQ2dGNUdBVWdBU2dCRWdvS0FuWjRHQVlnQVNnQkVnb0tBblo1R0FjZ0FTZ0JFZ2tLQVhRWUNDQUJLQUVTRXdvTFlXZHliMTl5WVdScGRYTVlDU0FCS0FFU0VBb0liR2xtWlhScGJXVVlDaUFCS0FFU0V3b0xiR0YxYm1Ob1gzUnBiV1VZQ3lBQktBRVNFZ29LWlhod2FYSmxjMTloZEJnTUlBRW9BUklSQ2dsMFlYSm5aWFJmYVdRWURTQUJLQWtTTWdvRWFHVmhkQmdPSUFFb0N6SWZMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMbE5vYVhCSVpXRjBWbWxsZDBnQWlBRUJRZ2NLQlY5b1pXRjBJc1lCQ2cxTmFYTnphV3hsUTI5dVptbG5FZzBLQlhOd1pXVmtHQUVnQVNnQkVoRUtDWE53WldWa1gyMXBiaGdDSUFFb0FSSVJDZ2x6Y0dWbFpGOXRZWGdZQXlBQktBRVNFQW9JWVdkeWIxOXRhVzRZQkNBQktBRVNFd29MWVdkeWIxOXlZV1JwZFhNWUJTQUJLQUVTRUFvSWJHbG1aWFJwYldVWUJpQUJLQUVTTndvTGFHVmhkRjlqYjI1bWFXY1lCeUFCS0FzeUhTNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NUlaV0YwVUdGeVlXMXpTQUNJQVFGQ0Rnb01YMmhsWVhSZlkyOXVabWxuSWxnS0RFMXBjM05wYkdWU2IzVjBaUklLQ2dKcFpCZ0JJQUVvQ1JJTUNnUnVZVzFsR0FJZ0FTZ0pFaTRLQ1hkaGVYQnZhVzUwY3hnRElBTW9DekliTG14cFoyaDBjM0JsWldSa2RXVnNMbmR6TGxkaGVYQnZhVzUwSW5ZS0RGTm9hWEJJWldGMFZtbGxkeElKQ2dGMkdBRWdBU2dCRWdrS0FXMFlBaUFCS0FFU0NRb0JkeGdESUFFb0FSSUpDZ0Z2R0FRZ0FTZ0JFZ29LQW0xekdBVWdBU2dCRWdvS0FuTjFHQVlnQVNnQkVnb0tBbXQxR0FjZ0FTZ0JFZ29LQW10a0dBZ2dBU2dCRWdvS0FtVjRHQWtnQVNnQklvQUJDZ3BJWldGMFVHRnlZVzF6RWdzS0EyMWhlQmdCSUFFb0FSSVBDZ2QzWVhKdVgyRjBHQUlnQVNnQkVoTUtDMjkyWlhKb1pXRjBYMkYwR0FNZ0FTZ0JFaFFLREcxaGNtdGxjbDl6Y0dWbFpCZ0VJQUVvQVJJTUNnUnJYM1Z3R0FVZ0FTZ0JFZzRLQm10ZlpHOTNiaGdHSUFFb0FSSUxDZ05sZUhBWUJ5QUJLQUVpZHdvTlZYQm5jbUZrWlVWbVptVmpkQkl5Q2dSMGVYQmxHQUVnQVNnT01pUXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVWWEJuY21Ga1pVVm1abVZqZEZSNWNHVVNGQW9LYlhWc2RHbHdiR2xsY2hnQ0lBRW9BVWdBRWhNS0NYVnViRzlqYTE5cFpCZ0RJQUVvQ1VnQVFnY0tCWFpoYkhWbElua0tFbEJzWVhsbGNrTmhjR0ZpYVd4cGRHbGxjeElZQ2hCemNHVmxaRjl0ZFd4MGFYQnNhV1Z5R0FFZ0FTZ0JFaGtLRVhWdWJHOWphMlZrWDIxcGMzTnBiR1Z6R0FJZ0F5Z0pFaFVLRFdobFlYUmZZMkZ3WVdOcGRIa1lBeUFCS0FFU0Z3b1BhR1ZoZEY5bFptWnBZMmxsYm1ONUdBUWdBU2dCSXZRQkNnZEVZV2RPYjJSbEVnb0tBbWxrR0FFZ0FTZ0pFaXdLQkd0cGJtUVlBaUFCS0E0eUhpNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NUVZV2RPYjJSbFMybHVaQklOQ2dWc1lXSmxiQmdESUFFb0NSSXdDZ1p6ZEdGMGRYTVlCQ0FCS0E0eUlDNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NUVZV2RPYjJSbFUzUmhkSFZ6RWhNS0MzSmxiV0ZwYm1sdVoxOXpHQVVnQVNnQkVoSUtDbVIxY21GMGFXOXVYM01ZQmlBQktBRVNFZ29LY21Wd1pXRjBZV0pzWlJnSElBRW9DQkl4Q2dkbFptWmxZM1J6R0FnZ0F5Z0xNaUF1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VlhCbmNtRmtaVVZtWm1WamRDSTFDZ2hFWVdkVGRHRjBaUklwQ2dWdWIyUmxjeGdCSUFNb0N6SWFMbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMa1JoWjA1dlpHVWlHd29JUkdGblUzUmhjblFTRHdvSGJtOWtaVjlwWkJnQklBRW9DU0ljQ2dsRVlXZERZVzVqWld3U0R3b0hibTlrWlY5cFpCZ0JJQUVvQ1NJeENndEVZV2RUZEc5eWVVRmpheElQQ2dkdWIyUmxYMmxrR0FFZ0FTZ0pFaEVLQ1dOb2IybGpaVjlwWkJnQ0lBRW9DU0lKQ2dkRVlXZE1hWE4wSWpzS0QwUmhaMHhwYzNSU1pYTndiMjV6WlJJb0NnTmtZV2NZQVNBQktBc3lHeTVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVFWVdkVGRHRjBaU0phQ2cxSmJuWmxiblJ2Y25sSmRHVnRFZ3dLQkhSNWNHVVlBU0FCS0FrU0Vnb0tkbUZ5YVdGdWRGOXBaQmdDSUFFb0NSSVZDZzFvWldGMFgyTmhjR0ZqYVhSNUdBTWdBU2dCRWhBS0NIRjFZVzUwYVhSNUdBUWdBU2dGSWp3S0NVbHVkbVZ1ZEc5eWVSSXZDZ1ZwZEdWdGN4Z0JJQU1vQ3pJZ0xteHBaMmgwYzNCbFpXUmtkV1ZzTG5kekxrbHVkbVZ1ZEc5eWVVbDBaVzBpTHdvVFUzUnZjbmxFYVdGc2IyZDFaVU5vYjJsalpSSUtDZ0pwWkJnQklBRW9DUklNQ2dSMFpYaDBHQUlnQVNnSklpOEtFRk4wYjNKNVZIVjBiM0pwWVd4VWFYQVNEUW9GZEdsMGJHVVlBU0FCS0FrU0RBb0VkR1Y0ZEJnQ0lBRW9DU0tBQWdvTlUzUnZjbmxFYVdGc2IyZDFaUklQQ2dkemNHVmhhMlZ5R0FFZ0FTZ0pFZ3dLQkhSbGVIUVlBaUFCS0FrU0xnb0dhVzUwWlc1MEdBTWdBU2dPTWg0dWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVUzUnZjbmxKYm5SbGJuUVNGZ29PWTI5dWRHbHVkV1ZmYkdGaVpXd1lCQ0FCS0FrU053b0hZMmh2YVdObGN4Z0ZJQU1vQ3pJbUxteHBaMmgwYzNCbFpXUmtkV1ZzTG5kekxsTjBiM0o1UkdsaGJHOW5kV1ZEYUc5cFkyVVNQZ29NZEhWMGIzSnBZV3hmZEdsd0dBWWdBU2dMTWlNdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVUzUnZjbmxVZFhSdmNtbGhiRlJwY0VnQWlBRUJRZzhLRFY5MGRYUnZjbWxoYkY5MGFYQWlSQW9LVTNSdmNubEZkbVZ1ZEJJU0NncGphR0Z3ZEdWeVgybGtHQUVnQVNnSkVnOEtCMjV2WkdWZmFXUVlBaUFCS0FrU0VRb0pkR2x0WlhOMFlXMXdHQU1nQVNnQklwY0NDZ3BUZEc5eWVWTjBZWFJsRWhNS0MyRmpkR2wyWlY5dWIyUmxHQUVnQVNnSkVqY0tDR1JwWVd4dlozVmxHQUlnQVNnTE1pQXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVVM1J2Y25sRWFXRnNiMmQxWlVnQWlBRUJFaEVLQ1dGMllXbHNZV0pzWlJnRElBTW9DUkkzQ2dWbWJHRm5jeGdFSUFNb0N6SW9MbXhwWjJoMGMzQmxaV1JrZFdWc0xuZHpMbE4wYjNKNVUzUmhkR1V1Um14aFozTkZiblJ5ZVJJMENnMXlaV05sYm5SZlpYWmxiblJ6R0FVZ0F5Z0xNaDB1YkdsbmFIUnpjR1ZsWkdSMVpXd3VkM011VTNSdmNubEZkbVZ1ZEJvc0NncEdiR0ZuYzBWdWRISjVFZ3NLQTJ0bGVSZ0JJQUVvQ1JJTkNnVjJZV3gxWlJnQ0lBRW9DRG9DT0FGQ0N3b0pYMlJwWVd4dlozVmxJaVlLRUUxcGMzTnBiMjVUY0dGM2JsZGhkbVVTRWdvS2QyRjJaVjlwYm1SbGVCZ0JJQUVvQlNJeUNoRk5hWE56YVc5dVUzUnZjbmxGZG1WdWRCSU5DZ1ZsZG1WdWRCZ0JJQUVvQ1JJT0NnWmlaV0ZqYjI0WUFpQUJLQVVpaWdJS0ZVMXBjM05wYjI1Q1pXRmpiMjVUYm1Gd2MyaHZkQklTQ2dwdGFYTnphVzl1WDJsa0dBRWdBU2dKRWhNS0MyeGhlVzkxZEY5elpXVmtHQUlnQVNnRUVoTUtDM05sY25abGNsOTBhVzFsR0FNZ0FTZ0JFanNLQjJKbFlXTnZibk1ZQkNBREtBc3lLaTVzYVdkb2RITndaV1ZrWkhWbGJDNTNjeTVOYVhOemFXOXVRbVZoWTI5dVJHVm1hVzVwZEdsdmJoSTNDZ2R3YkdGNVpYSnpHQVVnQXlnTE1pWXViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVUV2x6YzJsdmJrSmxZV052YmxCc1lYbGxjaEk5Q2dwbGJtTnZkVzUwWlhKekdBWWdBeWdMTWlrdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVRXbHpjMmx2YmtKbFlXTnZia1Z1WTI5MWJuUmxjaUpxQ2hkTmFYTnphVzl1UW1WaFkyOXVSR1ZtYVc1cGRHbHZiaElLQ2dKcFpCZ0JJQUVvQ1JJUENnZHZjbVJwYm1Gc0dBSWdBU2dGRWdrS0FYZ1lBeUFCS0FFU0NRb0JlUmdFSUFFb0FSSU9DZ1p5WVdScGRYTVlCU0FCS0FFU0RBb0VjMlZsWkJnR0lBRW9BeUtrQWdvVFRXbHpjMmx2YmtKbFlXTnZibEJzWVhsbGNoSVJDZ2x3YkdGNVpYSmZhV1FZQVNBQktBa1NGUW9OWTNWeWNtVnVkRjlwYm1SbGVCZ0NJQUVvQlJJU0NncG9iMnhrWDJGalkzVnRHQU1nQVNnQkVoVUtEV2h2YkdSZmNtVnhkV2x5WldRWUJDQUJLQUVTRlFvTllXTjBhWFpsWDJKbFlXTnZiaGdGSUFFb0NSSVNDZ3BrYVhOamIzWmxjbVZrR0FZZ0F5Z0pFaEVLQ1dOdmJYQnNaWFJsWkJnSElBTW9DUkpJQ2dsamIyOXNaRzkzYm5NWUNDQURLQXN5TlM1c2FXZG9kSE53WldWa1pIVmxiQzUzY3k1TmFYTnphVzl1UW1WaFkyOXVVR3hoZVdWeUxrTnZiMnhrYjNkdWMwVnVkSEo1R2pBS0RrTnZiMnhrYjNkdWMwVnVkSEo1RWdzS0EydGxlUmdCSUFFb0NSSU5DZ1YyWVd4MVpSZ0NJQUVvQVRvQ09BRWlsZ0VLRWsxcGMzTnBiMjVDWldGamIyNUVaV3gwWVJJOENnZHdiR0Y1WlhKekdBRWdBeWdMTWlzdWJHbG5hSFJ6Y0dWbFpHUjFaV3d1ZDNNdVRXbHpjMmx2YmtKbFlXTnZibEJzWVhsbGNrUmxiSFJoRWtJS0NtVnVZMjkxYm5SbGNuTVlBaUFES0FzeUxpNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NU5hWE56YVc5dVFtVmhZMjl1Ulc1amIzVnVkR1Z5UlhabGJuUWk0Z0VLR0UxcGMzTnBiMjVDWldGamIyNVFiR0Y1WlhKRVpXeDBZUkkzQ2dSMGVYQmxHQUVnQVNnT01pa3ViR2xuYUhSemNHVmxaR1IxWld3dWQzTXVUV2x6YzJsdmJrSmxZV052YmtSbGJIUmhWSGx3WlJJUkNnbHdiR0Y1WlhKZmFXUVlBaUFCS0FrU0VRb0pZbVZoWTI5dVgybGtHQU1nQVNnSkVnOEtCMjl5WkdsdVlXd1lCQ0FCS0FVU0Vnb0thRzlzWkY5aFkyTjFiUmdGSUFFb0FSSVZDZzFvYjJ4a1gzSmxjWFZwY21Wa0dBWWdBU2dCRWhZS0RtTnZiMnhrYjNkdVgzVnVkR2xzR0FjZ0FTZ0JFaE1LQzNObGNuWmxjbDkwYVcxbEdBZ2dBU2dCSW4wS0ZrMXBjM05wYjI1Q1pXRmpiMjVGYm1OdmRXNTBaWElTRkFvTVpXNWpiM1Z1ZEdWeVgybGtHQUVnQVNnSkVoRUtDV0psWVdOdmJsOXBaQmdDSUFFb0NSSVNDZ3AzWVhabFgybHVaR1Y0R0FNZ0FTZ0ZFaElLQ25Od1lYZHVaV1JmWVhRWUJDQUJLQUVTRWdvS1pYaHdhWEpsYzE5aGRCZ0ZJQUVvQVNMT0FRb2JUV2x6YzJsdmJrSmxZV052YmtWdVkyOTFiblJsY2tWMlpXNTBFam9LQkhSNWNHVVlBU0FCS0E0eUxDNXNhV2RvZEhOd1pXVmtaSFZsYkM1M2N5NU5hWE56YVc5dVJXNWpiM1Z1ZEdWeVJYWmxiblJVZVhCbEVoUUtER1Z1WTI5MWJuUmxjbDlwWkJnQ0lBRW9DUklSQ2dsaVpXRmpiMjVmYVdRWUF5QUJLQWtTRWdvS2QyRjJaVjlwYm1SbGVCZ0VJQUVvQlJJU0NncHpjR0YzYm1Wa1gyRjBHQVVnQVNnQkVoSUtDbVY0Y0dseVpYTmZZWFFZQmlBQktBRVNEZ29HY21WaGMyOXVHQWNnQVNnSktxc0JDZzFFWVdkT2IyUmxVM1JoZEhWekVoOEtHMFJCUjE5T1QwUkZYMU5VUVZSVlUxOVZUbE5RUlVOSlJrbEZSQkFBRWhvS0ZrUkJSMTlPVDBSRlgxTlVRVlJWVTE5TVQwTkxSVVFRQVJJZENobEVRVWRmVGs5RVJWOVRWRUZVVlZOZlFWWkJTVXhCUWt4RkVBSVNId29iUkVGSFgwNVBSRVZmVTFSQlZGVlRYMGxPWDFCU1QwZFNSVk5URUFNU0hRb1pSRUZIWDA1UFJFVmZVMVJCVkZWVFgwTlBUVkJNUlZSRlJCQUVLcEVCQ2d0RVlXZE9iMlJsUzJsdVpCSWRDaGxFUVVkZlRrOUVSVjlMU1U1RVgxVk9VMUJGUTBsR1NVVkVFQUFTR1FvVlJFRkhYMDVQUkVWZlMwbE9SRjlHUVVOVVQxSlpFQUVTRmdvU1JFRkhYMDVQUkVWZlMwbE9SRjlWVGtsVUVBSVNGd29UUkVGSFgwNVBSRVZmUzBsT1JGOVRWRTlTV1JBREVoY0tFMFJCUjE5T1QwUkZYMHRKVGtSZlExSkJSbFFRQkNyYUFRb1JWWEJuY21Ga1pVVm1abVZqZEZSNWNHVVNJd29mVlZCSFVrRkVSVjlGUmtaRlExUmZWRmxRUlY5VlRsTlFSVU5KUmtsRlJCQUFFaWdLSkZWUVIxSkJSRVZmUlVaR1JVTlVYMVJaVUVWZlUxQkZSVVJmVFZWTVZFbFFURWxGVWhBQkVpWUtJbFZRUjFKQlJFVmZSVVpHUlVOVVgxUlpVRVZmVFVsVFUwbE1SVjlWVGt4UFEwc1FBaElsQ2lGVlVFZFNRVVJGWDBWR1JrVkRWRjlVV1ZCRlgwaEZRVlJmUTBGUVFVTkpWRmtRQXhJbkNpTlZVRWRTUVVSRlgwVkdSa1ZEVkY5VVdWQkZYMGhGUVZSZlJVWkdTVU5KUlU1RFdSQUVLbHdLQzFOMGIzSjVTVzUwWlc1MEVod0tHRk5VVDFKWlgwbE9WRVZPVkY5VlRsTlFSVU5KUmtsRlJCQUFFaGdLRkZOVVQxSlpYMGxPVkVWT1ZGOUdRVU5VVDFKWkVBRVNGUW9SVTFSUFVsbGZTVTVVUlU1VVgxVk9TVlFRQWlxZ0Fnb1dUV2x6YzJsdmJrSmxZV052YmtSbGJIUmhWSGx3WlJJa0NpQk5TVk5UU1U5T1gwSkZRVU5QVGw5RVJVeFVRVjlWVGxOUVJVTkpSa2xGUkJBQUVpTUtIMDFKVTFOSlQwNWZRa1ZCUTA5T1gwUkZURlJCWDBSSlUwTlBWa1ZTUlVRUUFSSW1DaUpOU1ZOVFNVOU9YMEpGUVVOUFRsOUVSVXhVUVY5SVQweEVYMUJTVDBkU1JWTlRFQUlTSXdvZlRVbFRVMGxQVGw5Q1JVRkRUMDVmUkVWTVZFRmZTRTlNUkY5U1JWTkZWQkFERWg4S0cwMUpVMU5KVDA1ZlFrVkJRMDlPWDBSRlRGUkJYMHhQUTB0RlJCQUVFaUVLSFUxSlUxTkpUMDVmUWtWQlEwOU9YMFJGVEZSQlgwTlBUMHhFVDFkT0VBVVNLZ29tVFVsVFUwbFBUbDlDUlVGRFQwNWZSRVZNVkVGZlRVbFRVMGxQVGw5RFQwMVFURVZVUlVRUUJpclhBUW9aVFdsemMybHZia1Z1WTI5MWJuUmxja1YyWlc1MFZIbHdaUkluQ2lOTlNWTlRTVTlPWDBWT1EwOVZUbFJGVWw5RlZrVk9WRjlWVGxOUVJVTkpSa2xGUkJBQUVpTUtIMDFKVTFOSlQwNWZSVTVEVDFWT1ZFVlNYMFZXUlU1VVgxTlFRVmRPUlVRUUFSSWpDaDlOU1ZOVFNVOU9YMFZPUTA5VlRsUkZVbDlGVmtWT1ZGOURURVZCVWtWRUVBSVNJd29mVFVsVFUwbFBUbDlGVGtOUFZVNVVSVkpmUlZaRlRsUmZWRWxOUlU5VlZCQURFaUlLSGsxSlUxTkpUMDVmUlU1RFQxVk9WRVZTWDBWV1JVNVVYMUJWVWtkRlJCQUVRaUphSUV4cFoyaDBVM0JsWldSRWRXVnNMMmx1ZEdWeWJtRnNMM0J5YjNSdkwzZHpZZ1p3Y205MGJ6TVwiKTtcblxuLyoqXG4gKiBXc0VudmVsb3BlIHdyYXBzIGFsbCBXZWJTb2NrZXQgbWVzc2FnZXMgaW4gYSBkaXNjcmltaW5hdGVkIHVuaW9uXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuV3NFbnZlbG9wZVxuICovXG5leHBvcnQgdHlwZSBXc0VudmVsb3BlID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLldzRW52ZWxvcGVcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gb25lb2YgbGlnaHRzcGVlZGR1ZWwud3MuV3NFbnZlbG9wZS5wYXlsb2FkXG4gICAqL1xuICBwYXlsb2FkOiB7XG4gICAgLyoqXG4gICAgICogU2VydmVyIFx1MjE5MiBDbGllbnRcbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuU3RhdGVVcGRhdGUgc3RhdGVfdXBkYXRlID0gMTtcbiAgICAgKi9cbiAgICB2YWx1ZTogU3RhdGVVcGRhdGU7XG4gICAgY2FzZTogXCJzdGF0ZVVwZGF0ZVwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuUm9vbUZ1bGxFcnJvciByb29tX2Z1bGwgPSAyO1xuICAgICAqL1xuICAgIHZhbHVlOiBSb29tRnVsbEVycm9yO1xuICAgIGNhc2U6IFwicm9vbUZ1bGxcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBDbGllbnQgXHUyMTkyIFNlcnZlclxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5DbGllbnRKb2luIGpvaW4gPSAxMDtcbiAgICAgKi9cbiAgICB2YWx1ZTogQ2xpZW50Sm9pbjtcbiAgICBjYXNlOiBcImpvaW5cIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLlNwYXduQm90IHNwYXduX2JvdCA9IDExO1xuICAgICAqL1xuICAgIHZhbHVlOiBTcGF3bkJvdDtcbiAgICBjYXNlOiBcInNwYXduQm90XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5BZGRXYXlwb2ludCBhZGRfd2F5cG9pbnQgPSAxMjtcbiAgICAgKi9cbiAgICB2YWx1ZTogQWRkV2F5cG9pbnQ7XG4gICAgY2FzZTogXCJhZGRXYXlwb2ludFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuVXBkYXRlV2F5cG9pbnQgdXBkYXRlX3dheXBvaW50ID0gMTM7XG4gICAgICovXG4gICAgdmFsdWU6IFVwZGF0ZVdheXBvaW50O1xuICAgIGNhc2U6IFwidXBkYXRlV2F5cG9pbnRcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLk1vdmVXYXlwb2ludCBtb3ZlX3dheXBvaW50ID0gMTQ7XG4gICAgICovXG4gICAgdmFsdWU6IE1vdmVXYXlwb2ludDtcbiAgICBjYXNlOiBcIm1vdmVXYXlwb2ludFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuRGVsZXRlV2F5cG9pbnQgZGVsZXRlX3dheXBvaW50ID0gMTU7XG4gICAgICovXG4gICAgdmFsdWU6IERlbGV0ZVdheXBvaW50O1xuICAgIGNhc2U6IFwiZGVsZXRlV2F5cG9pbnRcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLkNsZWFyV2F5cG9pbnRzIGNsZWFyX3dheXBvaW50cyA9IDE2O1xuICAgICAqL1xuICAgIHZhbHVlOiBDbGVhcldheXBvaW50cztcbiAgICBjYXNlOiBcImNsZWFyV2F5cG9pbnRzXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5Db25maWd1cmVNaXNzaWxlIGNvbmZpZ3VyZV9taXNzaWxlID0gMTc7XG4gICAgICovXG4gICAgdmFsdWU6IENvbmZpZ3VyZU1pc3NpbGU7XG4gICAgY2FzZTogXCJjb25maWd1cmVNaXNzaWxlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5BZGRNaXNzaWxlV2F5cG9pbnQgYWRkX21pc3NpbGVfd2F5cG9pbnQgPSAxODtcbiAgICAgKi9cbiAgICB2YWx1ZTogQWRkTWlzc2lsZVdheXBvaW50O1xuICAgIGNhc2U6IFwiYWRkTWlzc2lsZVdheXBvaW50XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5VcGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZCB1cGRhdGVfbWlzc2lsZV93YXlwb2ludF9zcGVlZCA9IDE5O1xuICAgICAqL1xuICAgIHZhbHVlOiBVcGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZDtcbiAgICBjYXNlOiBcInVwZGF0ZU1pc3NpbGVXYXlwb2ludFNwZWVkXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5Nb3ZlTWlzc2lsZVdheXBvaW50IG1vdmVfbWlzc2lsZV93YXlwb2ludCA9IDIwO1xuICAgICAqL1xuICAgIHZhbHVlOiBNb3ZlTWlzc2lsZVdheXBvaW50O1xuICAgIGNhc2U6IFwibW92ZU1pc3NpbGVXYXlwb2ludFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuRGVsZXRlTWlzc2lsZVdheXBvaW50IGRlbGV0ZV9taXNzaWxlX3dheXBvaW50ID0gMjE7XG4gICAgICovXG4gICAgdmFsdWU6IERlbGV0ZU1pc3NpbGVXYXlwb2ludDtcbiAgICBjYXNlOiBcImRlbGV0ZU1pc3NpbGVXYXlwb2ludFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuQ2xlYXJNaXNzaWxlUm91dGUgY2xlYXJfbWlzc2lsZV9yb3V0ZSA9IDIyO1xuICAgICAqL1xuICAgIHZhbHVlOiBDbGVhck1pc3NpbGVSb3V0ZTtcbiAgICBjYXNlOiBcImNsZWFyTWlzc2lsZVJvdXRlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5BZGRNaXNzaWxlUm91dGUgYWRkX21pc3NpbGVfcm91dGUgPSAyMztcbiAgICAgKi9cbiAgICB2YWx1ZTogQWRkTWlzc2lsZVJvdXRlO1xuICAgIGNhc2U6IFwiYWRkTWlzc2lsZVJvdXRlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5SZW5hbWVNaXNzaWxlUm91dGUgcmVuYW1lX21pc3NpbGVfcm91dGUgPSAyNDtcbiAgICAgKi9cbiAgICB2YWx1ZTogUmVuYW1lTWlzc2lsZVJvdXRlO1xuICAgIGNhc2U6IFwicmVuYW1lTWlzc2lsZVJvdXRlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5EZWxldGVNaXNzaWxlUm91dGUgZGVsZXRlX21pc3NpbGVfcm91dGUgPSAyNTtcbiAgICAgKi9cbiAgICB2YWx1ZTogRGVsZXRlTWlzc2lsZVJvdXRlO1xuICAgIGNhc2U6IFwiZGVsZXRlTWlzc2lsZVJvdXRlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5TZXRBY3RpdmVNaXNzaWxlUm91dGUgc2V0X2FjdGl2ZV9taXNzaWxlX3JvdXRlID0gMjY7XG4gICAgICovXG4gICAgdmFsdWU6IFNldEFjdGl2ZU1pc3NpbGVSb3V0ZTtcbiAgICBjYXNlOiBcInNldEFjdGl2ZU1pc3NpbGVSb3V0ZVwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuTGF1bmNoTWlzc2lsZSBsYXVuY2hfbWlzc2lsZSA9IDI3O1xuICAgICAqL1xuICAgIHZhbHVlOiBMYXVuY2hNaXNzaWxlO1xuICAgIGNhc2U6IFwibGF1bmNoTWlzc2lsZVwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIFBoYXNlIDI6IERBRyBjb21tYW5kc1xuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5EYWdTdGFydCBkYWdfc3RhcnQgPSAzMDtcbiAgICAgKi9cbiAgICB2YWx1ZTogRGFnU3RhcnQ7XG4gICAgY2FzZTogXCJkYWdTdGFydFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuRGFnQ2FuY2VsIGRhZ19jYW5jZWwgPSAzMTtcbiAgICAgKi9cbiAgICB2YWx1ZTogRGFnQ2FuY2VsO1xuICAgIGNhc2U6IFwiZGFnQ2FuY2VsXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5EYWdTdG9yeUFjayBkYWdfc3RvcnlfYWNrID0gMzI7XG4gICAgICovXG4gICAgdmFsdWU6IERhZ1N0b3J5QWNrO1xuICAgIGNhc2U6IFwiZGFnU3RvcnlBY2tcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLkRhZ0xpc3QgZGFnX2xpc3QgPSAzMztcbiAgICAgKi9cbiAgICB2YWx1ZTogRGFnTGlzdDtcbiAgICBjYXNlOiBcImRhZ0xpc3RcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBQaGFzZSAyOiBNaXNzaW9uIGNvbW1hbmRzXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25TcGF3bldhdmUgbWlzc2lvbl9zcGF3bl93YXZlID0gNDA7XG4gICAgICovXG4gICAgdmFsdWU6IE1pc3Npb25TcGF3bldhdmU7XG4gICAgY2FzZTogXCJtaXNzaW9uU3Bhd25XYXZlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uU3RvcnlFdmVudCBtaXNzaW9uX3N0b3J5X2V2ZW50ID0gNDE7XG4gICAgICovXG4gICAgdmFsdWU6IE1pc3Npb25TdG9yeUV2ZW50O1xuICAgIGNhc2U6IFwibWlzc2lvblN0b3J5RXZlbnRcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBQaGFzZSAyOiBTZXJ2ZXIgcmVzcG9uc2VzXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLkRhZ0xpc3RSZXNwb25zZSBkYWdfbGlzdF9yZXNwb25zZSA9IDUwO1xuICAgICAqL1xuICAgIHZhbHVlOiBEYWdMaXN0UmVzcG9uc2U7XG4gICAgY2FzZTogXCJkYWdMaXN0UmVzcG9uc2VcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25TbmFwc2hvdCBtaXNzaW9uX2JlYWNvbl9zbmFwc2hvdCA9IDYwO1xuICAgICAqL1xuICAgIHZhbHVlOiBNaXNzaW9uQmVhY29uU25hcHNob3Q7XG4gICAgY2FzZTogXCJtaXNzaW9uQmVhY29uU25hcHNob3RcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25EZWx0YSBtaXNzaW9uX2JlYWNvbl9kZWx0YSA9IDYxO1xuICAgICAqL1xuICAgIHZhbHVlOiBNaXNzaW9uQmVhY29uRGVsdGE7XG4gICAgY2FzZTogXCJtaXNzaW9uQmVhY29uRGVsdGFcIjtcbiAgfSB8IHsgY2FzZTogdW5kZWZpbmVkOyB2YWx1ZT86IHVuZGVmaW5lZCB9O1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuV3NFbnZlbG9wZS5cbiAqIFVzZSBgY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFdzRW52ZWxvcGVTY2hlbWE6IEdlbk1lc3NhZ2U8V3NFbnZlbG9wZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDApO1xuXG4vKipcbiAqIFNlcnZlciBcdTIxOTIgQ2xpZW50OiBGdWxsIGdhbWUgc3RhdGVcbiAqIFNlbnQgZXZlcnkgdGljayAofjIwSHopIGNvbnRhaW5pbmcgdGhlIHBsYXllcidzIHZpZXcgb2YgdGhlIGdhbWUgd29ybGRcbiAqIHdpdGggbGlnaHQtZGVsYXllZCBwb3NpdGlvbnMgb2Ygb3RoZXIgc2hpcHMgYW5kIG1pc3NpbGVzXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuU3RhdGVVcGRhdGVcbiAqL1xuZXhwb3J0IHR5cGUgU3RhdGVVcGRhdGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuU3RhdGVVcGRhdGVcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBub3cgPSAxO1xuICAgKi9cbiAgbm93OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuR2hvc3QgbWUgPSAyO1xuICAgKi9cbiAgbWU/OiBHaG9zdDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5HaG9zdCBnaG9zdHMgPSAzO1xuICAgKi9cbiAgZ2hvc3RzOiBHaG9zdFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLlJvb21NZXRhIG1ldGEgPSA0O1xuICAgKi9cbiAgbWV0YT86IFJvb21NZXRhO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3NpbGUgbWlzc2lsZXMgPSA1O1xuICAgKi9cbiAgbWlzc2lsZXM6IE1pc3NpbGVbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5NaXNzaWxlQ29uZmlnIG1pc3NpbGVfY29uZmlnID0gNjtcbiAgICovXG4gIG1pc3NpbGVDb25maWc/OiBNaXNzaWxlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGxpZ2h0c3BlZWRkdWVsLndzLldheXBvaW50IG1pc3NpbGVfd2F5cG9pbnRzID0gNztcbiAgICovXG4gIG1pc3NpbGVXYXlwb2ludHM6IFdheXBvaW50W107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lsZVJvdXRlIG1pc3NpbGVfcm91dGVzID0gODtcbiAgICovXG4gIG1pc3NpbGVSb3V0ZXM6IE1pc3NpbGVSb3V0ZVtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBhY3RpdmVfbWlzc2lsZV9yb3V0ZSA9IDk7XG4gICAqL1xuICBhY3RpdmVNaXNzaWxlUm91dGU6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgbmV4dF9taXNzaWxlX3JlYWR5ID0gMTA7XG4gICAqL1xuICBuZXh0TWlzc2lsZVJlYWR5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFBoYXNlIDIgYWRkaXRpb25zOlxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG9wdGlvbmFsIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXRlIGRhZyA9IDExO1xuICAgKi9cbiAgZGFnPzogRGFnU3RhdGU7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogb3B0aW9uYWwgbGlnaHRzcGVlZGR1ZWwud3MuSW52ZW50b3J5IGludmVudG9yeSA9IDEyO1xuICAgKi9cbiAgaW52ZW50b3J5PzogSW52ZW50b3J5O1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG9wdGlvbmFsIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5U3RhdGUgc3RvcnkgPSAxMztcbiAgICovXG4gIHN0b3J5PzogU3RvcnlTdGF0ZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBvcHRpb25hbCBsaWdodHNwZWVkZHVlbC53cy5QbGF5ZXJDYXBhYmlsaXRpZXMgY2FwYWJpbGl0aWVzID0gMTQ7XG4gICAqL1xuICBjYXBhYmlsaXRpZXM/OiBQbGF5ZXJDYXBhYmlsaXRpZXM7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdGF0ZVVwZGF0ZS5cbiAqIFVzZSBgY3JlYXRlKFN0YXRlVXBkYXRlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0ZVVwZGF0ZVNjaGVtYTogR2VuTWVzc2FnZTxTdGF0ZVVwZGF0ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDEpO1xuXG4vKipcbiAqIFNlcnZlciBcdTIxOTIgQ2xpZW50OiBSb29tIGZ1bGwgZXJyb3JcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5Sb29tRnVsbEVycm9yXG4gKi9cbmV4cG9ydCB0eXBlIFJvb21GdWxsRXJyb3IgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuUm9vbUZ1bGxFcnJvclwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG1lc3NhZ2UgPSAxO1xuICAgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuUm9vbUZ1bGxFcnJvci5cbiAqIFVzZSBgY3JlYXRlKFJvb21GdWxsRXJyb3JTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFJvb21GdWxsRXJyb3JTY2hlbWE6IEdlbk1lc3NhZ2U8Um9vbUZ1bGxFcnJvcj4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDIpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBKb2luIGdhbWVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5DbGllbnRKb2luXG4gKi9cbmV4cG9ydCB0eXBlIENsaWVudEpvaW4gPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuQ2xpZW50Sm9pblwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5hbWUgPSAxO1xuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyByb29tID0gMjtcbiAgICovXG4gIHJvb206IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgbWFwX3cgPSAzO1xuICAgKi9cbiAgbWFwVzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBtYXBfaCA9IDQ7XG4gICAqL1xuICBtYXBIOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5DbGllbnRKb2luLlxuICogVXNlIGBjcmVhdGUoQ2xpZW50Sm9pblNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgQ2xpZW50Sm9pblNjaGVtYTogR2VuTWVzc2FnZTxDbGllbnRKb2luPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMyk7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IFNwYXduIEFJIGJvdFxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlNwYXduQm90XG4gKi9cbmV4cG9ydCB0eXBlIFNwYXduQm90ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLlNwYXduQm90XCI+ICYge1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuU3Bhd25Cb3QuXG4gKiBVc2UgYGNyZWF0ZShTcGF3bkJvdFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU3Bhd25Cb3RTY2hlbWE6IEdlbk1lc3NhZ2U8U3Bhd25Cb3Q+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA0KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogQWRkIHdheXBvaW50IHRvIHNoaXAgcm91dGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5BZGRXYXlwb2ludFxuICovXG5leHBvcnQgdHlwZSBBZGRXYXlwb2ludCA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5BZGRXYXlwb2ludFwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHggPSAxO1xuICAgKi9cbiAgeDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB5ID0gMjtcbiAgICovXG4gIHk6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgc3BlZWQgPSAzO1xuICAgKi9cbiAgc3BlZWQ6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkFkZFdheXBvaW50LlxuICogVXNlIGBjcmVhdGUoQWRkV2F5cG9pbnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFkZFdheXBvaW50U2NoZW1hOiBHZW5NZXNzYWdlPEFkZFdheXBvaW50PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNSk7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IFVwZGF0ZSB3YXlwb2ludCBzcGVlZFxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlVwZGF0ZVdheXBvaW50XG4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZVdheXBvaW50ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLlVwZGF0ZVdheXBvaW50XCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiBpbmRleCA9IDE7XG4gICAqL1xuICBpbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBzcGVlZCA9IDI7XG4gICAqL1xuICBzcGVlZDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuVXBkYXRlV2F5cG9pbnQuXG4gKiBVc2UgYGNyZWF0ZShVcGRhdGVXYXlwb2ludFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgVXBkYXRlV2F5cG9pbnRTY2hlbWE6IEdlbk1lc3NhZ2U8VXBkYXRlV2F5cG9pbnQ+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA2KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogTW92ZSB3YXlwb2ludCBwb3NpdGlvblxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1vdmVXYXlwb2ludFxuICovXG5leHBvcnQgdHlwZSBNb3ZlV2F5cG9pbnQgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTW92ZVdheXBvaW50XCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiBpbmRleCA9IDE7XG4gICAqL1xuICBpbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB4ID0gMjtcbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeSA9IDM7XG4gICAqL1xuICB5OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5Nb3ZlV2F5cG9pbnQuXG4gKiBVc2UgYGNyZWF0ZShNb3ZlV2F5cG9pbnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1vdmVXYXlwb2ludFNjaGVtYTogR2VuTWVzc2FnZTxNb3ZlV2F5cG9pbnQ+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA3KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogRGVsZXRlIHdheXBvaW50IGZyb20gcm91dGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EZWxldGVXYXlwb2ludFxuICovXG5leHBvcnQgdHlwZSBEZWxldGVXYXlwb2ludCA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5EZWxldGVXYXlwb2ludFwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgaW5kZXggPSAxO1xuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRlbGV0ZVdheXBvaW50LlxuICogVXNlIGBjcmVhdGUoRGVsZXRlV2F5cG9pbnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERlbGV0ZVdheXBvaW50U2NoZW1hOiBHZW5NZXNzYWdlPERlbGV0ZVdheXBvaW50PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgOCk7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IENsZWFyIGFsbCB3YXlwb2ludHNcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5DbGVhcldheXBvaW50c1xuICovXG5leHBvcnQgdHlwZSBDbGVhcldheXBvaW50cyA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5DbGVhcldheXBvaW50c1wiPiAmIHtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkNsZWFyV2F5cG9pbnRzLlxuICogVXNlIGBjcmVhdGUoQ2xlYXJXYXlwb2ludHNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IENsZWFyV2F5cG9pbnRzU2NoZW1hOiBHZW5NZXNzYWdlPENsZWFyV2F5cG9pbnRzPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgOSk7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IENvbmZpZ3VyZSBtaXNzaWxlIHBhcmFtZXRlcnNcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5Db25maWd1cmVNaXNzaWxlXG4gKi9cbmV4cG9ydCB0eXBlIENvbmZpZ3VyZU1pc3NpbGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuQ29uZmlndXJlTWlzc2lsZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIG1pc3NpbGVfc3BlZWQgPSAxO1xuICAgKi9cbiAgbWlzc2lsZVNwZWVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIG1pc3NpbGVfYWdybyA9IDI7XG4gICAqL1xuICBtaXNzaWxlQWdybzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuQ29uZmlndXJlTWlzc2lsZS5cbiAqIFVzZSBgY3JlYXRlKENvbmZpZ3VyZU1pc3NpbGVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IENvbmZpZ3VyZU1pc3NpbGVTY2hlbWE6IEdlbk1lc3NhZ2U8Q29uZmlndXJlTWlzc2lsZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDEwKTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogQWRkIHdheXBvaW50IHRvIG1pc3NpbGUgcm91dGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5BZGRNaXNzaWxlV2F5cG9pbnRcbiAqL1xuZXhwb3J0IHR5cGUgQWRkTWlzc2lsZVdheXBvaW50ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkFkZE1pc3NpbGVXYXlwb2ludFwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJvdXRlX2lkID0gMTtcbiAgICovXG4gIHJvdXRlSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeCA9IDI7XG4gICAqL1xuICB4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHkgPSAzO1xuICAgKi9cbiAgeTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBzcGVlZCA9IDQ7XG4gICAqL1xuICBzcGVlZDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuQWRkTWlzc2lsZVdheXBvaW50LlxuICogVXNlIGBjcmVhdGUoQWRkTWlzc2lsZVdheXBvaW50U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBBZGRNaXNzaWxlV2F5cG9pbnRTY2hlbWE6IEdlbk1lc3NhZ2U8QWRkTWlzc2lsZVdheXBvaW50PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMTEpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBVcGRhdGUgbWlzc2lsZSB3YXlwb2ludCBzcGVlZFxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlVwZGF0ZU1pc3NpbGVXYXlwb2ludFNwZWVkXG4gKi9cbmV4cG9ydCB0eXBlIFVwZGF0ZU1pc3NpbGVXYXlwb2ludFNwZWVkID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLlVwZGF0ZU1pc3NpbGVXYXlwb2ludFNwZWVkXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcm91dGVfaWQgPSAxO1xuICAgKi9cbiAgcm91dGVJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGluZGV4ID0gMjtcbiAgICovXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHNwZWVkID0gMztcbiAgICovXG4gIHNwZWVkOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5VcGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZC5cbiAqIFVzZSBgY3JlYXRlKFVwZGF0ZU1pc3NpbGVXYXlwb2ludFNwZWVkU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBVcGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZFNjaGVtYTogR2VuTWVzc2FnZTxVcGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZD4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDEyKTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogTW92ZSBtaXNzaWxlIHdheXBvaW50IHBvc2l0aW9uXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTW92ZU1pc3NpbGVXYXlwb2ludFxuICovXG5leHBvcnQgdHlwZSBNb3ZlTWlzc2lsZVdheXBvaW50ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLk1vdmVNaXNzaWxlV2F5cG9pbnRcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyByb3V0ZV9pZCA9IDE7XG4gICAqL1xuICByb3V0ZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgaW5kZXggPSAyO1xuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeCA9IDM7XG4gICAqL1xuICB4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHkgPSA0O1xuICAgKi9cbiAgeTogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTW92ZU1pc3NpbGVXYXlwb2ludC5cbiAqIFVzZSBgY3JlYXRlKE1vdmVNaXNzaWxlV2F5cG9pbnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1vdmVNaXNzaWxlV2F5cG9pbnRTY2hlbWE6IEdlbk1lc3NhZ2U8TW92ZU1pc3NpbGVXYXlwb2ludD4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDEzKTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogRGVsZXRlIG1pc3NpbGUgd2F5cG9pbnRcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EZWxldGVNaXNzaWxlV2F5cG9pbnRcbiAqL1xuZXhwb3J0IHR5cGUgRGVsZXRlTWlzc2lsZVdheXBvaW50ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkRlbGV0ZU1pc3NpbGVXYXlwb2ludFwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJvdXRlX2lkID0gMTtcbiAgICovXG4gIHJvdXRlSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiBpbmRleCA9IDI7XG4gICAqL1xuICBpbmRleDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuRGVsZXRlTWlzc2lsZVdheXBvaW50LlxuICogVXNlIGBjcmVhdGUoRGVsZXRlTWlzc2lsZVdheXBvaW50U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBEZWxldGVNaXNzaWxlV2F5cG9pbnRTY2hlbWE6IEdlbk1lc3NhZ2U8RGVsZXRlTWlzc2lsZVdheXBvaW50PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMTQpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBDbGVhciBtaXNzaWxlIHJvdXRlIHdheXBvaW50c1xuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkNsZWFyTWlzc2lsZVJvdXRlXG4gKi9cbmV4cG9ydCB0eXBlIENsZWFyTWlzc2lsZVJvdXRlID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkNsZWFyTWlzc2lsZVJvdXRlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcm91dGVfaWQgPSAxO1xuICAgKi9cbiAgcm91dGVJZDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuQ2xlYXJNaXNzaWxlUm91dGUuXG4gKiBVc2UgYGNyZWF0ZShDbGVhck1pc3NpbGVSb3V0ZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgQ2xlYXJNaXNzaWxlUm91dGVTY2hlbWE6IEdlbk1lc3NhZ2U8Q2xlYXJNaXNzaWxlUm91dGU+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAxNSk7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IENyZWF0ZSBuZXcgbWlzc2lsZSByb3V0ZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkFkZE1pc3NpbGVSb3V0ZVxuICovXG5leHBvcnQgdHlwZSBBZGRNaXNzaWxlUm91dGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuQWRkTWlzc2lsZVJvdXRlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbmFtZSA9IDE7XG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5BZGRNaXNzaWxlUm91dGUuXG4gKiBVc2UgYGNyZWF0ZShBZGRNaXNzaWxlUm91dGVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFkZE1pc3NpbGVSb3V0ZVNjaGVtYTogR2VuTWVzc2FnZTxBZGRNaXNzaWxlUm91dGU+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAxNik7XG5cbi8qKlxuICogQ2xpZW50IFx1MjE5MiBTZXJ2ZXI6IFJlbmFtZSBtaXNzaWxlIHJvdXRlXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuUmVuYW1lTWlzc2lsZVJvdXRlXG4gKi9cbmV4cG9ydCB0eXBlIFJlbmFtZU1pc3NpbGVSb3V0ZSA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5SZW5hbWVNaXNzaWxlUm91dGVcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyByb3V0ZV9pZCA9IDE7XG4gICAqL1xuICByb3V0ZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5hbWUgPSAyO1xuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuUmVuYW1lTWlzc2lsZVJvdXRlLlxuICogVXNlIGBjcmVhdGUoUmVuYW1lTWlzc2lsZVJvdXRlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBSZW5hbWVNaXNzaWxlUm91dGVTY2hlbWE6IEdlbk1lc3NhZ2U8UmVuYW1lTWlzc2lsZVJvdXRlPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMTcpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBEZWxldGUgbWlzc2lsZSByb3V0ZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRlbGV0ZU1pc3NpbGVSb3V0ZVxuICovXG5leHBvcnQgdHlwZSBEZWxldGVNaXNzaWxlUm91dGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuRGVsZXRlTWlzc2lsZVJvdXRlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcm91dGVfaWQgPSAxO1xuICAgKi9cbiAgcm91dGVJZDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuRGVsZXRlTWlzc2lsZVJvdXRlLlxuICogVXNlIGBjcmVhdGUoRGVsZXRlTWlzc2lsZVJvdXRlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBEZWxldGVNaXNzaWxlUm91dGVTY2hlbWE6IEdlbk1lc3NhZ2U8RGVsZXRlTWlzc2lsZVJvdXRlPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMTgpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBTZXQgYWN0aXZlIG1pc3NpbGUgcm91dGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TZXRBY3RpdmVNaXNzaWxlUm91dGVcbiAqL1xuZXhwb3J0IHR5cGUgU2V0QWN0aXZlTWlzc2lsZVJvdXRlID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLlNldEFjdGl2ZU1pc3NpbGVSb3V0ZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJvdXRlX2lkID0gMTtcbiAgICovXG4gIHJvdXRlSWQ6IHN0cmluZztcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlNldEFjdGl2ZU1pc3NpbGVSb3V0ZS5cbiAqIFVzZSBgY3JlYXRlKFNldEFjdGl2ZU1pc3NpbGVSb3V0ZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU2V0QWN0aXZlTWlzc2lsZVJvdXRlU2NoZW1hOiBHZW5NZXNzYWdlPFNldEFjdGl2ZU1pc3NpbGVSb3V0ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDE5KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogTGF1bmNoIG1pc3NpbGUgb24gcm91dGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5MYXVuY2hNaXNzaWxlXG4gKi9cbmV4cG9ydCB0eXBlIExhdW5jaE1pc3NpbGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTGF1bmNoTWlzc2lsZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJvdXRlX2lkID0gMTtcbiAgICovXG4gIHJvdXRlSWQ6IHN0cmluZztcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkxhdW5jaE1pc3NpbGUuXG4gKiBVc2UgYGNyZWF0ZShMYXVuY2hNaXNzaWxlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBMYXVuY2hNaXNzaWxlU2NoZW1hOiBHZW5NZXNzYWdlPExhdW5jaE1pc3NpbGU+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAyMCk7XG5cbi8qKlxuICogU2hpcC9naG9zdCBzbmFwc2hvdCB3aXRoIHBvc2l0aW9uLCB2ZWxvY2l0eSwgYW5kIHN0YXRlXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuR2hvc3RcbiAqL1xuZXhwb3J0IHR5cGUgR2hvc3QgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuR2hvc3RcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBpZCA9IDE7XG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB4ID0gMjtcbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeSA9IDM7XG4gICAqL1xuICB5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHZ4ID0gNDtcbiAgICovXG4gIHZ4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHZ5ID0gNTtcbiAgICovXG4gIHZ5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHQgPSA2O1xuICAgKi9cbiAgdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2VsZiA9IDc7XG4gICAqL1xuICBzZWxmOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGxpZ2h0c3BlZWRkdWVsLndzLldheXBvaW50IHdheXBvaW50cyA9IDg7XG4gICAqL1xuICB3YXlwb2ludHM6IFdheXBvaW50W107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgY3VycmVudF93YXlwb2ludF9pbmRleCA9IDk7XG4gICAqL1xuICBjdXJyZW50V2F5cG9pbnRJbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGhwID0gMTA7XG4gICAqL1xuICBocDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGtpbGxzID0gMTE7XG4gICAqL1xuICBraWxsczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG9wdGlvbmFsIGxpZ2h0c3BlZWRkdWVsLndzLlNoaXBIZWF0VmlldyBoZWF0ID0gMTI7XG4gICAqL1xuICBoZWF0PzogU2hpcEhlYXRWaWV3O1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuR2hvc3QuXG4gKiBVc2UgYGNyZWF0ZShHaG9zdFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgR2hvc3RTY2hlbWE6IEdlbk1lc3NhZ2U8R2hvc3Q+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAyMSk7XG5cbi8qKlxuICogV2F5cG9pbnQgd2l0aCBwb3NpdGlvbiBhbmQgdGFyZ2V0IHNwZWVkXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuV2F5cG9pbnRcbiAqL1xuZXhwb3J0IHR5cGUgV2F5cG9pbnQgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuV2F5cG9pbnRcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB4ID0gMTtcbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeSA9IDI7XG4gICAqL1xuICB5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHNwZWVkID0gMztcbiAgICovXG4gIHNwZWVkOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5XYXlwb2ludC5cbiAqIFVzZSBgY3JlYXRlKFdheXBvaW50U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBXYXlwb2ludFNjaGVtYTogR2VuTWVzc2FnZTxXYXlwb2ludD4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDIyKTtcblxuLyoqXG4gKiBSb29tIGNvbnN0YW50cyAoc3BlZWQgb2YgbGlnaHQsIHdvcmxkIGRpbWVuc2lvbnMpXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuUm9vbU1ldGFcbiAqL1xuZXhwb3J0IHR5cGUgUm9vbU1ldGEgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuUm9vbU1ldGFcIj4gJiB7XG4gIC8qKlxuICAgKiBTcGVlZCBvZiBsaWdodFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBjID0gMTtcbiAgICovXG4gIGM6IG51bWJlcjtcblxuICAvKipcbiAgICogV29ybGQgd2lkdGhcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgdyA9IDI7XG4gICAqL1xuICB3OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFdvcmxkIGhlaWdodFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBoID0gMztcbiAgICovXG4gIGg6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlJvb21NZXRhLlxuICogVXNlIGBjcmVhdGUoUm9vbU1ldGFTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFJvb21NZXRhU2NoZW1hOiBHZW5NZXNzYWdlPFJvb21NZXRhPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMjMpO1xuXG4vKipcbiAqIE1pc3NpbGUgc25hcHNob3Qgd2l0aCBwb3NpdGlvbiwgdmVsb2NpdHksIGFuZCB0YXJnZXRpbmdcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaWxlXG4gKi9cbmV4cG9ydCB0eXBlIE1pc3NpbGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lsZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGlkID0gMTtcbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG93bmVyID0gMjtcbiAgICovXG4gIG93bmVyOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBzZWxmID0gMztcbiAgICovXG4gIHNlbGY6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHggPSA0O1xuICAgKi9cbiAgeDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB5ID0gNTtcbiAgICovXG4gIHk6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgdnggPSA2O1xuICAgKi9cbiAgdng6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgdnkgPSA3O1xuICAgKi9cbiAgdnk6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgdCA9IDg7XG4gICAqL1xuICB0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGFncm9fcmFkaXVzID0gOTtcbiAgICovXG4gIGFncm9SYWRpdXM6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgbGlmZXRpbWUgPSAxMDtcbiAgICovXG4gIGxpZmV0aW1lOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGxhdW5jaF90aW1lID0gMTE7XG4gICAqL1xuICBsYXVuY2hUaW1lOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGV4cGlyZXNfYXQgPSAxMjtcbiAgICovXG4gIGV4cGlyZXNBdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0YXJnZXRfaWQgPSAxMztcbiAgICovXG4gIHRhcmdldElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogb3B0aW9uYWwgbGlnaHRzcGVlZGR1ZWwud3MuU2hpcEhlYXRWaWV3IGhlYXQgPSAxNDtcbiAgICovXG4gIGhlYXQ/OiBTaGlwSGVhdFZpZXc7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaWxlLlxuICogVXNlIGBjcmVhdGUoTWlzc2lsZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lsZVNjaGVtYTogR2VuTWVzc2FnZTxNaXNzaWxlPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMjQpO1xuXG4vKipcbiAqIE1pc3NpbGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lsZUNvbmZpZ1xuICovXG5leHBvcnQgdHlwZSBNaXNzaWxlQ29uZmlnID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLk1pc3NpbGVDb25maWdcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBzcGVlZCA9IDE7XG4gICAqL1xuICBzcGVlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBzcGVlZF9taW4gPSAyO1xuICAgKi9cbiAgc3BlZWRNaW46IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgc3BlZWRfbWF4ID0gMztcbiAgICovXG4gIHNwZWVkTWF4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGFncm9fbWluID0gNDtcbiAgICovXG4gIGFncm9NaW46IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgYWdyb19yYWRpdXMgPSA1O1xuICAgKi9cbiAgYWdyb1JhZGl1czogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBsaWZldGltZSA9IDY7XG4gICAqL1xuICBsaWZldGltZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG9wdGlvbmFsIGxpZ2h0c3BlZWRkdWVsLndzLkhlYXRQYXJhbXMgaGVhdF9jb25maWcgPSA3O1xuICAgKi9cbiAgaGVhdENvbmZpZz86IEhlYXRQYXJhbXM7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaWxlQ29uZmlnLlxuICogVXNlIGBjcmVhdGUoTWlzc2lsZUNvbmZpZ1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lsZUNvbmZpZ1NjaGVtYTogR2VuTWVzc2FnZTxNaXNzaWxlQ29uZmlnPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMjUpO1xuXG4vKipcbiAqIE1pc3NpbGUgcm91dGUgZGVmaW5pdGlvblxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3NpbGVSb3V0ZVxuICovXG5leHBvcnQgdHlwZSBNaXNzaWxlUm91dGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lsZVJvdXRlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbmFtZSA9IDI7XG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgbGlnaHRzcGVlZGR1ZWwud3MuV2F5cG9pbnQgd2F5cG9pbnRzID0gMztcbiAgICovXG4gIHdheXBvaW50czogV2F5cG9pbnRbXTtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3NpbGVSb3V0ZS5cbiAqIFVzZSBgY3JlYXRlKE1pc3NpbGVSb3V0ZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lsZVJvdXRlU2NoZW1hOiBHZW5NZXNzYWdlPE1pc3NpbGVSb3V0ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDI2KTtcblxuLyoqXG4gKiBIZWF0IHZpZXcgKGFiYnJldmlhdGVkIGZpZWxkIG5hbWVzIG1hdGNoIEpTT04pXG4gKiBVc2VkIGZvciBib3RoIHNoaXBzIGFuZCBtaXNzaWxlc1xuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlNoaXBIZWF0Vmlld1xuICovXG5leHBvcnQgdHlwZSBTaGlwSGVhdFZpZXcgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuU2hpcEhlYXRWaWV3XCI+ICYge1xuICAvKipcbiAgICogdmFsdWVcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgdiA9IDE7XG4gICAqL1xuICB2OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIG1heFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBtID0gMjtcbiAgICovXG4gIG06IG51bWJlcjtcblxuICAvKipcbiAgICogd2FybkF0XG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHcgPSAzO1xuICAgKi9cbiAgdzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBvdmVyaGVhdEF0XG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIG8gPSA0O1xuICAgKi9cbiAgbzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBtYXJrZXJTcGVlZFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBtcyA9IDU7XG4gICAqL1xuICBtczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBzdGFsbFVudGlsXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHN1ID0gNjtcbiAgICovXG4gIHN1OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIGtVcFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBrdSA9IDc7XG4gICAqL1xuICBrdTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBrRG93blxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBrZCA9IDg7XG4gICAqL1xuICBrZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBleHBcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgZXggPSA5O1xuICAgKi9cbiAgZXg6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlNoaXBIZWF0Vmlldy5cbiAqIFVzZSBgY3JlYXRlKFNoaXBIZWF0Vmlld1NjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU2hpcEhlYXRWaWV3U2NoZW1hOiBHZW5NZXNzYWdlPFNoaXBIZWF0Vmlldz4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDI3KTtcblxuLyoqXG4gKiBIZWF0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkhlYXRQYXJhbXNcbiAqL1xuZXhwb3J0IHR5cGUgSGVhdFBhcmFtcyA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5IZWF0UGFyYW1zXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgbWF4ID0gMTtcbiAgICovXG4gIG1heDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSB3YXJuX2F0ID0gMjtcbiAgICovXG4gIHdhcm5BdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBvdmVyaGVhdF9hdCA9IDM7XG4gICAqL1xuICBvdmVyaGVhdEF0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIG1hcmtlcl9zcGVlZCA9IDQ7XG4gICAqL1xuICBtYXJrZXJTcGVlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBrX3VwID0gNTtcbiAgICovXG4gIGtVcDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBrX2Rvd24gPSA2O1xuICAgKi9cbiAga0Rvd246IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgZXhwID0gNztcbiAgICovXG4gIGV4cDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuSGVhdFBhcmFtcy5cbiAqIFVzZSBgY3JlYXRlKEhlYXRQYXJhbXNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEhlYXRQYXJhbXNTY2hlbWE6IEdlbk1lc3NhZ2U8SGVhdFBhcmFtcz4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDI4KTtcblxuLyoqXG4gKiBVcGdyYWRlIGVmZmVjdCBkZWZpbml0aW9uXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuVXBncmFkZUVmZmVjdFxuICovXG5leHBvcnQgdHlwZSBVcGdyYWRlRWZmZWN0ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLlVwZ3JhZGVFZmZlY3RcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLlVwZ3JhZGVFZmZlY3RUeXBlIHR5cGUgPSAxO1xuICAgKi9cbiAgdHlwZTogVXBncmFkZUVmZmVjdFR5cGU7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBvbmVvZiBsaWdodHNwZWVkZHVlbC53cy5VcGdyYWRlRWZmZWN0LnZhbHVlXG4gICAqL1xuICB2YWx1ZToge1xuICAgIC8qKlxuICAgICAqIEZvciBzcGVlZC9oZWF0IG11bHRpcGxpZXJzXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBtdWx0aXBsaWVyID0gMjtcbiAgICAgKi9cbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGNhc2U6IFwibXVsdGlwbGllclwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEZvciBtaXNzaWxlIHVubG9ja3MgKGUuZy4sIFwic2NvdXRcIilcbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHVubG9ja19pZCA9IDM7XG4gICAgICovXG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBjYXNlOiBcInVubG9ja0lkXCI7XG4gIH0gfCB7IGNhc2U6IHVuZGVmaW5lZDsgdmFsdWU/OiB1bmRlZmluZWQgfTtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlVwZ3JhZGVFZmZlY3QuXG4gKiBVc2UgYGNyZWF0ZShVcGdyYWRlRWZmZWN0U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBVcGdyYWRlRWZmZWN0U2NoZW1hOiBHZW5NZXNzYWdlPFVwZ3JhZGVFZmZlY3Q+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAyOSk7XG5cbi8qKlxuICogUGxheWVyIGNhcGFiaWxpdGllcyAoY29tcHV0ZWQgZnJvbSBjb21wbGV0ZWQgdXBncmFkZXMpXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuUGxheWVyQ2FwYWJpbGl0aWVzXG4gKi9cbmV4cG9ydCB0eXBlIFBsYXllckNhcGFiaWxpdGllcyA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5QbGF5ZXJDYXBhYmlsaXRpZXNcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSBzcGVlZF9tdWx0aXBsaWVyID0gMTtcbiAgICovXG4gIHNwZWVkTXVsdGlwbGllcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyB1bmxvY2tlZF9taXNzaWxlcyA9IDI7XG4gICAqL1xuICB1bmxvY2tlZE1pc3NpbGVzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgaGVhdF9jYXBhY2l0eSA9IDM7XG4gICAqL1xuICBoZWF0Q2FwYWNpdHk6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgaGVhdF9lZmZpY2llbmN5ID0gNDtcbiAgICovXG4gIGhlYXRFZmZpY2llbmN5OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5QbGF5ZXJDYXBhYmlsaXRpZXMuXG4gKiBVc2UgYGNyZWF0ZShQbGF5ZXJDYXBhYmlsaXRpZXNTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBsYXllckNhcGFiaWxpdGllc1NjaGVtYTogR2VuTWVzc2FnZTxQbGF5ZXJDYXBhYmlsaXRpZXM+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAzMCk7XG5cbi8qKlxuICogREFHIG5vZGUgc3RhdGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdOb2RlXG4gKi9cbmV4cG9ydCB0eXBlIERhZ05vZGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuRGFnTm9kZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGlkID0gMTtcbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbGlnaHRzcGVlZGR1ZWwud3MuRGFnTm9kZUtpbmQga2luZCA9IDI7XG4gICAqL1xuICBraW5kOiBEYWdOb2RlS2luZDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbGFiZWwgPSAzO1xuICAgKi9cbiAgbGFiZWw6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5EYWdOb2RlU3RhdHVzIHN0YXR1cyA9IDQ7XG4gICAqL1xuICBzdGF0dXM6IERhZ05vZGVTdGF0dXM7XG5cbiAgLyoqXG4gICAqIFRpbWUgcmVtYWluaW5nIGZvciBpbi1wcm9ncmVzcyBqb2JzXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHJlbWFpbmluZ19zID0gNTtcbiAgICovXG4gIHJlbWFpbmluZ1M6IG51bWJlcjtcblxuICAvKipcbiAgICogVG90YWwgZHVyYXRpb25cbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgZHVyYXRpb25fcyA9IDY7XG4gICAqL1xuICBkdXJhdGlvblM6IG51bWJlcjtcblxuICAvKipcbiAgICogQ2FuIGJlIHJlcGVhdGVkIGFmdGVyIGNvbXBsZXRpb25cbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIHJlcGVhdGFibGUgPSA3O1xuICAgKi9cbiAgcmVwZWF0YWJsZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogT25seSBwb3B1bGF0ZWQgZm9yIHVwZ3JhZGUgbm9kZXNcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5VcGdyYWRlRWZmZWN0IGVmZmVjdHMgPSA4O1xuICAgKi9cbiAgZWZmZWN0czogVXBncmFkZUVmZmVjdFtdO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuRGFnTm9kZS5cbiAqIFVzZSBgY3JlYXRlKERhZ05vZGVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERhZ05vZGVTY2hlbWE6IEdlbk1lc3NhZ2U8RGFnTm9kZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDMxKTtcblxuLyoqXG4gKiBGdWxsIERBRyBzdGF0ZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXRlXG4gKi9cbmV4cG9ydCB0eXBlIERhZ1N0YXRlID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXRlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5EYWdOb2RlIG5vZGVzID0gMTtcbiAgICovXG4gIG5vZGVzOiBEYWdOb2RlW107XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdTdGF0ZS5cbiAqIFVzZSBgY3JlYXRlKERhZ1N0YXRlU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBEYWdTdGF0ZVNjaGVtYTogR2VuTWVzc2FnZTxEYWdTdGF0ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDMyKTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogU3RhcnQgYSBEQUcgbm9kZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXJ0XG4gKi9cbmV4cG9ydCB0eXBlIERhZ1N0YXJ0ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXJ0XCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbm9kZV9pZCA9IDE7XG4gICAqL1xuICBub2RlSWQ6IHN0cmluZztcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ1N0YXJ0LlxuICogVXNlIGBjcmVhdGUoRGFnU3RhcnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERhZ1N0YXJ0U2NoZW1hOiBHZW5NZXNzYWdlPERhZ1N0YXJ0PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMzMpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBDYW5jZWwgYSBEQUcgbm9kZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ0NhbmNlbFxuICovXG5leHBvcnQgdHlwZSBEYWdDYW5jZWwgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuRGFnQ2FuY2VsXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbm9kZV9pZCA9IDE7XG4gICAqL1xuICBub2RlSWQ6IHN0cmluZztcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ0NhbmNlbC5cbiAqIFVzZSBgY3JlYXRlKERhZ0NhbmNlbFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRGFnQ2FuY2VsU2NoZW1hOiBHZW5NZXNzYWdlPERhZ0NhbmNlbD4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDM0KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogQWNrbm93bGVkZ2Ugc3RvcnkgZGlhbG9ndWVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdTdG9yeUFja1xuICovXG5leHBvcnQgdHlwZSBEYWdTdG9yeUFjayA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5EYWdTdG9yeUFja1wiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5vZGVfaWQgPSAxO1xuICAgKi9cbiAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEVtcHR5IGlmIGp1c3QgY29udGludWUgKG5vIGNob2ljZSlcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgY2hvaWNlX2lkID0gMjtcbiAgICovXG4gIGNob2ljZUlkOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdTdG9yeUFjay5cbiAqIFVzZSBgY3JlYXRlKERhZ1N0b3J5QWNrU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBEYWdTdG9yeUFja1NjaGVtYTogR2VuTWVzc2FnZTxEYWdTdG9yeUFjaz4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDM1KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogUmVxdWVzdCBmdWxsIERBRyBsaXN0XG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuRGFnTGlzdFxuICovXG5leHBvcnQgdHlwZSBEYWdMaXN0ID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLkRhZ0xpc3RcIj4gJiB7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdMaXN0LlxuICogVXNlIGBjcmVhdGUoRGFnTGlzdFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgRGFnTGlzdFNjaGVtYTogR2VuTWVzc2FnZTxEYWdMaXN0PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMzYpO1xuXG4vKipcbiAqIFNlcnZlciBcdTIxOTIgQ2xpZW50OiBEQUcgbGlzdCByZXNwb25zZVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ0xpc3RSZXNwb25zZVxuICovXG5leHBvcnQgdHlwZSBEYWdMaXN0UmVzcG9uc2UgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuRGFnTGlzdFJlc3BvbnNlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5EYWdTdGF0ZSBkYWcgPSAxO1xuICAgKi9cbiAgZGFnPzogRGFnU3RhdGU7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5EYWdMaXN0UmVzcG9uc2UuXG4gKiBVc2UgYGNyZWF0ZShEYWdMaXN0UmVzcG9uc2VTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IERhZ0xpc3RSZXNwb25zZVNjaGVtYTogR2VuTWVzc2FnZTxEYWdMaXN0UmVzcG9uc2U+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAzNyk7XG5cbi8qKlxuICogSW52ZW50b3J5IGl0ZW1cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5JbnZlbnRvcnlJdGVtXG4gKi9cbmV4cG9ydCB0eXBlIEludmVudG9yeUl0ZW0gPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuSW52ZW50b3J5SXRlbVwiPiAmIHtcbiAgLyoqXG4gICAqIFwibWlzc2lsZVwiLCBcImNvbXBvbmVudFwiLCBldGMuXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHR5cGUgPSAxO1xuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpYyB2YXJpYW50IGlkZW50aWZpZXJcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdmFyaWFudF9pZCA9IDI7XG4gICAqL1xuICB2YXJpYW50SWQ6IHN0cmluZztcblxuICAvKipcbiAgICogSGVhdCBjYXBhY2l0eSBmb3IgdGhpcyBpdGVtXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGhlYXRfY2FwYWNpdHkgPSAzO1xuICAgKi9cbiAgaGVhdENhcGFjaXR5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFN0YWNrIHF1YW50aXR5XG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgcXVhbnRpdHkgPSA0O1xuICAgKi9cbiAgcXVhbnRpdHk6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkludmVudG9yeUl0ZW0uXG4gKiBVc2UgYGNyZWF0ZShJbnZlbnRvcnlJdGVtU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBJbnZlbnRvcnlJdGVtU2NoZW1hOiBHZW5NZXNzYWdlPEludmVudG9yeUl0ZW0+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAzOCk7XG5cbi8qKlxuICogUGxheWVyIGludmVudG9yeVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLkludmVudG9yeVxuICovXG5leHBvcnQgdHlwZSBJbnZlbnRvcnkgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuSW52ZW50b3J5XCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5JbnZlbnRvcnlJdGVtIGl0ZW1zID0gMTtcbiAgICovXG4gIGl0ZW1zOiBJbnZlbnRvcnlJdGVtW107XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5JbnZlbnRvcnkuXG4gKiBVc2UgYGNyZWF0ZShJbnZlbnRvcnlTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEludmVudG9yeVNjaGVtYTogR2VuTWVzc2FnZTxJbnZlbnRvcnk+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAzOSk7XG5cbi8qKlxuICogU3RvcnkgZGlhbG9ndWUgY2hvaWNlIG9wdGlvblxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5RGlhbG9ndWVDaG9pY2VcbiAqL1xuZXhwb3J0IHR5cGUgU3RvcnlEaWFsb2d1ZUNob2ljZSA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5TdG9yeURpYWxvZ3VlQ2hvaWNlXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDI7XG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeURpYWxvZ3VlQ2hvaWNlLlxuICogVXNlIGBjcmVhdGUoU3RvcnlEaWFsb2d1ZUNob2ljZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU3RvcnlEaWFsb2d1ZUNob2ljZVNjaGVtYTogR2VuTWVzc2FnZTxTdG9yeURpYWxvZ3VlQ2hvaWNlPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNDApO1xuXG4vKipcbiAqIFN0b3J5IHR1dG9yaWFsIHRpcFxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5VHV0b3JpYWxUaXBcbiAqL1xuZXhwb3J0IHR5cGUgU3RvcnlUdXRvcmlhbFRpcCA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5TdG9yeVR1dG9yaWFsVGlwXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGl0bGUgPSAxO1xuICAgKi9cbiAgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDI7XG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeVR1dG9yaWFsVGlwLlxuICogVXNlIGBjcmVhdGUoU3RvcnlUdXRvcmlhbFRpcFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU3RvcnlUdXRvcmlhbFRpcFNjaGVtYTogR2VuTWVzc2FnZTxTdG9yeVR1dG9yaWFsVGlwPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNDEpO1xuXG4vKipcbiAqIFN0b3J5IGRpYWxvZ3VlIGNvbnRlbnRcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeURpYWxvZ3VlXG4gKi9cbmV4cG9ydCB0eXBlIFN0b3J5RGlhbG9ndWUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuU3RvcnlEaWFsb2d1ZVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHNwZWFrZXIgPSAxO1xuICAgKi9cbiAgc3BlYWtlcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMjtcbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5TdG9yeUludGVudCBpbnRlbnQgPSAzO1xuICAgKi9cbiAgaW50ZW50OiBTdG9yeUludGVudDtcblxuICAvKipcbiAgICogRW1wdHkgPSBkZWZhdWx0IFwiQ29udGludWVcIlxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBjb250aW51ZV9sYWJlbCA9IDQ7XG4gICAqL1xuICBjb250aW51ZUxhYmVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEVtcHR5ID0gc2hvdyBjb250aW51ZSBidXR0b25cbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5TdG9yeURpYWxvZ3VlQ2hvaWNlIGNob2ljZXMgPSA1O1xuICAgKi9cbiAgY2hvaWNlczogU3RvcnlEaWFsb2d1ZUNob2ljZVtdO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBnYW1lcGxheSBoaW50XG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogb3B0aW9uYWwgbGlnaHRzcGVlZGR1ZWwud3MuU3RvcnlUdXRvcmlhbFRpcCB0dXRvcmlhbF90aXAgPSA2O1xuICAgKi9cbiAgdHV0b3JpYWxUaXA/OiBTdG9yeVR1dG9yaWFsVGlwO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuU3RvcnlEaWFsb2d1ZS5cbiAqIFVzZSBgY3JlYXRlKFN0b3J5RGlhbG9ndWVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0b3J5RGlhbG9ndWVTY2hlbWE6IEdlbk1lc3NhZ2U8U3RvcnlEaWFsb2d1ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDQyKTtcblxuLyoqXG4gKiBTdG9yeSBldmVudCAoaGlzdG9yeSBlbnRyeSlcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeUV2ZW50XG4gKi9cbmV4cG9ydCB0eXBlIFN0b3J5RXZlbnQgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuU3RvcnlFdmVudFwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGNoYXB0ZXJfaWQgPSAxO1xuICAgKi9cbiAgY2hhcHRlcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5vZGVfaWQgPSAyO1xuICAgKi9cbiAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHRpbWVzdGFtcCA9IDM7XG4gICAqL1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5RXZlbnQuXG4gKiBVc2UgYGNyZWF0ZShTdG9yeUV2ZW50U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBTdG9yeUV2ZW50U2NoZW1hOiBHZW5NZXNzYWdlPFN0b3J5RXZlbnQ+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA0Myk7XG5cbi8qKlxuICogU3Rvcnkgc3RhdGVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeVN0YXRlXG4gKi9cbmV4cG9ydCB0eXBlIFN0b3J5U3RhdGUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuU3RvcnlTdGF0ZVwiPiAmIHtcbiAgLyoqXG4gICAqIEN1cnJlbnRseSBhY3RpdmUgc3Rvcnkgbm9kZSBJRFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBhY3RpdmVfbm9kZSA9IDE7XG4gICAqL1xuICBhY3RpdmVOb2RlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZ1bGwgZGlhbG9ndWUgY29udGVudFxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG9wdGlvbmFsIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5RGlhbG9ndWUgZGlhbG9ndWUgPSAyO1xuICAgKi9cbiAgZGlhbG9ndWU/OiBTdG9yeURpYWxvZ3VlO1xuXG4gIC8qKlxuICAgKiBBdmFpbGFibGUgc3Rvcnkgbm9kZSBJRHNcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgYXZhaWxhYmxlID0gMztcbiAgICovXG4gIGF2YWlsYWJsZTogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFN0b3J5IGZsYWdzIGZvciBicmFuY2hpbmdcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBtYXA8c3RyaW5nLCBib29sPiBmbGFncyA9IDQ7XG4gICAqL1xuICBmbGFnczogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH07XG5cbiAgLyoqXG4gICAqIFJlY2VudCBzdG9yeSBldmVudHNcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5TdG9yeUV2ZW50IHJlY2VudF9ldmVudHMgPSA1O1xuICAgKi9cbiAgcmVjZW50RXZlbnRzOiBTdG9yeUV2ZW50W107XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeVN0YXRlLlxuICogVXNlIGBjcmVhdGUoU3RvcnlTdGF0ZVNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgU3RvcnlTdGF0ZVNjaGVtYTogR2VuTWVzc2FnZTxTdG9yeVN0YXRlPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNDQpO1xuXG4vKipcbiAqIENsaWVudCBcdTIxOTIgU2VydmVyOiBTcGF3biBtaXNzaW9uIHdhdmVcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uU3Bhd25XYXZlXG4gKi9cbmV4cG9ydCB0eXBlIE1pc3Npb25TcGF3bldhdmUgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvblNwYXduV2F2ZVwiPiAmIHtcbiAgLyoqXG4gICAqIDEsIDIsIG9yIDNcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiB3YXZlX2luZGV4ID0gMTtcbiAgICovXG4gIHdhdmVJbmRleDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvblNwYXduV2F2ZS5cbiAqIFVzZSBgY3JlYXRlKE1pc3Npb25TcGF3bldhdmVTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1pc3Npb25TcGF3bldhdmVTY2hlbWE6IEdlbk1lc3NhZ2U8TWlzc2lvblNwYXduV2F2ZT4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDQ1KTtcblxuLyoqXG4gKiBDbGllbnQgXHUyMTkyIFNlcnZlcjogVHJpZ2dlciBtaXNzaW9uIHN0b3J5IGV2ZW50XG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvblN0b3J5RXZlbnRcbiAqL1xuZXhwb3J0IHR5cGUgTWlzc2lvblN0b3J5RXZlbnQgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvblN0b3J5RXZlbnRcIj4gJiB7XG4gIC8qKlxuICAgKiBlLmcuIFwibWlzc2lvbjpzdGFydFwiLCBcIm1pc3Npb246YmVhY29uLWxvY2tlZFwiXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGV2ZW50ID0gMTtcbiAgICovXG4gIGV2ZW50OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEJlYWNvbiBpbmRleCBmb3IgYmVhY29uLXNwZWNpZmljIGV2ZW50c1xuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGJlYWNvbiA9IDI7XG4gICAqL1xuICBiZWFjb246IG51bWJlcjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25TdG9yeUV2ZW50LlxuICogVXNlIGBjcmVhdGUoTWlzc2lvblN0b3J5RXZlbnRTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1pc3Npb25TdG9yeUV2ZW50U2NoZW1hOiBHZW5NZXNzYWdlPE1pc3Npb25TdG9yeUV2ZW50PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNDYpO1xuXG4vKipcbiAqIFNlcnZlciBcdTIxOTIgQ2xpZW50OiBNaXNzaW9uIGJlYWNvbiBhdXRob3JpdGF0aXZlIHNuYXBzaG90XG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblNuYXBzaG90XG4gKi9cbmV4cG9ydCB0eXBlIE1pc3Npb25CZWFjb25TbmFwc2hvdCA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uU25hcHNob3RcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBtaXNzaW9uX2lkID0gMTtcbiAgICovXG4gIG1pc3Npb25JZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBsYXlvdXRfc2VlZCA9IDI7XG4gICAqL1xuICBsYXlvdXRTZWVkOiBiaWdpbnQ7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHNlcnZlcl90aW1lID0gMztcbiAgICovXG4gIHNlcnZlclRpbWU6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVmaW5pdGlvbiBiZWFjb25zID0gNDtcbiAgICovXG4gIGJlYWNvbnM6IE1pc3Npb25CZWFjb25EZWZpbml0aW9uW107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblBsYXllciBwbGF5ZXJzID0gNTtcbiAgICovXG4gIHBsYXllcnM6IE1pc3Npb25CZWFjb25QbGF5ZXJbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRW5jb3VudGVyIGVuY291bnRlcnMgPSA2O1xuICAgKi9cbiAgZW5jb3VudGVyczogTWlzc2lvbkJlYWNvbkVuY291bnRlcltdO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblNuYXBzaG90LlxuICogVXNlIGBjcmVhdGUoTWlzc2lvbkJlYWNvblNuYXBzaG90U2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBNaXNzaW9uQmVhY29uU25hcHNob3RTY2hlbWE6IEdlbk1lc3NhZ2U8TWlzc2lvbkJlYWNvblNuYXBzaG90PiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNDcpO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25EZWZpbml0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE1pc3Npb25CZWFjb25EZWZpbml0aW9uID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25EZWZpbml0aW9uXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiBvcmRpbmFsID0gMjtcbiAgICovXG4gIG9yZGluYWw6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgeCA9IDM7XG4gICAqL1xuICB4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHkgPSA0O1xuICAgKi9cbiAgeTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGRvdWJsZSByYWRpdXMgPSA1O1xuICAgKi9cbiAgcmFkaXVzOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50NjQgc2VlZCA9IDY7XG4gICAqL1xuICBzZWVkOiBiaWdpbnQ7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVmaW5pdGlvbi5cbiAqIFVzZSBgY3JlYXRlKE1pc3Npb25CZWFjb25EZWZpbml0aW9uU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBNaXNzaW9uQmVhY29uRGVmaW5pdGlvblNjaGVtYTogR2VuTWVzc2FnZTxNaXNzaW9uQmVhY29uRGVmaW5pdGlvbj4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDQ4KTtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uUGxheWVyXG4gKi9cbmV4cG9ydCB0eXBlIE1pc3Npb25CZWFjb25QbGF5ZXIgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblBsYXllclwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHBsYXllcl9pZCA9IDE7XG4gICAqL1xuICBwbGF5ZXJJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGN1cnJlbnRfaW5kZXggPSAyO1xuICAgKi9cbiAgY3VycmVudEluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGhvbGRfYWNjdW0gPSAzO1xuICAgKi9cbiAgaG9sZEFjY3VtOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGhvbGRfcmVxdWlyZWQgPSA0O1xuICAgKi9cbiAgaG9sZFJlcXVpcmVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGFjdGl2ZV9iZWFjb24gPSA1O1xuICAgKi9cbiAgYWN0aXZlQmVhY29uOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGRpc2NvdmVyZWQgPSA2O1xuICAgKi9cbiAgZGlzY292ZXJlZDogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGNvbXBsZXRlZCA9IDc7XG4gICAqL1xuICBjb21wbGV0ZWQ6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG1hcDxzdHJpbmcsIGRvdWJsZT4gY29vbGRvd25zID0gODtcbiAgICovXG4gIGNvb2xkb3duczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25QbGF5ZXIuXG4gKiBVc2UgYGNyZWF0ZShNaXNzaW9uQmVhY29uUGxheWVyU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBNaXNzaW9uQmVhY29uUGxheWVyU2NoZW1hOiBHZW5NZXNzYWdlPE1pc3Npb25CZWFjb25QbGF5ZXI+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA0OSk7XG5cbi8qKlxuICogU2VydmVyIFx1MjE5MiBDbGllbnQ6IGluY3JlbWVudGFsIG1pc3Npb24gYmVhY29uIHVwZGF0ZXNcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVsdGFcbiAqL1xuZXhwb3J0IHR5cGUgTWlzc2lvbkJlYWNvbkRlbHRhID0gTWVzc2FnZTxcImxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25EZWx0YVwiPiAmIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblBsYXllckRlbHRhIHBsYXllcnMgPSAxO1xuICAgKi9cbiAgcGxheWVyczogTWlzc2lvbkJlYWNvblBsYXllckRlbHRhW107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvbkVuY291bnRlckV2ZW50IGVuY291bnRlcnMgPSAyO1xuICAgKi9cbiAgZW5jb3VudGVyczogTWlzc2lvbkJlYWNvbkVuY291bnRlckV2ZW50W107XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVsdGEuXG4gKiBVc2UgYGNyZWF0ZShNaXNzaW9uQmVhY29uRGVsdGFTY2hlbWEpYCB0byBjcmVhdGUgYSBuZXcgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1pc3Npb25CZWFjb25EZWx0YVNjaGVtYTogR2VuTWVzc2FnZTxNaXNzaW9uQmVhY29uRGVsdGE+ID0gLypAX19QVVJFX18qL1xuICBtZXNzYWdlRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCA1MCk7XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblBsYXllckRlbHRhXG4gKi9cbmV4cG9ydCB0eXBlIE1pc3Npb25CZWFjb25QbGF5ZXJEZWx0YSA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uUGxheWVyRGVsdGFcIj4gJiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25EZWx0YVR5cGUgdHlwZSA9IDE7XG4gICAqL1xuICB0eXBlOiBNaXNzaW9uQmVhY29uRGVsdGFUeXBlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBwbGF5ZXJfaWQgPSAyO1xuICAgKi9cbiAgcGxheWVySWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgYmVhY29uX2lkID0gMztcbiAgICovXG4gIGJlYWNvbklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgb3JkaW5hbCA9IDQ7XG4gICAqL1xuICBvcmRpbmFsOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGhvbGRfYWNjdW0gPSA1O1xuICAgKi9cbiAgaG9sZEFjY3VtOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGhvbGRfcmVxdWlyZWQgPSA2O1xuICAgKi9cbiAgaG9sZFJlcXVpcmVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGNvb2xkb3duX3VudGlsID0gNztcbiAgICovXG4gIGNvb2xkb3duVW50aWw6IG51bWJlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgc2VydmVyX3RpbWUgPSA4O1xuICAgKi9cbiAgc2VydmVyVGltZTogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG1lc3NhZ2UgbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvblBsYXllckRlbHRhLlxuICogVXNlIGBjcmVhdGUoTWlzc2lvbkJlYWNvblBsYXllckRlbHRhU2NoZW1hKWAgdG8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBNaXNzaW9uQmVhY29uUGxheWVyRGVsdGFTY2hlbWE6IEdlbk1lc3NhZ2U8TWlzc2lvbkJlYWNvblBsYXllckRlbHRhPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNTEpO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25FbmNvdW50ZXJcbiAqL1xuZXhwb3J0IHR5cGUgTWlzc2lvbkJlYWNvbkVuY291bnRlciA9IE1lc3NhZ2U8XCJsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRW5jb3VudGVyXCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZW5jb3VudGVyX2lkID0gMTtcbiAgICovXG4gIGVuY291bnRlcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGJlYWNvbl9pZCA9IDI7XG4gICAqL1xuICBiZWFjb25JZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIHdhdmVfaW5kZXggPSAzO1xuICAgKi9cbiAgd2F2ZUluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHNwYXduZWRfYXQgPSA0O1xuICAgKi9cbiAgc3Bhd25lZEF0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGV4cGlyZXNfYXQgPSA1O1xuICAgKi9cbiAgZXhwaXJlc0F0OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgbWVzc2FnZSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRW5jb3VudGVyLlxuICogVXNlIGBjcmVhdGUoTWlzc2lvbkJlYWNvbkVuY291bnRlclNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lvbkJlYWNvbkVuY291bnRlclNjaGVtYTogR2VuTWVzc2FnZTxNaXNzaW9uQmVhY29uRW5jb3VudGVyPiA9IC8qQF9fUFVSRV9fKi9cbiAgbWVzc2FnZURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNTIpO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25FbmNvdW50ZXJFdmVudFxuICovXG5leHBvcnQgdHlwZSBNaXNzaW9uQmVhY29uRW5jb3VudGVyRXZlbnQgPSBNZXNzYWdlPFwibGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkJlYWNvbkVuY291bnRlckV2ZW50XCI+ICYge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uRW5jb3VudGVyRXZlbnRUeXBlIHR5cGUgPSAxO1xuICAgKi9cbiAgdHlwZTogTWlzc2lvbkVuY291bnRlckV2ZW50VHlwZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZW5jb3VudGVyX2lkID0gMjtcbiAgICovXG4gIGVuY291bnRlcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGJlYWNvbl9pZCA9IDM7XG4gICAqL1xuICBiZWFjb25JZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIHdhdmVfaW5kZXggPSA0O1xuICAgKi9cbiAgd2F2ZUluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIHNwYXduZWRfYXQgPSA1O1xuICAgKi9cbiAgc3Bhd25lZEF0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZG91YmxlIGV4cGlyZXNfYXQgPSA2O1xuICAgKi9cbiAgZXhwaXJlc0F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJlYXNvbiA9IDc7XG4gICAqL1xuICByZWFzb246IHN0cmluZztcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBtZXNzYWdlIGxpZ2h0c3BlZWRkdWVsLndzLk1pc3Npb25CZWFjb25FbmNvdW50ZXJFdmVudC5cbiAqIFVzZSBgY3JlYXRlKE1pc3Npb25CZWFjb25FbmNvdW50ZXJFdmVudFNjaGVtYSlgIHRvIGNyZWF0ZSBhIG5ldyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lvbkJlYWNvbkVuY291bnRlckV2ZW50U2NoZW1hOiBHZW5NZXNzYWdlPE1pc3Npb25CZWFjb25FbmNvdW50ZXJFdmVudD4gPSAvKkBfX1BVUkVfXyovXG4gIG1lc3NhZ2VEZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDUzKTtcblxuLyoqXG4gKiBEQUcgbm9kZSBzdGF0dXMgZW51bVxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ05vZGVTdGF0dXNcbiAqL1xuZXhwb3J0IGVudW0gRGFnTm9kZVN0YXR1cyB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogREFHX05PREVfU1RBVFVTX1VOU1BFQ0lGSUVEID0gMDtcbiAgICovXG4gIFVOU1BFQ0lGSUVEID0gMCxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERBR19OT0RFX1NUQVRVU19MT0NLRUQgPSAxO1xuICAgKi9cbiAgTE9DS0VEID0gMSxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERBR19OT0RFX1NUQVRVU19BVkFJTEFCTEUgPSAyO1xuICAgKi9cbiAgQVZBSUxBQkxFID0gMixcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERBR19OT0RFX1NUQVRVU19JTl9QUk9HUkVTUyA9IDM7XG4gICAqL1xuICBJTl9QUk9HUkVTUyA9IDMsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBEQUdfTk9ERV9TVEFUVVNfQ09NUExFVEVEID0gNDtcbiAgICovXG4gIENPTVBMRVRFRCA9IDQsXG59XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGxpZ2h0c3BlZWRkdWVsLndzLkRhZ05vZGVTdGF0dXMuXG4gKi9cbmV4cG9ydCBjb25zdCBEYWdOb2RlU3RhdHVzU2NoZW1hOiBHZW5FbnVtPERhZ05vZGVTdGF0dXM+ID0gLypAX19QVVJFX18qL1xuICBlbnVtRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAwKTtcblxuLyoqXG4gKiBEQUcgbm9kZSBraW5kIGVudW1cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBsaWdodHNwZWVkZHVlbC53cy5EYWdOb2RlS2luZFxuICovXG5leHBvcnQgZW51bSBEYWdOb2RlS2luZCB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogREFHX05PREVfS0lORF9VTlNQRUNJRklFRCA9IDA7XG4gICAqL1xuICBVTlNQRUNJRklFRCA9IDAsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBEQUdfTk9ERV9LSU5EX0ZBQ1RPUlkgPSAxO1xuICAgKi9cbiAgRkFDVE9SWSA9IDEsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBEQUdfTk9ERV9LSU5EX1VOSVQgPSAyO1xuICAgKi9cbiAgVU5JVCA9IDIsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBEQUdfTk9ERV9LSU5EX1NUT1JZID0gMztcbiAgICovXG4gIFNUT1JZID0gMyxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IERBR19OT0RFX0tJTkRfQ1JBRlQgPSA0O1xuICAgKi9cbiAgQ1JBRlQgPSA0LFxufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBsaWdodHNwZWVkZHVlbC53cy5EYWdOb2RlS2luZC5cbiAqL1xuZXhwb3J0IGNvbnN0IERhZ05vZGVLaW5kU2NoZW1hOiBHZW5FbnVtPERhZ05vZGVLaW5kPiA9IC8qQF9fUFVSRV9fKi9cbiAgZW51bURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMSk7XG5cbi8qKlxuICogVXBncmFkZSBlZmZlY3QgdHlwZSBlbnVtXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gbGlnaHRzcGVlZGR1ZWwud3MuVXBncmFkZUVmZmVjdFR5cGVcbiAqL1xuZXhwb3J0IGVudW0gVXBncmFkZUVmZmVjdFR5cGUge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFVQR1JBREVfRUZGRUNUX1RZUEVfVU5TUEVDSUZJRUQgPSAwO1xuICAgKi9cbiAgVU5TUEVDSUZJRUQgPSAwLFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVVBHUkFERV9FRkZFQ1RfVFlQRV9TUEVFRF9NVUxUSVBMSUVSID0gMTtcbiAgICovXG4gIFNQRUVEX01VTFRJUExJRVIgPSAxLFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVVBHUkFERV9FRkZFQ1RfVFlQRV9NSVNTSUxFX1VOTE9DSyA9IDI7XG4gICAqL1xuICBNSVNTSUxFX1VOTE9DSyA9IDIsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBVUEdSQURFX0VGRkVDVF9UWVBFX0hFQVRfQ0FQQUNJVFkgPSAzO1xuICAgKi9cbiAgSEVBVF9DQVBBQ0lUWSA9IDMsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBVUEdSQURFX0VGRkVDVF9UWVBFX0hFQVRfRUZGSUNJRU5DWSA9IDQ7XG4gICAqL1xuICBIRUFUX0VGRklDSUVOQ1kgPSA0LFxufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBsaWdodHNwZWVkZHVlbC53cy5VcGdyYWRlRWZmZWN0VHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFVwZ3JhZGVFZmZlY3RUeXBlU2NoZW1hOiBHZW5FbnVtPFVwZ3JhZGVFZmZlY3RUeXBlPiA9IC8qQF9fUFVSRV9fKi9cbiAgZW51bURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgMik7XG5cbi8qKlxuICogU3RvcnkgaW50ZW50IGVudW1cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBsaWdodHNwZWVkZHVlbC53cy5TdG9yeUludGVudFxuICovXG5leHBvcnQgZW51bSBTdG9yeUludGVudCB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU1RPUllfSU5URU5UX1VOU1BFQ0lGSUVEID0gMDtcbiAgICovXG4gIFVOU1BFQ0lGSUVEID0gMCxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFNUT1JZX0lOVEVOVF9GQUNUT1JZID0gMTtcbiAgICovXG4gIEZBQ1RPUlkgPSAxLFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU1RPUllfSU5URU5UX1VOSVQgPSAyO1xuICAgKi9cbiAgVU5JVCA9IDIsXG59XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBlbnVtIGxpZ2h0c3BlZWRkdWVsLndzLlN0b3J5SW50ZW50LlxuICovXG5leHBvcnQgY29uc3QgU3RvcnlJbnRlbnRTY2hlbWE6IEdlbkVudW08U3RvcnlJbnRlbnQ+ID0gLypAX19QVVJFX18qL1xuICBlbnVtRGVzYyhmaWxlX3Byb3RvX3dzX21lc3NhZ2VzLCAzKTtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVsdGFUeXBlXG4gKi9cbmV4cG9ydCBlbnVtIE1pc3Npb25CZWFjb25EZWx0YVR5cGUge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE1JU1NJT05fQkVBQ09OX0RFTFRBX1VOU1BFQ0lGSUVEID0gMDtcbiAgICovXG4gIE1JU1NJT05fQkVBQ09OX0RFTFRBX1VOU1BFQ0lGSUVEID0gMCxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE1JU1NJT05fQkVBQ09OX0RFTFRBX0RJU0NPVkVSRUQgPSAxO1xuICAgKi9cbiAgTUlTU0lPTl9CRUFDT05fREVMVEFfRElTQ09WRVJFRCA9IDEsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBNSVNTSU9OX0JFQUNPTl9ERUxUQV9IT0xEX1BST0dSRVNTID0gMjtcbiAgICovXG4gIE1JU1NJT05fQkVBQ09OX0RFTFRBX0hPTERfUFJPR1JFU1MgPSAyLFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTUlTU0lPTl9CRUFDT05fREVMVEFfSE9MRF9SRVNFVCA9IDM7XG4gICAqL1xuICBNSVNTSU9OX0JFQUNPTl9ERUxUQV9IT0xEX1JFU0VUID0gMyxcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE1JU1NJT05fQkVBQ09OX0RFTFRBX0xPQ0tFRCA9IDQ7XG4gICAqL1xuICBNSVNTSU9OX0JFQUNPTl9ERUxUQV9MT0NLRUQgPSA0LFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTUlTU0lPTl9CRUFDT05fREVMVEFfQ09PTERPV04gPSA1O1xuICAgKi9cbiAgTUlTU0lPTl9CRUFDT05fREVMVEFfQ09PTERPV04gPSA1LFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTUlTU0lPTl9CRUFDT05fREVMVEFfTUlTU0lPTl9DT01QTEVURUQgPSA2O1xuICAgKi9cbiAgTUlTU0lPTl9CRUFDT05fREVMVEFfTUlTU0lPTl9DT01QTEVURUQgPSA2LFxufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgZW51bSBsaWdodHNwZWVkZHVlbC53cy5NaXNzaW9uQmVhY29uRGVsdGFUeXBlLlxuICovXG5leHBvcnQgY29uc3QgTWlzc2lvbkJlYWNvbkRlbHRhVHlwZVNjaGVtYTogR2VuRW51bTxNaXNzaW9uQmVhY29uRGVsdGFUeXBlPiA9IC8qQF9fUFVSRV9fKi9cbiAgZW51bURlc2MoZmlsZV9wcm90b193c19tZXNzYWdlcywgNCk7XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkVuY291bnRlckV2ZW50VHlwZVxuICovXG5leHBvcnQgZW51bSBNaXNzaW9uRW5jb3VudGVyRXZlbnRUeXBlIHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBNSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9VTlNQRUNJRklFRCA9IDA7XG4gICAqL1xuICBNSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9VTlNQRUNJRklFRCA9IDAsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBNSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9TUEFXTkVEID0gMTtcbiAgICovXG4gIE1JU1NJT05fRU5DT1VOVEVSX0VWRU5UX1NQQVdORUQgPSAxLFxuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTUlTU0lPTl9FTkNPVU5URVJfRVZFTlRfQ0xFQVJFRCA9IDI7XG4gICAqL1xuICBNSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9DTEVBUkVEID0gMixcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IE1JU1NJT05fRU5DT1VOVEVSX0VWRU5UX1RJTUVPVVQgPSAzO1xuICAgKi9cbiAgTUlTU0lPTl9FTkNPVU5URVJfRVZFTlRfVElNRU9VVCA9IDMsXG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBNSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9QVVJHRUQgPSA0O1xuICAgKi9cbiAgTUlTU0lPTl9FTkNPVU5URVJfRVZFTlRfUFVSR0VEID0gNCxcbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGVudW0gbGlnaHRzcGVlZGR1ZWwud3MuTWlzc2lvbkVuY291bnRlckV2ZW50VHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1pc3Npb25FbmNvdW50ZXJFdmVudFR5cGVTY2hlbWE6IEdlbkVudW08TWlzc2lvbkVuY291bnRlckV2ZW50VHlwZT4gPSAvKkBfX1BVUkVfXyovXG4gIGVudW1EZXNjKGZpbGVfcHJvdG9fd3NfbWVzc2FnZXMsIDUpO1xuXG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmV4cG9ydCB7fTtcbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgc2NhbGFyRXF1YWxzIH0gZnJvbSBcIi4vcmVmbGVjdC9zY2FsYXIuanNcIjtcbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IFNjYWxhclR5cGUsIH0gZnJvbSBcIi4vZGVzY3JpcHRvcnMuanNcIjtcbmltcG9ydCB7IGFueVVucGFjayB9IGZyb20gXCIuL3drdC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRXh0ZW5zaW9uQ29udGFpbmVyLCBnZXRFeHRlbnNpb24gfSBmcm9tIFwiLi9leHRlbnNpb25zLmpzXCI7XG4vKipcbiAqIENvbXBhcmUgdHdvIG1lc3NhZ2VzIG9mIHRoZSBzYW1lIHR5cGUuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gZGlzcmVnYXJkcyBleHRlbnNpb25zIGFuZCB1bmtub3duIGZpZWxkcywgYW5kIHRoYXRcbiAqIE5hTiBpcyBub3QgZXF1YWwgTmFOLCBmb2xsb3dpbmcgdGhlIElFRUUgc3RhbmRhcmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoc2NoZW1hLCBhLCBiLCBvcHRpb25zKSB7XG4gICAgaWYgKGEuJHR5cGVOYW1lICE9IHNjaGVtYS50eXBlTmFtZSB8fCBiLiR0eXBlTmFtZSAhPSBzY2hlbWEudHlwZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZmxlY3RFcXVhbHMocmVmbGVjdChzY2hlbWEsIGEpLCByZWZsZWN0KHNjaGVtYSwgYiksIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVmbGVjdEVxdWFscyhhLCBiLCBvcHRzKSB7XG4gICAgaWYgKGEuZGVzYy50eXBlTmFtZSA9PT0gXCJnb29nbGUucHJvdG9idWYuQW55XCIgJiYgKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy51bnBhY2tBbnkpID09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGFueVVucGFja2VkRXF1YWxzKGEubWVzc2FnZSwgYi5tZXNzYWdlLCBvcHRzKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmIG9mIGEuZmllbGRzKSB7XG4gICAgICAgIGlmICghZmllbGRFcXVhbHMoZiwgYSwgYiwgb3B0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy51bmtub3duKSA9PSB0cnVlICYmICF1bmtub3duRXF1YWxzKGEsIGIsIG9wdHMucmVnaXN0cnkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZXh0ZW5zaW9ucykgPT0gdHJ1ZSAmJiAhZXh0ZW5zaW9uc0VxdWFscyhhLCBiLCBvcHRzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8gVE9ETyh0c3RhbW0pIGFkZCBhbiBvcHRpb24gdG8gY29uc2lkZXIgTmFOIGVxdWFsIHRvIE5hTj9cbmZ1bmN0aW9uIGZpZWxkRXF1YWxzKGYsIGEsIGIsIG9wdHMpIHtcbiAgICBpZiAoIWEuaXNTZXQoZikgJiYgIWIuaXNTZXQoZikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghYS5pc1NldChmKSB8fCAhYi5pc1NldChmKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAoZi5maWVsZEtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgcmV0dXJuIHNjYWxhckVxdWFscyhmLnNjYWxhciwgYS5nZXQoZiksIGIuZ2V0KGYpKTtcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgIHJldHVybiBhLmdldChmKSA9PT0gYi5nZXQoZik7XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICByZXR1cm4gcmVmbGVjdEVxdWFscyhhLmdldChmKSwgYi5nZXQoZiksIG9wdHMpO1xuICAgICAgICBjYXNlIFwibWFwXCI6IHtcbiAgICAgICAgICAgIC8vIFRPRE8odHN0YW1tKSBjYW4ndCB3ZSBjb21wYXJlIHNpemVzIGZpcnN0P1xuICAgICAgICAgICAgY29uc3QgbWFwQSA9IGEuZ2V0KGYpO1xuICAgICAgICAgICAgY29uc3QgbWFwQiA9IGIuZ2V0KGYpO1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIG9mIG1hcEEua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXBCLmhhcyhrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleXMucHVzaChrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiBtYXBCLmtleXMoKSkge1xuICAgICAgICAgICAgICAgIGlmICghbWFwQS5oYXMoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YSA9IG1hcEEuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmIgPSBtYXBCLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YSA9PT0gdmIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZi5tYXBLaW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZmxlY3RFcXVhbHModmEsIHZiLCBvcHRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjYWxhckVxdWFscyhmLnNjYWxhciwgdmEsIHZiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJsaXN0XCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RBID0gYS5nZXQoZik7XG4gICAgICAgICAgICBjb25zdCBsaXN0QiA9IGIuZ2V0KGYpO1xuICAgICAgICAgICAgaWYgKGxpc3RBLnNpemUgIT0gbGlzdEIuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdEEuc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmEgPSBsaXN0QS5nZXQoaSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmIgPSBsaXN0Qi5nZXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhID09PSB2Yikge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmLmxpc3RLaW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZmxlY3RFcXVhbHModmEsIHZiLCBvcHRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjYWxhckVxdWFscyhmLnNjYWxhciwgdmEsIHZiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYW55VW5wYWNrZWRFcXVhbHMoYSwgYiwgb3B0cykge1xuICAgIGlmIChhLnR5cGVVcmwgIT09IGIudHlwZVVybCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHVucGFja2VkQSA9IGFueVVucGFjayhhLCBvcHRzLnJlZ2lzdHJ5KTtcbiAgICBjb25zdCB1bnBhY2tlZEIgPSBhbnlVbnBhY2soYiwgb3B0cy5yZWdpc3RyeSk7XG4gICAgaWYgKHVucGFja2VkQSAmJiB1bnBhY2tlZEIpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gb3B0cy5yZWdpc3RyeS5nZXRNZXNzYWdlKHVucGFja2VkQS4kdHlwZU5hbWUpO1xuICAgICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzKHNjaGVtYSwgdW5wYWNrZWRBLCB1bnBhY2tlZEIsIG9wdHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY2FsYXJFcXVhbHMoU2NhbGFyVHlwZS5CWVRFUywgYS52YWx1ZSwgYi52YWx1ZSk7XG59XG5mdW5jdGlvbiB1bmtub3duRXF1YWxzKGEsIGIsIHJlZ2lzdHJ5KSB7XG4gICAgZnVuY3Rpb24gZ2V0VHJ1bHlVbmtub3duKG1zZywgcmVnaXN0cnkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB1ID0gKF9hID0gbXNnLmdldFVua25vd24oKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgIHJldHVybiByZWdpc3RyeVxuICAgICAgICAgICAgPyB1LmZpbHRlcigodWYpID0+ICFyZWdpc3RyeS5nZXRFeHRlbnNpb25Gb3IobXNnLmRlc2MsIHVmLm5vKSlcbiAgICAgICAgICAgIDogdTtcbiAgICB9XG4gICAgY29uc3QgdW5rbm93bkEgPSBnZXRUcnVseVVua25vd24oYSwgcmVnaXN0cnkpO1xuICAgIGNvbnN0IHVua25vd25CID0gZ2V0VHJ1bHlVbmtub3duKGIsIHJlZ2lzdHJ5KTtcbiAgICBpZiAodW5rbm93bkEubGVuZ3RoICE9IHVua25vd25CLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW5rbm93bkEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYSA9IHVua25vd25BW2ldO1xuICAgICAgICBjb25zdCBiID0gdW5rbm93bkJbaV07XG4gICAgICAgIGlmIChhLm5vICE9IGIubm8pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS53aXJlVHlwZSAhPSBiLndpcmVUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzY2FsYXJFcXVhbHMoU2NhbGFyVHlwZS5CWVRFUywgYS5kYXRhLCBiLmRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBleHRlbnNpb25zRXF1YWxzKGEsIGIsIG9wdHMpIHtcbiAgICBmdW5jdGlvbiBnZXRTZXRFeHRlbnNpb25zKG1zZywgcmVnaXN0cnkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKChfYSA9IG1zZy5nZXRVbmtub3duKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKVxuICAgICAgICAgICAgLm1hcCgodWYpID0+IHJlZ2lzdHJ5LmdldEV4dGVuc2lvbkZvcihtc2cuZGVzYywgdWYubm8pKVxuICAgICAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAuZmlsdGVyKChlLCBpbmRleCwgYXJyKSA9PiBhcnIuaW5kZXhPZihlKSA9PT0gaW5kZXgpO1xuICAgIH1cbiAgICBjb25zdCBleHRlbnNpb25zQSA9IGdldFNldEV4dGVuc2lvbnMoYSwgb3B0cy5yZWdpc3RyeSk7XG4gICAgY29uc3QgZXh0ZW5zaW9uc0IgPSBnZXRTZXRFeHRlbnNpb25zKGIsIG9wdHMucmVnaXN0cnkpO1xuICAgIGlmIChleHRlbnNpb25zQS5sZW5ndGggIT0gZXh0ZW5zaW9uc0IubGVuZ3RoIHx8XG4gICAgICAgIGV4dGVuc2lvbnNBLnNvbWUoKGUpID0+ICFleHRlbnNpb25zQi5pbmNsdWRlcyhlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGV4dGVuc2lvbiBvZiBleHRlbnNpb25zQSkge1xuICAgICAgICBjb25zdCBbY29udGFpbmVyQSwgZmllbGRdID0gY3JlYXRlRXh0ZW5zaW9uQ29udGFpbmVyKGV4dGVuc2lvbiwgZ2V0RXh0ZW5zaW9uKGEubWVzc2FnZSwgZXh0ZW5zaW9uKSk7XG4gICAgICAgIGNvbnN0IFtjb250YWluZXJCXSA9IGNyZWF0ZUV4dGVuc2lvbkNvbnRhaW5lcihleHRlbnNpb24sIGdldEV4dGVuc2lvbihiLm1lc3NhZ2UsIGV4dGVuc2lvbikpO1xuICAgICAgICBpZiAoIWZpZWxkRXF1YWxzKGZpZWxkLCBjb250YWluZXJBLCBjb250YWluZXJCLCBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjUgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBTY2FsYXJUeXBlLCB9IGZyb20gXCIuL2Rlc2NyaXB0b3JzLmpzXCI7XG5pbXBvcnQgeyBwcm90b0NhbWVsQ2FzZSB9IGZyb20gXCIuL3JlZmxlY3QvbmFtZXMuanNcIjtcbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IGFueVVucGFjayB9IGZyb20gXCIuL3drdC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNXcmFwcGVyRGVzYyB9IGZyb20gXCIuL3drdC93cmFwcGVycy5qc1wiO1xuaW1wb3J0IHsgYmFzZTY0RW5jb2RlIH0gZnJvbSBcIi4vd2lyZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRXh0ZW5zaW9uQ29udGFpbmVyLCBnZXRFeHRlbnNpb24gfSBmcm9tIFwiLi9leHRlbnNpb25zLmpzXCI7XG5pbXBvcnQgeyBjaGVja0ZpZWxkLCBmb3JtYXRWYWwgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QtY2hlY2suanNcIjtcbi8vIGJvb3RzdHJhcC1pbmplY3QgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZS5MRUdBQ1lfUkVRVUlSRUQ6IGNvbnN0ICRuYW1lOiBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UuJGxvY2FsTmFtZSA9ICRudW1iZXI7XG5jb25zdCBMRUdBQ1lfUkVRVUlSRUQgPSAzO1xuLy8gYm9vdHN0cmFwLWluamVjdCBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5GaWVsZFByZXNlbmNlLklNUExJQ0lUOiBjb25zdCAkbmFtZTogRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlLiRsb2NhbE5hbWUgPSAkbnVtYmVyO1xuY29uc3QgSU1QTElDSVQgPSAyO1xuLy8gRGVmYXVsdCBvcHRpb25zIGZvciBzZXJpYWxpemluZyB0byBKU09OLlxuY29uc3QganNvbldyaXRlRGVmYXVsdHMgPSB7XG4gICAgYWx3YXlzRW1pdEltcGxpY2l0OiBmYWxzZSxcbiAgICBlbnVtQXNJbnRlZ2VyOiBmYWxzZSxcbiAgICB1c2VQcm90b0ZpZWxkTmFtZTogZmFsc2UsXG59O1xuZnVuY3Rpb24gbWFrZVdyaXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGpzb25Xcml0ZURlZmF1bHRzKSwgb3B0aW9ucykgOiBqc29uV3JpdGVEZWZhdWx0cztcbn1cbi8qKlxuICogU2VyaWFsaXplIHRoZSBtZXNzYWdlIHRvIGEgSlNPTiB2YWx1ZSwgYSBKYXZhU2NyaXB0IHZhbHVlIHRoYXQgY2FuIGJlXG4gKiBwYXNzZWQgdG8gSlNPTi5zdHJpbmdpZnkoKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnNvbihzY2hlbWEsIG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVmbGVjdFRvSnNvbihyZWZsZWN0KHNjaGVtYSwgbWVzc2FnZSksIG1ha2VXcml0ZU9wdGlvbnMob3B0aW9ucykpO1xufVxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIG1lc3NhZ2UgdG8gYSBKU09OIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnNvblN0cmluZyhzY2hlbWEsIG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QganNvblZhbHVlID0gdG9Kc29uKHNjaGVtYSwgbWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25WYWx1ZSwgbnVsbCwgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZXR0eVNwYWNlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCk7XG59XG4vKipcbiAqIFNlcmlhbGl6ZSBhIHNpbmdsZSBlbnVtIHZhbHVlIHRvIEpTT04uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnVtVG9Kc29uKGRlc2NFbnVtLCB2YWx1ZSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoZGVzY0VudW0udHlwZU5hbWUgPT0gXCJnb29nbGUucHJvdG9idWYuTnVsbFZhbHVlXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBkZXNjRW51bS52YWx1ZVt2YWx1ZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lO1xuICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3ZhbHVlfSBpcyBub3QgYSB2YWx1ZSBpbiAke2Rlc2NFbnVtfWApO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIHJlZmxlY3RUb0pzb24obXNnLCBvcHRzKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHdrdEpzb24gPSB0cnlXa3RUb0pzb24obXNnLCBvcHRzKTtcbiAgICBpZiAod2t0SnNvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gd2t0SnNvbjtcbiAgICBjb25zdCBqc29uID0ge307XG4gICAgZm9yIChjb25zdCBmIG9mIG1zZy5zb3J0ZWRGaWVsZHMpIHtcbiAgICAgICAgaWYgKCFtc2cuaXNTZXQoZikpIHtcbiAgICAgICAgICAgIGlmIChmLnByZXNlbmNlID09IExFR0FDWV9SRVFVSVJFRCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSAke2Z9IHRvIEpTT046IHJlcXVpcmVkIGZpZWxkIG5vdCBzZXRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb3B0cy5hbHdheXNFbWl0SW1wbGljaXQgfHwgZi5wcmVzZW5jZSAhPT0gSU1QTElDSVQpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWVsZHMgd2l0aCBpbXBsaWNpdCBwcmVzZW5jZSBvbWl0IHplcm8gdmFsdWVzIChlLmcuIGVtcHR5IHN0cmluZykgYnkgZGVmYXVsdFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpzb25WYWx1ZSA9IGZpZWxkVG9Kc29uKGYsIG1zZy5nZXQoZiksIG9wdHMpO1xuICAgICAgICBpZiAoanNvblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGpzb25banNvbk5hbWUoZiwgb3B0cyldID0ganNvblZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRzLnJlZ2lzdHJ5KSB7XG4gICAgICAgIGNvbnN0IHRhZ1NlZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgeyBubyB9IG9mIChfYSA9IG1zZy5nZXRVbmtub3duKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKSB7XG4gICAgICAgICAgICAvLyBTYW1lIHRhZyBjYW4gYXBwZWFyIG11bHRpcGxlIHRpbWVzLCBzbyB3ZVxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBhbmQgc2tpcCBpZGVudGljYWwgb25lcy5cbiAgICAgICAgICAgIGlmICghdGFnU2Vlbi5oYXMobm8pKSB7XG4gICAgICAgICAgICAgICAgdGFnU2Vlbi5hZGQobm8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG9wdHMucmVnaXN0cnkuZ2V0RXh0ZW5zaW9uRm9yKG1zZy5kZXNjLCBubyk7XG4gICAgICAgICAgICAgICAgaWYgKCFleHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0RXh0ZW5zaW9uKG1zZy5tZXNzYWdlLCBleHRlbnNpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IFtjb250YWluZXIsIGZpZWxkXSA9IGNyZWF0ZUV4dGVuc2lvbkNvbnRhaW5lcihleHRlbnNpb24sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uVmFsdWUgPSBmaWVsZFRvSnNvbihmaWVsZCwgY29udGFpbmVyLmdldChmaWVsZCksIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlmIChqc29uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBqc29uW2V4dGVuc2lvbi5qc29uTmFtZV0gPSBqc29uVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xufVxuZnVuY3Rpb24gZmllbGRUb0pzb24oZiwgdmFsLCBvcHRzKSB7XG4gICAgc3dpdGNoIChmLmZpZWxkS2luZCkge1xuICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICByZXR1cm4gc2NhbGFyVG9Kc29uKGYsIHZhbCk7XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICByZXR1cm4gcmVmbGVjdFRvSnNvbih2YWwsIG9wdHMpO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgcmV0dXJuIGVudW1Ub0pzb25JbnRlcm5hbChmLmVudW0sIHZhbCwgb3B0cy5lbnVtQXNJbnRlZ2VyKTtcbiAgICAgICAgY2FzZSBcImxpc3RcIjpcbiAgICAgICAgICAgIHJldHVybiBsaXN0VG9Kc29uKHZhbCwgb3B0cyk7XG4gICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgIHJldHVybiBtYXBUb0pzb24odmFsLCBvcHRzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYXBUb0pzb24obWFwLCBvcHRzKSB7XG4gICAgY29uc3QgZiA9IG1hcC5maWVsZCgpO1xuICAgIGNvbnN0IGpzb25PYmogPSB7fTtcbiAgICBzd2l0Y2ggKGYubWFwS2luZCkge1xuICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRyeUtleSwgZW50cnlWYWx1ZV0gb2YgbWFwKSB7XG4gICAgICAgICAgICAgICAganNvbk9ialtlbnRyeUtleV0gPSBzY2FsYXJUb0pzb24oZiwgZW50cnlWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VudHJ5S2V5LCBlbnRyeVZhbHVlXSBvZiBtYXApIHtcbiAgICAgICAgICAgICAgICBqc29uT2JqW2VudHJ5S2V5XSA9IHJlZmxlY3RUb0pzb24oZW50cnlWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VudHJ5S2V5LCBlbnRyeVZhbHVlXSBvZiBtYXApIHtcbiAgICAgICAgICAgICAgICBqc29uT2JqW2VudHJ5S2V5XSA9IGVudW1Ub0pzb25JbnRlcm5hbChmLmVudW0sIGVudHJ5VmFsdWUsIG9wdHMuZW51bUFzSW50ZWdlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG9wdHMuYWx3YXlzRW1pdEltcGxpY2l0IHx8IG1hcC5zaXplID4gMCA/IGpzb25PYmogOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBsaXN0VG9Kc29uKGxpc3QsIG9wdHMpIHtcbiAgICBjb25zdCBmID0gbGlzdC5maWVsZCgpO1xuICAgIGNvbnN0IGpzb25BcnIgPSBbXTtcbiAgICBzd2l0Y2ggKGYubGlzdEtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgICAgICAgICAgICBqc29uQXJyLnB1c2goc2NhbGFyVG9Kc29uKGYsIGl0ZW0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgICAgICAgICAgICBqc29uQXJyLnB1c2goZW51bVRvSnNvbkludGVybmFsKGYuZW51bSwgaXRlbSwgb3B0cy5lbnVtQXNJbnRlZ2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICAgICAgICAgICAganNvbkFyci5wdXNoKHJlZmxlY3RUb0pzb24oaXRlbSwgb3B0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBvcHRzLmFsd2F5c0VtaXRJbXBsaWNpdCB8fCBqc29uQXJyLmxlbmd0aCA+IDAgPyBqc29uQXJyIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZW51bVRvSnNvbkludGVybmFsKGRlc2MsIHZhbHVlLCBlbnVtQXNJbnRlZ2VyKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBlbmNvZGUgJHtkZXNjfSB0byBKU09OOiBleHBlY3RlZCBudW1iZXIsIGdvdCAke2Zvcm1hdFZhbCh2YWx1ZSl9YCk7XG4gICAgfVxuICAgIGlmIChkZXNjLnR5cGVOYW1lID09IFwiZ29vZ2xlLnByb3RvYnVmLk51bGxWYWx1ZVwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZW51bUFzSW50ZWdlcikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IGRlc2MudmFsdWVbdmFsdWVdO1xuICAgIHJldHVybiAoX2EgPSB2YWwgPT09IG51bGwgfHwgdmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWwubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsdWU7IC8vIGlmIHdlIGRvbid0IGtub3cgdGhlIGVudW0gdmFsdWUsIGp1c3QgcmV0dXJuIHRoZSBudW1iZXJcbn1cbmZ1bmN0aW9uIHNjYWxhclRvSnNvbihmaWVsZCwgdmFsdWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICBzd2l0Y2ggKGZpZWxkLnNjYWxhcikge1xuICAgICAgICAvLyBpbnQzMiwgZml4ZWQzMiwgdWludDMyOiBKU09OIHZhbHVlIHdpbGwgYmUgYSBkZWNpbWFsIG51bWJlci4gRWl0aGVyIG51bWJlcnMgb3Igc3RyaW5ncyBhcmUgYWNjZXB0ZWQuXG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSAke2ZpZWxkfSB0byBKU09OOiAkeyhfYSA9IGNoZWNrRmllbGQoZmllbGQsIHZhbHVlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIGZsb2F0LCBkb3VibGU6IEpTT04gdmFsdWUgd2lsbCBiZSBhIG51bWJlciBvciBvbmUgb2YgdGhlIHNwZWNpYWwgc3RyaW5nIHZhbHVlcyBcIk5hTlwiLCBcIkluZmluaXR5XCIsIGFuZCBcIi1JbmZpbml0eVwiLlxuICAgICAgICAvLyBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC4gRXhwb25lbnQgbm90YXRpb24gaXMgYWxzbyBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZMT0FUOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBlbmNvZGUgJHtmaWVsZH0gdG8gSlNPTjogJHsoX2IgPSBjaGVja0ZpZWxkKGZpZWxkLCB2YWx1ZSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTih2YWx1ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTmFOXCI7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbmZpbml0eVwiO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLUluZmluaXR5XCI7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIHN0cmluZzpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNUUklORzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSAke2ZpZWxkfSB0byBKU09OOiAkeyhfYyA9IGNoZWNrRmllbGQoZmllbGQsIHZhbHVlKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIGJvb2w6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CT09MOlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSAke2ZpZWxkfSB0byBKU09OOiAkeyhfZCA9IGNoZWNrRmllbGQoZmllbGQsIHZhbHVlKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIEpTT04gdmFsdWUgd2lsbCBiZSBhIGRlY2ltYWwgc3RyaW5nLiBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcImJpZ2ludFwiICYmIHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZW5jb2RlICR7ZmllbGR9IHRvIEpTT046ICR7KF9lID0gY2hlY2tGaWVsZChmaWVsZCwgdmFsdWUpKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAvLyBieXRlczogSlNPTiB2YWx1ZSB3aWxsIGJlIHRoZSBkYXRhIGVuY29kZWQgYXMgYSBzdHJpbmcgdXNpbmcgc3RhbmRhcmQgYmFzZTY0IGVuY29kaW5nIHdpdGggcGFkZGluZ3MuXG4gICAgICAgIC8vIEVpdGhlciBzdGFuZGFyZCBvciBVUkwtc2FmZSBiYXNlNjQgZW5jb2Rpbmcgd2l0aC93aXRob3V0IHBhZGRpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJZVEVTOlxuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNjRFbmNvZGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZW5jb2RlICR7ZmllbGR9IHRvIEpTT046ICR7KF9mID0gY2hlY2tGaWVsZChmaWVsZCwgdmFsdWUpKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubWVzc2FnZX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBqc29uTmFtZShmLCBvcHRzKSB7XG4gICAgcmV0dXJuIG9wdHMudXNlUHJvdG9GaWVsZE5hbWUgPyBmLm5hbWUgOiBmLmpzb25OYW1lO1xufVxuLy8gcmV0dXJucyBhIGpzb24gdmFsdWUgaWYgd2t0LCBvdGhlcndpc2UgcmV0dXJucyB1bmRlZmluZWQuXG5mdW5jdGlvbiB0cnlXa3RUb0pzb24obXNnLCBvcHRzKSB7XG4gICAgaWYgKCFtc2cuZGVzYy50eXBlTmFtZS5zdGFydHNXaXRoKFwiZ29vZ2xlLnByb3RvYnVmLlwiKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzd2l0Y2ggKG1zZy5kZXNjLnR5cGVOYW1lKSB7XG4gICAgICAgIGNhc2UgXCJnb29nbGUucHJvdG9idWYuQW55XCI6XG4gICAgICAgICAgICByZXR1cm4gYW55VG9Kc29uKG1zZy5tZXNzYWdlLCBvcHRzKTtcbiAgICAgICAgY2FzZSBcImdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcIjpcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBUb0pzb24obXNnLm1lc3NhZ2UpO1xuICAgICAgICBjYXNlIFwiZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gZHVyYXRpb25Ub0pzb24obXNnLm1lc3NhZ2UpO1xuICAgICAgICBjYXNlIFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza1wiOlxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkTWFza1RvSnNvbihtc2cubWVzc2FnZSk7XG4gICAgICAgIGNhc2UgXCJnb29nbGUucHJvdG9idWYuU3RydWN0XCI6XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0VG9Kc29uKG1zZy5tZXNzYWdlKTtcbiAgICAgICAgY2FzZSBcImdvb2dsZS5wcm90b2J1Zi5WYWx1ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlVG9Kc29uKG1zZy5tZXNzYWdlKTtcbiAgICAgICAgY2FzZSBcImdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWVcIjpcbiAgICAgICAgICAgIHJldHVybiBsaXN0VmFsdWVUb0pzb24obXNnLm1lc3NhZ2UpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKGlzV3JhcHBlckRlc2MobXNnLmRlc2MpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVGaWVsZCA9IG1zZy5kZXNjLmZpZWxkc1swXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGFyVG9Kc29uKHZhbHVlRmllbGQsIG1zZy5nZXQodmFsdWVGaWVsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5mdW5jdGlvbiBhbnlUb0pzb24odmFsLCBvcHRzKSB7XG4gICAgaWYgKHZhbC50eXBlVXJsID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgeyByZWdpc3RyeSB9ID0gb3B0cztcbiAgICBsZXQgbWVzc2FnZTtcbiAgICBsZXQgZGVzYztcbiAgICBpZiAocmVnaXN0cnkpIHtcbiAgICAgICAgbWVzc2FnZSA9IGFueVVucGFjayh2YWwsIHJlZ2lzdHJ5KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGRlc2MgPSByZWdpc3RyeS5nZXRNZXNzYWdlKG1lc3NhZ2UuJHR5cGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWRlc2MgfHwgIW1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZW5jb2RlIG1lc3NhZ2UgJHt2YWwuJHR5cGVOYW1lfSB0byBKU09OOiBcIiR7dmFsLnR5cGVVcmx9XCIgaXMgbm90IGluIHRoZSB0eXBlIHJlZ2lzdHJ5YCk7XG4gICAgfVxuICAgIGxldCBqc29uID0gcmVmbGVjdFRvSnNvbihyZWZsZWN0KGRlc2MsIG1lc3NhZ2UpLCBvcHRzKTtcbiAgICBpZiAoZGVzYy50eXBlTmFtZS5zdGFydHNXaXRoKFwiZ29vZ2xlLnByb3RvYnVmLlwiKSB8fFxuICAgICAgICBqc29uID09PSBudWxsIHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoanNvbikgfHxcbiAgICAgICAgdHlwZW9mIGpzb24gIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAganNvbiA9IHsgdmFsdWU6IGpzb24gfTtcbiAgICB9XG4gICAganNvbltcIkB0eXBlXCJdID0gdmFsLnR5cGVVcmw7XG4gICAgcmV0dXJuIGpzb247XG59XG5mdW5jdGlvbiBkdXJhdGlvblRvSnNvbih2YWwpIHtcbiAgICBpZiAoTnVtYmVyKHZhbC5zZWNvbmRzKSA+IDMxNTU3NjAwMDAwMCB8fFxuICAgICAgICBOdW1iZXIodmFsLnNlY29uZHMpIDwgLTMxNTU3NjAwMDAwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBlbmNvZGUgbWVzc2FnZSAke3ZhbC4kdHlwZU5hbWV9IHRvIEpTT046IHZhbHVlIG91dCBvZiByYW5nZWApO1xuICAgIH1cbiAgICBsZXQgdGV4dCA9IHZhbC5zZWNvbmRzLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbC5uYW5vcyAhPT0gMCkge1xuICAgICAgICBsZXQgbmFub3NTdHIgPSBNYXRoLmFicyh2YWwubmFub3MpLnRvU3RyaW5nKCk7XG4gICAgICAgIG5hbm9zU3RyID0gXCIwXCIucmVwZWF0KDkgLSBuYW5vc1N0ci5sZW5ndGgpICsgbmFub3NTdHI7XG4gICAgICAgIGlmIChuYW5vc1N0ci5zdWJzdHJpbmcoMykgPT09IFwiMDAwMDAwXCIpIHtcbiAgICAgICAgICAgIG5hbm9zU3RyID0gbmFub3NTdHIuc3Vic3RyaW5nKDAsIDMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbm9zU3RyLnN1YnN0cmluZyg2KSA9PT0gXCIwMDBcIikge1xuICAgICAgICAgICAgbmFub3NTdHIgPSBuYW5vc1N0ci5zdWJzdHJpbmcoMCwgNik7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCArPSBcIi5cIiArIG5hbm9zU3RyO1xuICAgICAgICBpZiAodmFsLm5hbm9zIDwgMCAmJiBOdW1iZXIodmFsLnNlY29uZHMpID09IDApIHtcbiAgICAgICAgICAgIHRleHQgPSBcIi1cIiArIHRleHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQgKyBcInNcIjtcbn1cbmZ1bmN0aW9uIGZpZWxkTWFza1RvSnNvbih2YWwpIHtcbiAgICByZXR1cm4gdmFsLnBhdGhzXG4gICAgICAgIC5tYXAoKHApID0+IHtcbiAgICAgICAgaWYgKHAubWF0Y2goL19bMC05XT9fL2cpIHx8IHAubWF0Y2goL1tBLVpdL2cpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBlbmNvZGUgbWVzc2FnZSAke3ZhbC4kdHlwZU5hbWV9IHRvIEpTT046IGxvd2VyQ2FtZWxDYXNlIG9mIHBhdGggbmFtZSBcImAgK1xuICAgICAgICAgICAgICAgIHAgK1xuICAgICAgICAgICAgICAgICdcIiBpcyBpcnJldmVyc2libGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvdG9DYW1lbENhc2UocCk7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oXCIsXCIpO1xufVxuZnVuY3Rpb24gc3RydWN0VG9Kc29uKHZhbCkge1xuICAgIGNvbnN0IGpzb24gPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyh2YWwuZmllbGRzKSkge1xuICAgICAgICBqc29uW2tdID0gdmFsdWVUb0pzb24odik7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xufVxuZnVuY3Rpb24gdmFsdWVUb0pzb24odmFsKSB7XG4gICAgc3dpdGNoICh2YWwua2luZC5jYXNlKSB7XG4gICAgICAgIGNhc2UgXCJudWxsVmFsdWVcIjpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlIFwibnVtYmVyVmFsdWVcIjpcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHZhbC5raW5kLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt2YWwuJHR5cGVOYW1lfSBjYW5ub3QgYmUgTmFOIG9yIEluZmluaXR5YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsLmtpbmQudmFsdWU7XG4gICAgICAgIGNhc2UgXCJib29sVmFsdWVcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWwua2luZC52YWx1ZTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1ZhbHVlXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsLmtpbmQudmFsdWU7XG4gICAgICAgIGNhc2UgXCJzdHJ1Y3RWYWx1ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHN0cnVjdFRvSnNvbih2YWwua2luZC52YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJsaXN0VmFsdWVcIjpcbiAgICAgICAgICAgIHJldHVybiBsaXN0VmFsdWVUb0pzb24odmFsLmtpbmQudmFsdWUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3ZhbC4kdHlwZU5hbWV9IG11c3QgaGF2ZSBhIHZhbHVlYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdFZhbHVlVG9Kc29uKHZhbCkge1xuICAgIHJldHVybiB2YWwudmFsdWVzLm1hcCh2YWx1ZVRvSnNvbik7XG59XG5mdW5jdGlvbiB0aW1lc3RhbXBUb0pzb24odmFsKSB7XG4gICAgY29uc3QgbXMgPSBOdW1iZXIodmFsLnNlY29uZHMpICogMTAwMDtcbiAgICBpZiAobXMgPCBEYXRlLnBhcnNlKFwiMDAwMS0wMS0wMVQwMDowMDowMFpcIikgfHxcbiAgICAgICAgbXMgPiBEYXRlLnBhcnNlKFwiOTk5OS0xMi0zMVQyMzo1OTo1OVpcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZW5jb2RlIG1lc3NhZ2UgJHt2YWwuJHR5cGVOYW1lfSB0byBKU09OOiBtdXN0IGJlIGZyb20gMDAwMS0wMS0wMVQwMDowMDowMFogdG8gOTk5OS0xMi0zMVQyMzo1OTo1OVogaW5jbHVzaXZlYCk7XG4gICAgfVxuICAgIGlmICh2YWwubmFub3MgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSBtZXNzYWdlICR7dmFsLiR0eXBlTmFtZX0gdG8gSlNPTjogbmFub3MgbXVzdCBub3QgYmUgbmVnYXRpdmVgKTtcbiAgICB9XG4gICAgbGV0IHogPSBcIlpcIjtcbiAgICBpZiAodmFsLm5hbm9zID4gMCkge1xuICAgICAgICBjb25zdCBuYW5vc1N0ciA9ICh2YWwubmFub3MgKyAxMDAwMDAwMDAwKS50b1N0cmluZygpLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKG5hbm9zU3RyLnN1YnN0cmluZygzKSA9PT0gXCIwMDAwMDBcIikge1xuICAgICAgICAgICAgeiA9IFwiLlwiICsgbmFub3NTdHIuc3Vic3RyaW5nKDAsIDMpICsgXCJaXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFub3NTdHIuc3Vic3RyaW5nKDYpID09PSBcIjAwMFwiKSB7XG4gICAgICAgICAgICB6ID0gXCIuXCIgKyBuYW5vc1N0ci5zdWJzdHJpbmcoMCwgNikgKyBcIlpcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHogPSBcIi5cIiArIG5hbm9zU3RyICsgXCJaXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKG1zKS50b0lTT1N0cmluZygpLnJlcGxhY2UoXCIuMDAwWlwiLCB6KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI1IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2NhbGFyVHlwZSwgfSBmcm9tIFwiLi9kZXNjcmlwdG9ycy5qc1wiO1xuaW1wb3J0IHsgcHJvdG9JbnQ2NCB9IGZyb20gXCIuL3Byb3RvLWludDY0LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tIFwiLi9jcmVhdGUuanNcIjtcbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IEZpZWxkRXJyb3IsIGlzRmllbGRFcnJvciB9IGZyb20gXCIuL3JlZmxlY3QvZXJyb3IuanNcIjtcbmltcG9ydCB7IGZvcm1hdFZhbCB9IGZyb20gXCIuL3JlZmxlY3QvcmVmbGVjdC1jaGVjay5qc1wiO1xuaW1wb3J0IHsgc2NhbGFyWmVyb1ZhbHVlIH0gZnJvbSBcIi4vcmVmbGVjdC9zY2FsYXIuanNcIjtcbmltcG9ydCB7IGJhc2U2NERlY29kZSB9IGZyb20gXCIuL3dpcmUvYmFzZTY0LWVuY29kaW5nLmpzXCI7XG5pbXBvcnQgeyBpc1dyYXBwZXJEZXNjLCBhbnlQYWNrLCBMaXN0VmFsdWVTY2hlbWEsIE51bGxWYWx1ZSwgU3RydWN0U2NoZW1hLCBWYWx1ZVNjaGVtYSwgfSBmcm9tIFwiLi93a3QvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZUV4dGVuc2lvbkNvbnRhaW5lciwgc2V0RXh0ZW5zaW9uIH0gZnJvbSBcIi4vZXh0ZW5zaW9ucy5qc1wiO1xuLy8gRGVmYXVsdCBvcHRpb25zIGZvciBwYXJzaW5nIEpTT04uXG5jb25zdCBqc29uUmVhZERlZmF1bHRzID0ge1xuICAgIGlnbm9yZVVua25vd25GaWVsZHM6IGZhbHNlLFxufTtcbmZ1bmN0aW9uIG1ha2VSZWFkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGpzb25SZWFkRGVmYXVsdHMpLCBvcHRpb25zKSA6IGpzb25SZWFkRGVmYXVsdHM7XG59XG4vKipcbiAqIFBhcnNlIGEgbWVzc2FnZSBmcm9tIGEgSlNPTiBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSnNvblN0cmluZyhzY2hlbWEsIGpzb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZnJvbUpzb24oc2NoZW1hLCBwYXJzZUpzb25TdHJpbmcoanNvbiwgc2NoZW1hLnR5cGVOYW1lKSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIFBhcnNlIGEgbWVzc2FnZSBmcm9tIGEgSlNPTiBzdHJpbmcsIG1lcmdpbmcgZmllbGRzLlxuICpcbiAqIFJlcGVhdGVkIGZpZWxkcyBhcmUgYXBwZW5kZWQuIE1hcCBlbnRyaWVzIGFyZSBhZGRlZCwgb3ZlcndyaXRpbmdcbiAqIGV4aXN0aW5nIGtleXMuXG4gKlxuICogSWYgYSBtZXNzYWdlIGZpZWxkIGlzIGFscmVhZHkgcHJlc2VudCwgaXQgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGVcbiAqIG5ldyBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VGcm9tSnNvblN0cmluZyhzY2hlbWEsIHRhcmdldCwganNvbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBtZXJnZUZyb21Kc29uKHNjaGVtYSwgdGFyZ2V0LCBwYXJzZUpzb25TdHJpbmcoanNvbiwgc2NoZW1hLnR5cGVOYW1lKSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIFBhcnNlIGEgbWVzc2FnZSBmcm9tIGEgSlNPTiB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Kc29uKHNjaGVtYSwganNvbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1zZyA9IHJlZmxlY3Qoc2NoZW1hKTtcbiAgICB0cnkge1xuICAgICAgICByZWFkTWVzc2FnZShtc2csIGpzb24sIG1ha2VSZWFkT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChpc0ZpZWxkRXJyb3IoZSkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igd2UgdXNlIHRoZSBFUzIwMjIgZXJyb3IgQ1RPUiBvcHRpb24gXCJjYXVzZVwiIGZvciBiZXR0ZXIgc3RhY2sgdHJhY2VzXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgJHtlLmZpZWxkKCl9IGZyb20gSlNPTjogJHtlLm1lc3NhZ2V9YCwge1xuICAgICAgICAgICAgICAgIGNhdXNlOiBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgcmV0dXJuIG1zZy5tZXNzYWdlO1xufVxuLyoqXG4gKiBQYXJzZSBhIG1lc3NhZ2UgZnJvbSBhIEpTT04gdmFsdWUsIG1lcmdpbmcgZmllbGRzLlxuICpcbiAqIFJlcGVhdGVkIGZpZWxkcyBhcmUgYXBwZW5kZWQuIE1hcCBlbnRyaWVzIGFyZSBhZGRlZCwgb3ZlcndyaXRpbmdcbiAqIGV4aXN0aW5nIGtleXMuXG4gKlxuICogSWYgYSBtZXNzYWdlIGZpZWxkIGlzIGFscmVhZHkgcHJlc2VudCwgaXQgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGVcbiAqIG5ldyBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VGcm9tSnNvbihzY2hlbWEsIHRhcmdldCwganNvbiwgb3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICAgIHJlYWRNZXNzYWdlKHJlZmxlY3Qoc2NoZW1hLCB0YXJnZXQpLCBqc29uLCBtYWtlUmVhZE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaXNGaWVsZEVycm9yKGUpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIHVzZSB0aGUgRVMyMDIyIGVycm9yIENUT1Igb3B0aW9uIFwiY2F1c2VcIiBmb3IgYmV0dGVyIHN0YWNrIHRyYWNlc1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlICR7ZS5maWVsZCgpfSBmcm9tIEpTT046ICR7ZS5tZXNzYWdlfWAsIHtcbiAgICAgICAgICAgICAgICBjYXVzZTogZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIFBhcnNlcyBhbiBlbnVtIHZhbHVlIGZyb20gSlNPTi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVudW1Gcm9tSnNvbihkZXNjRW51bSwganNvbikge1xuICAgIGNvbnN0IHZhbCA9IHJlYWRFbnVtKGRlc2NFbnVtLCBqc29uLCBmYWxzZSwgZmFsc2UpO1xuICAgIGlmICh2YWwgPT09IHRva2VuSWdub3JlZFVua25vd25FbnVtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSAke2Rlc2NFbnVtfSBmcm9tIEpTT046ICR7Zm9ybWF0VmFsKGpzb24pfWApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBKU09OIGVudW0gdmFsdWU/XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VudW1Kc29uKGRlc2NFbnVtLCB2YWx1ZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQgIT09IGRlc2NFbnVtLnZhbHVlcy5maW5kKCh2KSA9PiB2Lm5hbWUgPT09IHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHJlYWRNZXNzYWdlKG1zZywganNvbiwgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICBpZiAodHJ5V2t0RnJvbUpzb24obXNnLCBqc29uLCBvcHRzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChqc29uID09IG51bGwgfHwgQXJyYXkuaXNBcnJheShqc29uKSB8fCB0eXBlb2YganNvbiAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSAke21zZy5kZXNjfSBmcm9tIEpTT046ICR7Zm9ybWF0VmFsKGpzb24pfWApO1xuICAgIH1cbiAgICBjb25zdCBvbmVvZlNlZW4gPSBuZXcgTWFwKCk7XG4gICAgY29uc3QganNvbk5hbWVzID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgbXNnLmRlc2MuZmllbGRzKSB7XG4gICAgICAgIGpzb25OYW1lcy5zZXQoZmllbGQubmFtZSwgZmllbGQpLnNldChmaWVsZC5qc29uTmFtZSwgZmllbGQpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtqc29uS2V5LCBqc29uVmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGpzb24pKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0ganNvbk5hbWVzLmdldChqc29uS2V5KTtcbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBudWxsICYmIGZpZWxkLmZpZWxkS2luZCA9PSBcInNjYWxhclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSBjb25mb3JtYW5jZSB0ZXN0IFJlcXVpcmVkLlByb3RvMy5Kc29uSW5wdXQuT25lb2ZGaWVsZE51bGx7Rmlyc3QsU2Vjb25kfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VlbiA9IG9uZW9mU2Vlbi5nZXQoZmllbGQub25lb2YpO1xuICAgICAgICAgICAgICAgIGlmIChzZWVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpZWxkRXJyb3IoZmllbGQub25lb2YsIGBvbmVvZiBzZXQgbXVsdGlwbGUgdGltZXMgYnkgJHtzZWVuLm5hbWV9IGFuZCAke2ZpZWxkLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uZW9mU2Vlbi5zZXQoZmllbGQub25lb2YsIGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlYWRGaWVsZChtc2csIGZpZWxkLCBqc29uVmFsdWUsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChqc29uS2V5LnN0YXJ0c1dpdGgoXCJbXCIpICYmXG4gICAgICAgICAgICAgICAganNvbktleS5lbmRzV2l0aChcIl1cIikgJiZcbiAgICAgICAgICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdXNwaWNpb3VzL25vQXNzaWduSW5FeHByZXNzaW9uczogbm9cbiAgICAgICAgICAgICAgICAoZXh0ZW5zaW9uID0gKF9hID0gb3B0cy5yZWdpc3RyeSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEV4dGVuc2lvbihqc29uS2V5LnN1YnN0cmluZygxLCBqc29uS2V5Lmxlbmd0aCAtIDEpKSkgJiZcbiAgICAgICAgICAgICAgICBleHRlbnNpb24uZXh0ZW5kZWUudHlwZU5hbWUgPT09IG1zZy5kZXNjLnR5cGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2NvbnRhaW5lciwgZmllbGQsIGdldF0gPSBjcmVhdGVFeHRlbnNpb25Db250YWluZXIoZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgICAgICByZWFkRmllbGQoY29udGFpbmVyLCBmaWVsZCwganNvblZhbHVlLCBvcHRzKTtcbiAgICAgICAgICAgICAgICBzZXRFeHRlbnNpb24obXNnLm1lc3NhZ2UsIGV4dGVuc2lvbiwgZ2V0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFleHRlbnNpb24gJiYgIW9wdHMuaWdub3JlVW5rbm93bkZpZWxkcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSAke21zZy5kZXNjfSBmcm9tIEpTT046IGtleSBcIiR7anNvbktleX1cIiBpcyB1bmtub3duYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiByZWFkRmllbGQobXNnLCBmaWVsZCwganNvbiwgb3B0cykge1xuICAgIHN3aXRjaCAoZmllbGQuZmllbGRLaW5kKSB7XG4gICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgIHJlYWRTY2FsYXJGaWVsZChtc2csIGZpZWxkLCBqc29uKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgcmVhZEVudW1GaWVsZChtc2csIGZpZWxkLCBqc29uLCBvcHRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgcmVhZE1lc3NhZ2VGaWVsZChtc2csIGZpZWxkLCBqc29uLCBvcHRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgcmVhZExpc3RGaWVsZChtc2cuZ2V0KGZpZWxkKSwganNvbiwgb3B0cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgcmVhZE1hcEZpZWxkKG1zZy5nZXQoZmllbGQpLCBqc29uLCBvcHRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlYWRNYXBGaWVsZChtYXAsIGpzb24sIG9wdHMpIHtcbiAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZpZWxkID0gbWFwLmZpZWxkKCk7XG4gICAgaWYgKHR5cGVvZiBqc29uICE9IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRmllbGRFcnJvcihmaWVsZCwgXCJleHBlY3RlZCBvYmplY3QsIGdvdCBcIiArIGZvcm1hdFZhbChqc29uKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2pzb25NYXBLZXksIGpzb25NYXBWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoanNvbikpIHtcbiAgICAgICAgaWYgKGpzb25NYXBWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEZpZWxkRXJyb3IoZmllbGQsIFwibWFwIHZhbHVlIG11c3Qgbm90IGJlIG51bGxcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBzd2l0Y2ggKGZpZWxkLm1hcEtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnVmFsdWUgPSByZWZsZWN0KGZpZWxkLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJlYWRNZXNzYWdlKG1zZ1ZhbHVlLCBqc29uTWFwVmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbXNnVmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVhZEVudW0oZmllbGQuZW51bSwganNvbk1hcFZhbHVlLCBvcHRzLmlnbm9yZVVua25vd25GaWVsZHMsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdG9rZW5JZ25vcmVkVW5rbm93bkVudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNjYWxhckZyb21Kc29uKGZpZWxkLCBqc29uTWFwVmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IG1hcEtleUZyb21Kc29uKGZpZWxkLm1hcEtleSwganNvbk1hcEtleSk7XG4gICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVhZExpc3RGaWVsZChsaXN0LCBqc29uLCBvcHRzKSB7XG4gICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmaWVsZCA9IGxpc3QuZmllbGQoKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZpZWxkRXJyb3IoZmllbGQsIFwiZXhwZWN0ZWQgQXJyYXksIGdvdCBcIiArIGZvcm1hdFZhbChqc29uKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QganNvbkl0ZW0gb2YganNvbikge1xuICAgICAgICBpZiAoanNvbkl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBGaWVsZEVycm9yKGZpZWxkLCBcImxpc3QgaXRlbSBtdXN0IG5vdCBiZSBudWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZmllbGQubGlzdEtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnVmFsdWUgPSByZWZsZWN0KGZpZWxkLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJlYWRNZXNzYWdlKG1zZ1ZhbHVlLCBqc29uSXRlbSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgbGlzdC5hZGQobXNnVmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICBjb25zdCBlbnVtVmFsdWUgPSByZWFkRW51bShmaWVsZC5lbnVtLCBqc29uSXRlbSwgb3B0cy5pZ25vcmVVbmtub3duRmllbGRzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoZW51bVZhbHVlICE9PSB0b2tlbklnbm9yZWRVbmtub3duRW51bSkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LmFkZChlbnVtVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICBsaXN0LmFkZChzY2FsYXJGcm9tSnNvbihmaWVsZCwganNvbkl0ZW0sIHRydWUpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlYWRNZXNzYWdlRmllbGQobXNnLCBmaWVsZCwganNvbiwgb3B0cykge1xuICAgIGlmIChqc29uID09PSBudWxsICYmIGZpZWxkLm1lc3NhZ2UudHlwZU5hbWUgIT0gXCJnb29nbGUucHJvdG9idWYuVmFsdWVcIikge1xuICAgICAgICBtc2cuY2xlYXIoZmllbGQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1zZ1ZhbHVlID0gbXNnLmlzU2V0KGZpZWxkKSA/IG1zZy5nZXQoZmllbGQpIDogcmVmbGVjdChmaWVsZC5tZXNzYWdlKTtcbiAgICByZWFkTWVzc2FnZShtc2dWYWx1ZSwganNvbiwgb3B0cyk7XG4gICAgbXNnLnNldChmaWVsZCwgbXNnVmFsdWUpO1xufVxuZnVuY3Rpb24gcmVhZEVudW1GaWVsZChtc2csIGZpZWxkLCBqc29uLCBvcHRzKSB7XG4gICAgY29uc3QgZW51bVZhbHVlID0gcmVhZEVudW0oZmllbGQuZW51bSwganNvbiwgb3B0cy5pZ25vcmVVbmtub3duRmllbGRzLCBmYWxzZSk7XG4gICAgaWYgKGVudW1WYWx1ZSA9PT0gdG9rZW5OdWxsKSB7XG4gICAgICAgIG1zZy5jbGVhcihmaWVsZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVudW1WYWx1ZSAhPT0gdG9rZW5JZ25vcmVkVW5rbm93bkVudW0pIHtcbiAgICAgICAgbXNnLnNldChmaWVsZCwgZW51bVZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWFkU2NhbGFyRmllbGQobXNnLCBmaWVsZCwganNvbikge1xuICAgIGNvbnN0IHNjYWxhclZhbHVlID0gc2NhbGFyRnJvbUpzb24oZmllbGQsIGpzb24sIGZhbHNlKTtcbiAgICBpZiAoc2NhbGFyVmFsdWUgPT09IHRva2VuTnVsbCkge1xuICAgICAgICBtc2cuY2xlYXIoZmllbGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbXNnLnNldChmaWVsZCwgc2NhbGFyVmFsdWUpO1xuICAgIH1cbn1cbmNvbnN0IHRva2VuSWdub3JlZFVua25vd25FbnVtID0gU3ltYm9sKCk7XG5mdW5jdGlvbiByZWFkRW51bShkZXNjLCBqc29uLCBpZ25vcmVVbmtub3duRmllbGRzLCBudWxsQXNaZXJvVmFsdWUpIHtcbiAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoZGVzYy50eXBlTmFtZSA9PSBcImdvb2dsZS5wcm90b2J1Zi5OdWxsVmFsdWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGdvb2dsZS5wcm90b2J1Zi5OdWxsVmFsdWUuTlVMTF9WQUxVRSA9IDBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbEFzWmVyb1ZhbHVlID8gZGVzYy52YWx1ZXNbMF0ubnVtYmVyIDogdG9rZW5OdWxsO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGVvZiBqc29uKSB7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGpzb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZXNjLnZhbHVlcy5maW5kKChldikgPT4gZXYubmFtZSA9PT0ganNvbik7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5udW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaWdub3JlVW5rbm93bkZpZWxkcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbklnbm9yZWRVbmtub3duRW51bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgJHtkZXNjfSBmcm9tIEpTT046ICR7Zm9ybWF0VmFsKGpzb24pfWApO1xufVxuY29uc3QgdG9rZW5OdWxsID0gU3ltYm9sKCk7XG5mdW5jdGlvbiBzY2FsYXJGcm9tSnNvbihmaWVsZCwganNvbiwgbnVsbEFzWmVyb1ZhbHVlKSB7XG4gICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG51bGxBc1plcm9WYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjYWxhclplcm9WYWx1ZShmaWVsZC5zY2FsYXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5OdWxsO1xuICAgIH1cbiAgICAvLyBpbnQ2NCwgc2ZpeGVkNjQsIHNpbnQ2NCwgZml4ZWQ2NCwgdWludDY0OiBSZWZsZWN0IHN1cHBvcnRzIHN0cmluZyBhbmQgbnVtYmVyLlxuICAgIC8vIHN0cmluZywgYm9vbDogU3VwcG9ydGVkIGJ5IHJlZmxlY3QuXG4gICAgc3dpdGNoIChmaWVsZC5zY2FsYXIpIHtcbiAgICAgICAgLy8gZmxvYXQsIGRvdWJsZTogSlNPTiB2YWx1ZSB3aWxsIGJlIGEgbnVtYmVyIG9yIG9uZSBvZiB0aGUgc3BlY2lhbCBzdHJpbmcgdmFsdWVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIiwgYW5kIFwiLUluZmluaXR5XCIuXG4gICAgICAgIC8vIEVpdGhlciBudW1iZXJzIG9yIHN0cmluZ3MgYXJlIGFjY2VwdGVkLiBFeHBvbmVudCBub3RhdGlvbiBpcyBhbHNvIGFjY2VwdGVkLlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICBpZiAoanNvbiA9PT0gXCJOYU5cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICAgICAgaWYgKGpzb24gPT09IFwiSW5maW5pdHlcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgaWYgKGpzb24gPT09IFwiLUluZmluaXR5XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihqc29uKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOYU4gbXVzdCBiZSBlbmNvZGVkIHdpdGggc3RyaW5nIGNvbnN0YW50c1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmllbGRFcnJvcihmaWVsZCwgXCJ1bmV4cGVjdGVkIE5hTiBudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGpzb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluZmluaXR5IG11c3QgYmUgZW5jb2RlZCB3aXRoIHN0cmluZyBjb25zdGFudHNcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpZWxkRXJyb3IoZmllbGQsIFwidW5leHBlY3RlZCBpbmZpbml0ZSBudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoanNvbiA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IGEgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoanNvbi50cmltKCkubGVuZ3RoICE9PSBqc29uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBleHRyYSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmbG9hdCA9IE51bWJlcihqc29uKTtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShmbG9hdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5maW5pdHkgYW5kIE5hTiBtdXN0IGJlIGVuY29kZWQgd2l0aCBzdHJpbmcgY29uc3RhbnRzXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmxvYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gaW50MzIsIGZpeGVkMzIsIHVpbnQzMjogSlNPTiB2YWx1ZSB3aWxsIGJlIGEgZGVjaW1hbCBudW1iZXIuIEVpdGhlciBudW1iZXJzIG9yIHN0cmluZ3MgYXJlIGFjY2VwdGVkLlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UMzI6XG4gICAgICAgICAgICByZXR1cm4gaW50MzJGcm9tSnNvbihqc29uKTtcbiAgICAgICAgLy8gYnl0ZXM6IEpTT04gdmFsdWUgd2lsbCBiZSB0aGUgZGF0YSBlbmNvZGVkIGFzIGEgc3RyaW5nIHVzaW5nIHN0YW5kYXJkIGJhc2U2NCBlbmNvZGluZyB3aXRoIHBhZGRpbmdzLlxuICAgICAgICAvLyBFaXRoZXIgc3RhbmRhcmQgb3IgVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nIHdpdGgvd2l0aG91dCBwYWRkaW5ncyBhcmUgYWNjZXB0ZWQuXG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CWVRFUzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpzb24gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTY0RGVjb2RlKGpzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogU3RyaW5nKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRmllbGRFcnJvcihmaWVsZCwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xufVxuLyoqXG4gKiBUcnkgdG8gcGFyc2UgYSBKU09OIHZhbHVlIHRvIGEgbWFwIGtleSBmb3IgdGhlIHJlZmxlY3QgQVBJLlxuICpcbiAqIFJldHVybnMgdGhlIGlucHV0IGlmIHRoZSBKU09OIHZhbHVlIGNhbm5vdCBiZSBjb252ZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIG1hcEtleUZyb21Kc29uKHR5cGUsIGpzb24pIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICBzd2l0Y2ggKGpzb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidHJ1ZVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjpcbiAgICAgICAgICAgIHJldHVybiBpbnQzMkZyb21Kc29uKGpzb24pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxufVxuLyoqXG4gKiBUcnkgdG8gcGFyc2UgYSBKU09OIHZhbHVlIHRvIGEgMzItYml0IGludGVnZXIgZm9yIHRoZSByZWZsZWN0IEFQSS5cbiAqXG4gKiBSZXR1cm5zIHRoZSBpbnB1dCBpZiB0aGUgSlNPTiB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkLlxuICovXG5mdW5jdGlvbiBpbnQzMkZyb21Kc29uKGpzb24pIHtcbiAgICBpZiAodHlwZW9mIGpzb24gPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoanNvbiA9PT0gXCJcIikge1xuICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGlzIG5vdCBhIG51bWJlclxuICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpzb24udHJpbSgpLmxlbmd0aCAhPT0ganNvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGV4dHJhIHdoaXRlc3BhY2VcbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihqc29uKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihudW0pKSB7XG4gICAgICAgICAgICAvLyBub3QgYSBudW1iZXJcbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xufVxuZnVuY3Rpb24gcGFyc2VKc29uU3RyaW5nKGpzb25TdHJpbmcsIHR5cGVOYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7dHlwZU5hbWV9IGZyb20gSlNPTjogJHttZXNzYWdlfWAsIFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIHVzZSB0aGUgRVMyMDIyIGVycm9yIENUT1Igb3B0aW9uIFwiY2F1c2VcIiBmb3IgYmV0dGVyIHN0YWNrIHRyYWNlc1xuICAgICAgICB7IGNhdXNlOiBlIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeVdrdEZyb21Kc29uKG1zZywganNvblZhbHVlLCBvcHRzKSB7XG4gICAgaWYgKCFtc2cuZGVzYy50eXBlTmFtZS5zdGFydHNXaXRoKFwiZ29vZ2xlLnByb3RvYnVmLlwiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAobXNnLmRlc2MudHlwZU5hbWUpIHtcbiAgICAgICAgY2FzZSBcImdvb2dsZS5wcm90b2J1Zi5BbnlcIjpcbiAgICAgICAgICAgIGFueUZyb21Kc29uKG1zZy5tZXNzYWdlLCBqc29uVmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgXCJnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXCI6XG4gICAgICAgICAgICB0aW1lc3RhbXBGcm9tSnNvbihtc2cubWVzc2FnZSwganNvblZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFwiZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uXCI6XG4gICAgICAgICAgICBkdXJhdGlvbkZyb21Kc29uKG1zZy5tZXNzYWdlLCBqc29uVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgXCJnb29nbGUucHJvdG9idWYuRmllbGRNYXNrXCI6XG4gICAgICAgICAgICBmaWVsZE1hc2tGcm9tSnNvbihtc2cubWVzc2FnZSwganNvblZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFwiZ29vZ2xlLnByb3RvYnVmLlN0cnVjdFwiOlxuICAgICAgICAgICAgc3RydWN0RnJvbUpzb24obXNnLm1lc3NhZ2UsIGpzb25WYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSBcImdvb2dsZS5wcm90b2J1Zi5WYWx1ZVwiOlxuICAgICAgICAgICAgdmFsdWVGcm9tSnNvbihtc2cubWVzc2FnZSwganNvblZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFwiZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZVwiOlxuICAgICAgICAgICAgbGlzdFZhbHVlRnJvbUpzb24obXNnLm1lc3NhZ2UsIGpzb25WYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChpc1dyYXBwZXJEZXNjKG1zZy5kZXNjKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRmllbGQgPSBtc2cuZGVzYy5maWVsZHNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGpzb25WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtc2cuY2xlYXIodmFsdWVGaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2cuc2V0KHZhbHVlRmllbGQsIHNjYWxhckZyb21Kc29uKHZhbHVlRmllbGQsIGpzb25WYWx1ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBhbnlGcm9tSnNvbihhbnksIGpzb24sIG9wdHMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGpzb24gPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShqc29uKSB8fCB0eXBlb2YganNvbiAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7YW55LiR0eXBlTmFtZX0gZnJvbSBKU09OOiBleHBlY3RlZCBvYmplY3QgYnV0IGdvdCAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGpzb24pLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHlwZVVybCA9IGpzb25bXCJAdHlwZVwiXTtcbiAgICBpZiAodHlwZW9mIHR5cGVVcmwgIT0gXCJzdHJpbmdcIiB8fCB0eXBlVXJsID09IFwiXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIG1lc3NhZ2UgJHthbnkuJHR5cGVOYW1lfSBmcm9tIEpTT046IFwiQHR5cGVcIiBpcyBlbXB0eWApO1xuICAgIH1cbiAgICBjb25zdCB0eXBlTmFtZSA9IHR5cGVVcmwuaW5jbHVkZXMoXCIvXCIpXG4gICAgICAgID8gdHlwZVVybC5zdWJzdHJpbmcodHlwZVVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKVxuICAgICAgICA6IHR5cGVVcmw7XG4gICAgaWYgKCF0eXBlTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIG1lc3NhZ2UgJHthbnkuJHR5cGVOYW1lfSBmcm9tIEpTT046IFwiQHR5cGVcIiBpcyBpbnZhbGlkYCk7XG4gICAgfVxuICAgIGNvbnN0IGRlc2MgPSAoX2EgPSBvcHRzLnJlZ2lzdHJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0TWVzc2FnZSh0eXBlTmFtZSk7XG4gICAgaWYgKCFkZXNjKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7YW55LiR0eXBlTmFtZX0gZnJvbSBKU09OOiAke3R5cGVVcmx9IGlzIG5vdCBpbiB0aGUgdHlwZSByZWdpc3RyeWApO1xuICAgIH1cbiAgICBjb25zdCBtc2cgPSByZWZsZWN0KGRlc2MpO1xuICAgIGlmICh0eXBlTmFtZS5zdGFydHNXaXRoKFwiZ29vZ2xlLnByb3RvYnVmLlwiKSAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoanNvbiwgXCJ2YWx1ZVwiKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGpzb24udmFsdWU7XG4gICAgICAgIHJlYWRNZXNzYWdlKG1zZywgdmFsdWUsIG9wdHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGpzb24pO1xuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9wZXJmb3JtYW5jZS9ub0RlbGV0ZTogPGV4cGxhbmF0aW9uPlxuICAgICAgICBkZWxldGUgY29weVtcIkB0eXBlXCJdO1xuICAgICAgICByZWFkTWVzc2FnZShtc2csIGNvcHksIG9wdHMpO1xuICAgIH1cbiAgICBhbnlQYWNrKG1zZy5kZXNjLCBtc2cubWVzc2FnZSwgYW55KTtcbn1cbmZ1bmN0aW9uIHRpbWVzdGFtcEZyb21Kc29uKHRpbWVzdGFtcCwganNvbikge1xuICAgIGlmICh0eXBlb2YganNvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke3RpbWVzdGFtcC4kdHlwZU5hbWV9IGZyb20gSlNPTjogJHtmb3JtYXRWYWwoanNvbil9YCk7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZXMgPSBqc29uLm1hdGNoKC9eKFswLTldezR9KS0oWzAtOV17Mn0pLShbMC05XXsyfSlUKFswLTldezJ9KTooWzAtOV17Mn0pOihbMC05XXsyfSkoPzpcXC4oWzAtOV17MSw5fSkpPyg/Olp8KFsrLV1bMC05XVswLTldOlswLTldWzAtOV0pKSQvKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIG1lc3NhZ2UgJHt0aW1lc3RhbXAuJHR5cGVOYW1lfSBmcm9tIEpTT046IGludmFsaWQgUkZDIDMzMzkgc3RyaW5nYCk7XG4gICAgfVxuICAgIGNvbnN0IG1zID0gRGF0ZS5wYXJzZShcbiAgICAvLyBiaW9tZS1pZ25vcmUgZm9ybWF0OiB3YW50IHRoaXMgdG8gcmVhZCB3ZWxsXG4gICAgbWF0Y2hlc1sxXSArIFwiLVwiICsgbWF0Y2hlc1syXSArIFwiLVwiICsgbWF0Y2hlc1szXSArIFwiVFwiICsgbWF0Y2hlc1s0XSArIFwiOlwiICsgbWF0Y2hlc1s1XSArIFwiOlwiICsgbWF0Y2hlc1s2XSArIChtYXRjaGVzWzhdID8gbWF0Y2hlc1s4XSA6IFwiWlwiKSk7XG4gICAgaWYgKE51bWJlci5pc05hTihtcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIG1lc3NhZ2UgJHt0aW1lc3RhbXAuJHR5cGVOYW1lfSBmcm9tIEpTT046IGludmFsaWQgUkZDIDMzMzkgc3RyaW5nYCk7XG4gICAgfVxuICAgIGlmIChtcyA8IERhdGUucGFyc2UoXCIwMDAxLTAxLTAxVDAwOjAwOjAwWlwiKSB8fFxuICAgICAgICBtcyA+IERhdGUucGFyc2UoXCI5OTk5LTEyLTMxVDIzOjU5OjU5WlwiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke3RpbWVzdGFtcC4kdHlwZU5hbWV9IGZyb20gSlNPTjogbXVzdCBiZSBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvIDk5OTktMTItMzFUMjM6NTk6NTlaIGluY2x1c2l2ZWApO1xuICAgIH1cbiAgICB0aW1lc3RhbXAuc2Vjb25kcyA9IHByb3RvSW50NjQucGFyc2UobXMgLyAxMDAwKTtcbiAgICB0aW1lc3RhbXAubmFub3MgPSAwO1xuICAgIGlmIChtYXRjaGVzWzddKSB7XG4gICAgICAgIHRpbWVzdGFtcC5uYW5vcyA9XG4gICAgICAgICAgICBwYXJzZUludChcIjFcIiArIG1hdGNoZXNbN10gKyBcIjBcIi5yZXBlYXQoOSAtIG1hdGNoZXNbN10ubGVuZ3RoKSkgLVxuICAgICAgICAgICAgICAgIDEwMDAwMDAwMDA7XG4gICAgfVxufVxuZnVuY3Rpb24gZHVyYXRpb25Gcm9tSnNvbihkdXJhdGlvbiwganNvbikge1xuICAgIGlmICh0eXBlb2YganNvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke2R1cmF0aW9uLiR0eXBlTmFtZX0gZnJvbSBKU09OOiAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBqc29uLm1hdGNoKC9eKC0/WzAtOV0rKSg/OlxcLihbMC05XSspKT9zLyk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7ZHVyYXRpb24uJHR5cGVOYW1lfSBmcm9tIEpTT046ICR7Zm9ybWF0VmFsKGpzb24pfWApO1xuICAgIH1cbiAgICBjb25zdCBsb25nU2Vjb25kcyA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgaWYgKGxvbmdTZWNvbmRzID4gMzE1NTc2MDAwMDAwIHx8IGxvbmdTZWNvbmRzIDwgLTMxNTU3NjAwMDAwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke2R1cmF0aW9uLiR0eXBlTmFtZX0gZnJvbSBKU09OOiAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgZHVyYXRpb24uc2Vjb25kcyA9IHByb3RvSW50NjQucGFyc2UobG9uZ1NlY29uZHMpO1xuICAgIGlmICh0eXBlb2YgbWF0Y2hbMl0gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuYW5vc1N0ciA9IG1hdGNoWzJdICsgXCIwXCIucmVwZWF0KDkgLSBtYXRjaFsyXS5sZW5ndGgpO1xuICAgIGR1cmF0aW9uLm5hbm9zID0gcGFyc2VJbnQobmFub3NTdHIpO1xuICAgIGlmIChsb25nU2Vjb25kcyA8IDAgfHwgT2JqZWN0LmlzKGxvbmdTZWNvbmRzLCAtMCkpIHtcbiAgICAgICAgZHVyYXRpb24ubmFub3MgPSAtZHVyYXRpb24ubmFub3M7XG4gICAgfVxufVxuZnVuY3Rpb24gZmllbGRNYXNrRnJvbUpzb24oZmllbGRNYXNrLCBqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7ZmllbGRNYXNrLiR0eXBlTmFtZX0gZnJvbSBKU09OOiAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgaWYgKGpzb24gPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYW1lbFRvU25ha2Uoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuaW5jbHVkZXMoXCJfXCIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke2ZpZWxkTWFzay4kdHlwZU5hbWV9IGZyb20gSlNPTjogcGF0aCBuYW1lcyBtdXN0IGJlIGxvd2VyQ2FtZWxDYXNlYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2MgPSBzdHIucmVwbGFjZSgvW0EtWl0vZywgKGxldHRlcikgPT4gXCJfXCIgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIHJldHVybiBzY1swXSA9PT0gXCJfXCIgPyBzYy5zdWJzdHJpbmcoMSkgOiBzYztcbiAgICB9XG4gICAgZmllbGRNYXNrLnBhdGhzID0ganNvbi5zcGxpdChcIixcIikubWFwKGNhbWVsVG9TbmFrZSk7XG59XG5mdW5jdGlvbiBzdHJ1Y3RGcm9tSnNvbihzdHJ1Y3QsIGpzb24pIHtcbiAgICBpZiAodHlwZW9mIGpzb24gIT0gXCJvYmplY3RcIiB8fCBqc29uID09IG51bGwgfHwgQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke3N0cnVjdC4kdHlwZU5hbWV9IGZyb20gSlNPTiAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbikpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkViA9IGNyZWF0ZShWYWx1ZVNjaGVtYSk7XG4gICAgICAgIHZhbHVlRnJvbUpzb24ocGFyc2VkViwgdik7XG4gICAgICAgIHN0cnVjdC5maWVsZHNba10gPSBwYXJzZWRWO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbHVlRnJvbUpzb24odmFsdWUsIGpzb24pIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBqc29uKSB7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwibnVtYmVyVmFsdWVcIiwgdmFsdWU6IGpzb24gfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICB2YWx1ZS5raW5kID0geyBjYXNlOiBcInN0cmluZ1ZhbHVlXCIsIHZhbHVlOiBqc29uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwiYm9vbFZhbHVlXCIsIHZhbHVlOiBqc29uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5raW5kID0geyBjYXNlOiBcIm51bGxWYWx1ZVwiLCB2YWx1ZTogTnVsbFZhbHVlLk5VTExfVkFMVUUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0VmFsdWUgPSBjcmVhdGUoTGlzdFZhbHVlU2NoZW1hKTtcbiAgICAgICAgICAgICAgICBsaXN0VmFsdWVGcm9tSnNvbihsaXN0VmFsdWUsIGpzb24pO1xuICAgICAgICAgICAgICAgIHZhbHVlLmtpbmQgPSB7IGNhc2U6IFwibGlzdFZhbHVlXCIsIHZhbHVlOiBsaXN0VmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IGNyZWF0ZShTdHJ1Y3RTY2hlbWEpO1xuICAgICAgICAgICAgICAgIHN0cnVjdEZyb21Kc29uKHN0cnVjdCwganNvbik7XG4gICAgICAgICAgICAgICAgdmFsdWUua2luZCA9IHsgY2FzZTogXCJzdHJ1Y3RWYWx1ZVwiLCB2YWx1ZTogc3RydWN0IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBtZXNzYWdlICR7dmFsdWUuJHR5cGVOYW1lfSBmcm9tIEpTT04gJHtmb3JtYXRWYWwoanNvbil9YCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGxpc3RWYWx1ZUZyb21Kc29uKGxpc3RWYWx1ZSwganNvbikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShqc29uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke2xpc3RWYWx1ZS4kdHlwZU5hbWV9IGZyb20gSlNPTiAke2Zvcm1hdFZhbChqc29uKX1gKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBlIG9mIGpzb24pIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjcmVhdGUoVmFsdWVTY2hlbWEpO1xuICAgICAgICB2YWx1ZUZyb21Kc29uKHZhbHVlLCBlKTtcbiAgICAgICAgbGlzdFZhbHVlLnZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHJlZmxlY3QgfSBmcm9tIFwiLi9yZWZsZWN0L3JlZmxlY3QuanNcIjtcbi8qKlxuICogTWVyZ2UgbWVzc2FnZSBgc291cmNlYCBpbnRvIG1lc3NhZ2UgYHRhcmdldGAsIGZvbGxvd2luZyBQcm90b2J1ZiBzZW1hbnRpY3MuXG4gKlxuICogVGhpcyBpcyB0aGUgc2FtZSBhcyBzZXJpYWxpemluZyB0aGUgc291cmNlIG1lc3NhZ2UsIHRoZW4gZGVzZXJpYWxpemluZyBpdFxuICogaW50byB0aGUgdGFyZ2V0IG1lc3NhZ2UgdmlhIGBtZXJnZUZyb21CaW5hcnkoKWAsIHdpdGggb25lIGRpZmZlcmVuY2U6XG4gKiBXaGlsZSBzZXJpYWxpemF0aW9uIHdpbGwgY3JlYXRlIGEgY29weSBvZiBhbGwgdmFsdWVzLCBgbWVyZ2UoKWAgd2lsbCBjb3B5XG4gKiB0aGUgcmVmZXJlbmNlIGZvciBgYnl0ZXNgIGFuZCBtZXNzYWdlcy5cbiAqXG4gKiBBbHNvIHNlZSBodHRwczovL3Byb3RvYnVmLmNvbS9kb2NzL2xhbmd1YWdlLXNwZWMjbWVyZ2luZy1wcm90b2J1Zi1tZXNzYWdlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2Uoc2NoZW1hLCB0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJlZmxlY3RNZXJnZShyZWZsZWN0KHNjaGVtYSwgdGFyZ2V0KSwgcmVmbGVjdChzY2hlbWEsIHNvdXJjZSkpO1xufVxuZnVuY3Rpb24gcmVmbGVjdE1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBfYjtcbiAgICBjb25zdCBzb3VyY2VVbmtub3duID0gc291cmNlLm1lc3NhZ2UuJHVua25vd247XG4gICAgaWYgKHNvdXJjZVVua25vd24gIT09IHVuZGVmaW5lZCAmJiBzb3VyY2VVbmtub3duLmxlbmd0aCA+IDApIHtcbiAgICAgICAgKF9hID0gKF9iID0gdGFyZ2V0Lm1lc3NhZ2UpLiR1bmtub3duKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2IuJHVua25vd24gPSBbXSk7XG4gICAgICAgIHRhcmdldC5tZXNzYWdlLiR1bmtub3duLnB1c2goLi4uc291cmNlVW5rbm93bik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZiBvZiB0YXJnZXQuZmllbGRzKSB7XG4gICAgICAgIGlmICghc291cmNlLmlzU2V0KGYpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGYuZmllbGRLaW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIHRhcmdldC5zZXQoZiwgc291cmNlLmdldChmKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXNTZXQoZikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdE1lcmdlKHRhcmdldC5nZXQoZiksIHNvdXJjZS5nZXQoZikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldChmLCBzb3VyY2UuZ2V0KGYpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSB0YXJnZXQuZ2V0KGYpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBzb3VyY2UuZ2V0KGYpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuYWRkKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSB0YXJnZXQuZ2V0KGYpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHNvdXJjZS5nZXQoZikpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLnNldChrLCB2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNSBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pcy1tZXNzYWdlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb25lLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kZXNjcmlwdG9ycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXF1YWxzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9maWVsZHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlZ2lzdHJ5LmpzXCI7XG5leHBvcnQgeyB0b0JpbmFyeSB9IGZyb20gXCIuL3RvLWJpbmFyeS5qc1wiO1xuZXhwb3J0IHsgZnJvbUJpbmFyeSwgbWVyZ2VGcm9tQmluYXJ5IH0gZnJvbSBcIi4vZnJvbS1iaW5hcnkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RvLWpzb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zyb20tanNvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmV4cG9ydCB7IGhhc0V4dGVuc2lvbiwgZ2V0RXh0ZW5zaW9uLCBzZXRFeHRlbnNpb24sIGNsZWFyRXh0ZW5zaW9uLCBoYXNPcHRpb24sIGdldE9wdGlvbiwgfSBmcm9tIFwiLi9leHRlbnNpb25zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wcm90by1pbnQ2NC5qc1wiO1xuIiwgIi8vIFByb3RvYnVmIGNvbnZlcnNpb24gaGVscGVyc1xuaW1wb3J0IHR5cGUge1xuICBHaG9zdCxcbiAgTWlzc2lsZSxcbiAgU3RhdGVVcGRhdGUsXG4gIERhZ05vZGUsXG4gIERhZ1N0YXRlLFxuICBJbnZlbnRvcnlJdGVtLFxuICBJbnZlbnRvcnksXG4gIFN0b3J5U3RhdGUsXG4gIFN0b3J5RGlhbG9ndWUsXG4gIFN0b3J5RXZlbnQsXG4gIFN0b3J5RGlhbG9ndWVDaG9pY2UsXG4gIFN0b3J5VHV0b3JpYWxUaXAsXG4gIFVwZ3JhZGVFZmZlY3QsXG4gIFBsYXllckNhcGFiaWxpdGllcyxcbn0gZnJvbSAnLi9wcm90by9wcm90by93c19tZXNzYWdlc19wYic7XG4vLyBJbXBvcnQgZW51bXMgYXMgdmFsdWVzLCBub3QgdHlwZXNcbmltcG9ydCB7XG4gIERhZ05vZGVTdGF0dXMsXG4gIERhZ05vZGVLaW5kLFxuICBTdG9yeUludGVudCxcbn0gZnJvbSAnLi9wcm90by9wcm90by93c19tZXNzYWdlc19wYic7XG5cbi8vIEFkYXB0ZXIgdHlwZXMgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBleGlzdGluZyBjb2RlXG5leHBvcnQgaW50ZXJmYWNlIEdob3N0U25hcHNob3Qge1xuICBpZDogc3RyaW5nO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgdng6IG51bWJlcjtcbiAgdnk6IG51bWJlcjtcbiAgdDogbnVtYmVyO1xuICBzZWxmOiBib29sZWFuO1xuICB3YXlwb2ludHM/OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyBzcGVlZDogbnVtYmVyIH1bXTtcbiAgY3VycmVudFdheXBvaW50SW5kZXg/OiBudW1iZXI7XG4gIGhwOiBudW1iZXI7XG4gIGtpbGxzOiBudW1iZXI7XG4gIGhlYXQ/OiB7XG4gICAgdjogbnVtYmVyO1xuICAgIG06IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG4gICAgbzogbnVtYmVyO1xuICAgIG1zOiBudW1iZXI7XG4gICAgc3U6IG51bWJlcjtcbiAgICBrdTogbnVtYmVyO1xuICAgIGtkOiBudW1iZXI7XG4gICAgZXg6IG51bWJlcjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaXNzaWxlU25hcHNob3Qge1xuICBpZDogc3RyaW5nO1xuICBvd25lcjogc3RyaW5nO1xuICBzZWxmOiBib29sZWFuO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgdng6IG51bWJlcjtcbiAgdnk6IG51bWJlcjtcbiAgdDogbnVtYmVyO1xuICBhZ3JvUmFkaXVzOiBudW1iZXI7XG4gIGxpZmV0aW1lOiBudW1iZXI7XG4gIGxhdW5jaDogbnVtYmVyO1xuICBleHBpcmVzOiBudW1iZXI7XG4gIHRhcmdldElkPzogc3RyaW5nO1xuICBoZWF0Pzoge1xuICAgIHY6IG51bWJlcjtcbiAgICBtOiBudW1iZXI7XG4gICAgdzogbnVtYmVyO1xuICAgIG86IG51bWJlcjtcbiAgICBtczogbnVtYmVyO1xuICAgIHN1OiBudW1iZXI7XG4gICAga3U6IG51bWJlcjtcbiAgICBrZDogbnVtYmVyO1xuICAgIGV4OiBudW1iZXI7XG4gIH07XG59XG5cbi8vIENvbnZlcnQgcHJvdG8gR2hvc3QgdG8gR2hvc3RTbmFwc2hvdFxuZXhwb3J0IGZ1bmN0aW9uIHByb3RvVG9HaG9zdChwcm90bzogR2hvc3QpOiBHaG9zdFNuYXBzaG90IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogcHJvdG8uaWQsXG4gICAgeDogcHJvdG8ueCxcbiAgICB5OiBwcm90by55LFxuICAgIHZ4OiBwcm90by52eCxcbiAgICB2eTogcHJvdG8udnksXG4gICAgdDogcHJvdG8udCxcbiAgICBzZWxmOiBwcm90by5zZWxmLFxuICAgIHdheXBvaW50czogcHJvdG8ud2F5cG9pbnRzPy5tYXAod3AgPT4gKHsgeDogd3AueCwgeTogd3AueSwgc3BlZWQ6IHdwLnNwZWVkIH0pKSxcbiAgICBjdXJyZW50V2F5cG9pbnRJbmRleDogcHJvdG8uY3VycmVudFdheXBvaW50SW5kZXgsXG4gICAgaHA6IHByb3RvLmhwLFxuICAgIGtpbGxzOiBwcm90by5raWxscyxcbiAgICBoZWF0OiBwcm90by5oZWF0ID8ge1xuICAgICAgdjogcHJvdG8uaGVhdC52LFxuICAgICAgbTogcHJvdG8uaGVhdC5tLFxuICAgICAgdzogcHJvdG8uaGVhdC53LFxuICAgICAgbzogcHJvdG8uaGVhdC5vLFxuICAgICAgbXM6IHByb3RvLmhlYXQubXMsXG4gICAgICBzdTogcHJvdG8uaGVhdC5zdSxcbiAgICAgIGt1OiBwcm90by5oZWF0Lmt1LFxuICAgICAga2Q6IHByb3RvLmhlYXQua2QsXG4gICAgICBleDogcHJvdG8uaGVhdC5leCxcbiAgICB9IDogdW5kZWZpbmVkLFxuICB9O1xufVxuXG4vLyBDb252ZXJ0IHByb3RvIE1pc3NpbGUgdG8gTWlzc2lsZVNuYXBzaG90XG5leHBvcnQgZnVuY3Rpb24gcHJvdG9Ub01pc3NpbGUocHJvdG86IE1pc3NpbGUpOiBNaXNzaWxlU25hcHNob3Qge1xuICByZXR1cm4ge1xuICAgIGlkOiBwcm90by5pZCxcbiAgICBvd25lcjogcHJvdG8ub3duZXIsXG4gICAgc2VsZjogcHJvdG8uc2VsZixcbiAgICB4OiBwcm90by54LFxuICAgIHk6IHByb3RvLnksXG4gICAgdng6IHByb3RvLnZ4LFxuICAgIHZ5OiBwcm90by52eSxcbiAgICB0OiBwcm90by50LFxuICAgIGFncm9SYWRpdXM6IHByb3RvLmFncm9SYWRpdXMsXG4gICAgbGlmZXRpbWU6IHByb3RvLmxpZmV0aW1lLFxuICAgIGxhdW5jaDogcHJvdG8ubGF1bmNoVGltZSxcbiAgICBleHBpcmVzOiBwcm90by5leHBpcmVzQXQsXG4gICAgdGFyZ2V0SWQ6IHByb3RvLnRhcmdldElkIHx8IHVuZGVmaW5lZCxcbiAgICBoZWF0OiBwcm90by5oZWF0ID8ge1xuICAgICAgdjogcHJvdG8uaGVhdC52LFxuICAgICAgbTogcHJvdG8uaGVhdC5tLFxuICAgICAgdzogcHJvdG8uaGVhdC53LFxuICAgICAgbzogcHJvdG8uaGVhdC5vLFxuICAgICAgbXM6IHByb3RvLmhlYXQubXMsXG4gICAgICBzdTogcHJvdG8uaGVhdC5zdSxcbiAgICAgIGt1OiBwcm90by5oZWF0Lmt1LFxuICAgICAga2Q6IHByb3RvLmhlYXQua2QsXG4gICAgICBleDogcHJvdG8uaGVhdC5leCxcbiAgICB9IDogdW5kZWZpbmVkLFxuICB9O1xufVxuXG4vLyBDb252ZXJ0IHByb3RvIFN0YXRlVXBkYXRlIHRvIEFwcFN0YXRlIGZvcm1hdFxuZXhwb3J0IGZ1bmN0aW9uIHByb3RvVG9TdGF0ZShwcm90bzogU3RhdGVVcGRhdGUpIHtcbiAgY29uc3QgYmFzZSA9IHtcbiAgICBub3c6IHByb3RvLm5vdyxcbiAgICBtZTogcHJvdG8ubWUgPyBwcm90b1RvR2hvc3QocHJvdG8ubWUpIDogbnVsbCxcbiAgICBnaG9zdHM6IHByb3RvLmdob3N0cy5tYXAocHJvdG9Ub0dob3N0KSxcbiAgICBtaXNzaWxlczogcHJvdG8ubWlzc2lsZXMubWFwKHByb3RvVG9NaXNzaWxlKSxcbiAgICBtZXRhOiBwcm90by5tZXRhID8ge1xuICAgICAgYzogcHJvdG8ubWV0YS5jLFxuICAgICAgdzogcHJvdG8ubWV0YS53LFxuICAgICAgaDogcHJvdG8ubWV0YS5oLFxuICAgIH0gOiB7IGM6IDI5OSwgdzogMTYwMDAsIGg6IDkwMDAgfSxcbiAgICBtaXNzaWxlQ29uZmlnOiBwcm90by5taXNzaWxlQ29uZmlnID8ge1xuICAgICAgc3BlZWQ6IHByb3RvLm1pc3NpbGVDb25maWcuc3BlZWQsXG4gICAgICBzcGVlZE1pbjogcHJvdG8ubWlzc2lsZUNvbmZpZy5zcGVlZE1pbixcbiAgICAgIHNwZWVkTWF4OiBwcm90by5taXNzaWxlQ29uZmlnLnNwZWVkTWF4LFxuICAgICAgYWdyb01pbjogcHJvdG8ubWlzc2lsZUNvbmZpZy5hZ3JvTWluLFxuICAgICAgYWdyb1JhZGl1czogcHJvdG8ubWlzc2lsZUNvbmZpZy5hZ3JvUmFkaXVzLFxuICAgICAgbGlmZXRpbWU6IHByb3RvLm1pc3NpbGVDb25maWcubGlmZXRpbWUsXG4gICAgICBoZWF0Q29uZmlnOiBwcm90by5taXNzaWxlQ29uZmlnLmhlYXRDb25maWcgPyB7XG4gICAgICAgIG1heDogcHJvdG8ubWlzc2lsZUNvbmZpZy5oZWF0Q29uZmlnLm1heCxcbiAgICAgICAgd2FybkF0OiBwcm90by5taXNzaWxlQ29uZmlnLmhlYXRDb25maWcud2FybkF0LFxuICAgICAgICBvdmVyaGVhdEF0OiBwcm90by5taXNzaWxlQ29uZmlnLmhlYXRDb25maWcub3ZlcmhlYXRBdCxcbiAgICAgICAgbWFya2VyU3BlZWQ6IHByb3RvLm1pc3NpbGVDb25maWcuaGVhdENvbmZpZy5tYXJrZXJTcGVlZCxcbiAgICAgICAga1VwOiBwcm90by5taXNzaWxlQ29uZmlnLmhlYXRDb25maWcua1VwLFxuICAgICAgICBrRG93bjogcHJvdG8ubWlzc2lsZUNvbmZpZy5oZWF0Q29uZmlnLmtEb3duLFxuICAgICAgICBleHA6IHByb3RvLm1pc3NpbGVDb25maWcuaGVhdENvbmZpZy5leHAsXG4gICAgICB9IDogdW5kZWZpbmVkLFxuICAgIH0gOiB7XG4gICAgICBzcGVlZDogMCxcbiAgICAgIHNwZWVkTWluOiAwLFxuICAgICAgc3BlZWRNYXg6IDAsXG4gICAgICBhZ3JvTWluOiAwLFxuICAgICAgYWdyb1JhZGl1czogMCxcbiAgICAgIGxpZmV0aW1lOiAwLFxuICAgIH0sXG4gICAgbWlzc2lsZVdheXBvaW50czogcHJvdG8ubWlzc2lsZVdheXBvaW50cy5tYXAod3AgPT4gKHsgeDogd3AueCwgeTogd3AueSwgc3BlZWQ6IHdwLnNwZWVkIH0pKSxcbiAgICBtaXNzaWxlUm91dGVzOiBwcm90by5taXNzaWxlUm91dGVzLm1hcChyID0+ICh7XG4gICAgICBpZDogci5pZCxcbiAgICAgIG5hbWU6IHIubmFtZSxcbiAgICAgIHdheXBvaW50czogci53YXlwb2ludHMubWFwKHdwID0+ICh7IHg6IHdwLngsIHk6IHdwLnksIHNwZWVkOiB3cC5zcGVlZCB9KSksXG4gICAgfSkpLFxuICAgIGFjdGl2ZU1pc3NpbGVSb3V0ZTogcHJvdG8uYWN0aXZlTWlzc2lsZVJvdXRlLFxuICAgIG5leHRNaXNzaWxlUmVhZHk6IHByb3RvLm5leHRNaXNzaWxlUmVhZHksXG4gIH07XG5cbiAgLy8gUGhhc2UgMiBhZGRpdGlvbnNcbiAgcmV0dXJuIHtcbiAgICAuLi5iYXNlLFxuICAgIGRhZzogcHJvdG8uZGFnID8gcHJvdG9Ub0RhZ1N0YXRlKHByb3RvLmRhZykgOiB1bmRlZmluZWQsXG4gICAgaW52ZW50b3J5OiBwcm90by5pbnZlbnRvcnkgPyBwcm90b1RvSW52ZW50b3J5KHByb3RvLmludmVudG9yeSkgOiB1bmRlZmluZWQsXG4gICAgc3Rvcnk6IHByb3RvLnN0b3J5ID8gcHJvdG9Ub1N0b3J5U3RhdGUocHJvdG8uc3RvcnkpIDogdW5kZWZpbmVkLFxuICAgIGNhcGFiaWxpdGllczogcHJvdG8uY2FwYWJpbGl0aWVzID8gcHJvdG9Ub1BsYXllckNhcGFiaWxpdGllcyhwcm90by5jYXBhYmlsaXRpZXMpIDogdW5kZWZpbmVkLFxuICB9O1xufVxuXG4vLyA9PT09PT09PT09IFBoYXNlIDI6IEVudW0gQ29udmVydGVycyA9PT09PT09PT09XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm90b1N0YXR1c1RvU3RyaW5nKHN0YXR1czogRGFnTm9kZVN0YXR1cyk6IHN0cmluZyB7XG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSBEYWdOb2RlU3RhdHVzLkxPQ0tFRDogcmV0dXJuICdsb2NrZWQnO1xuICAgIGNhc2UgRGFnTm9kZVN0YXR1cy5BVkFJTEFCTEU6IHJldHVybiAnYXZhaWxhYmxlJztcbiAgICBjYXNlIERhZ05vZGVTdGF0dXMuSU5fUFJPR1JFU1M6IHJldHVybiAnaW5fcHJvZ3Jlc3MnO1xuICAgIGNhc2UgRGFnTm9kZVN0YXR1cy5DT01QTEVURUQ6IHJldHVybiAnY29tcGxldGVkJztcbiAgICBkZWZhdWx0OiByZXR1cm4gJ3Vua25vd24nO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm90b0tpbmRUb1N0cmluZyhraW5kOiBEYWdOb2RlS2luZCk6IHN0cmluZyB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgRGFnTm9kZUtpbmQuRkFDVE9SWTogcmV0dXJuICdmYWN0b3J5JztcbiAgICBjYXNlIERhZ05vZGVLaW5kLlVOSVQ6IHJldHVybiAndW5pdCc7XG4gICAgY2FzZSBEYWdOb2RlS2luZC5TVE9SWTogcmV0dXJuICdzdG9yeSc7XG4gICAgY2FzZSBEYWdOb2RlS2luZC5DUkFGVDogcmV0dXJuICdjcmFmdCc7XG4gICAgZGVmYXVsdDogcmV0dXJuICd1bmtub3duJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9JbnRlbnRUb1N0cmluZyhpbnRlbnQ6IFN0b3J5SW50ZW50KTogc3RyaW5nIHtcbiAgc3dpdGNoIChpbnRlbnQpIHtcbiAgICBjYXNlIFN0b3J5SW50ZW50LkZBQ1RPUlk6IHJldHVybiAnZmFjdG9yeSc7XG4gICAgY2FzZSBTdG9yeUludGVudC5VTklUOiByZXR1cm4gJ3VuaXQnO1xuICAgIGRlZmF1bHQ6IHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9FZmZlY3RUeXBlVG9TdHJpbmcodHlwZTogYW55KTogc3RyaW5nIHtcbiAgLy8gTWFwIHByb3RvIGVudW0gdmFsdWVzIHRvIHN0cmluZ3NcbiAgLy8gVE9ETzogVXNlIHByb3BlciBlbnVtIHdoZW4gcHJvdG8gaXMgcmVnZW5lcmF0ZWRcbiAgY29uc3QgdHlwZU1hcDogUmVjb3JkPG51bWJlciwgc3RyaW5nPiA9IHtcbiAgICAxOiAnc3BlZWRfbXVsdGlwbGllcicsXG4gICAgMjogJ21pc3NpbGVfdW5sb2NrJyxcbiAgICAzOiAnaGVhdF9jYXBhY2l0eScsXG4gICAgNDogJ2hlYXRfZWZmaWNpZW5jeScsXG4gIH07XG4gIHJldHVybiB0eXBlTWFwW3R5cGVdIHx8ICd1bmtub3duJztcbn1cblxuLy8gPT09PT09PT09PSBQaGFzZSAyOiBUeXBlIERlZmluaXRpb25zID09PT09PT09PT1cblxuZXhwb3J0IGludGVyZmFjZSBVcGdyYWRlRWZmZWN0RGF0YSB7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU6IG51bWJlciB8IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYWdOb2RlRGF0YSB7XG4gIGlkOiBzdHJpbmc7XG4gIGtpbmQ6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgc3RhdHVzOiBzdHJpbmc7XG4gIHJlbWFpbmluZ1M6IG51bWJlcjtcbiAgZHVyYXRpb25TOiBudW1iZXI7XG4gIHJlcGVhdGFibGU6IGJvb2xlYW47XG4gIGVmZmVjdHM/OiBVcGdyYWRlRWZmZWN0RGF0YVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllckNhcGFiaWxpdGllc0RhdGEge1xuICBzcGVlZE11bHRpcGxpZXI6IG51bWJlcjtcbiAgdW5sb2NrZWRNaXNzaWxlczogc3RyaW5nW107XG4gIGhlYXRDYXBhY2l0eTogbnVtYmVyO1xuICBoZWF0RWZmaWNpZW5jeTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhZ1N0YXRlRGF0YSB7XG4gIG5vZGVzOiBEYWdOb2RlRGF0YVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludmVudG9yeUl0ZW1EYXRhIHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YXJpYW50SWQ6IHN0cmluZztcbiAgaGVhdENhcGFjaXR5OiBudW1iZXI7XG4gIHF1YW50aXR5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW52ZW50b3J5RGF0YSB7XG4gIGl0ZW1zOiBJbnZlbnRvcnlJdGVtRGF0YVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5RGlhbG9ndWVDaG9pY2VEYXRhIHtcbiAgaWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5VHV0b3JpYWxUaXBEYXRhIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5RGlhbG9ndWVEYXRhIHtcbiAgc3BlYWtlcjogc3RyaW5nO1xuICB0ZXh0OiBzdHJpbmc7XG4gIGludGVudDogc3RyaW5nO1xuICBjb250aW51ZUxhYmVsOiBzdHJpbmc7XG4gIGNob2ljZXM6IFN0b3J5RGlhbG9ndWVDaG9pY2VEYXRhW107XG4gIHR1dG9yaWFsVGlwPzogU3RvcnlUdXRvcmlhbFRpcERhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcnlFdmVudERhdGEge1xuICBjaGFwdGVySWQ6IHN0cmluZztcbiAgbm9kZUlkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5U3RhdGVEYXRhIHtcbiAgYWN0aXZlTm9kZTogc3RyaW5nO1xuICBkaWFsb2d1ZT86IFN0b3J5RGlhbG9ndWVEYXRhO1xuICBhdmFpbGFibGU6IHN0cmluZ1tdO1xuICBmbGFnczogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gIHJlY2VudEV2ZW50czogU3RvcnlFdmVudERhdGFbXTtcbn1cblxuLy8gPT09PT09PT09PSBQaGFzZSAyOiBDb252ZXJzaW9uIEZ1bmN0aW9ucyA9PT09PT09PT09XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm90b1RvVXBncmFkZUVmZmVjdChwcm90bzogVXBncmFkZUVmZmVjdCk6IFVwZ3JhZGVFZmZlY3REYXRhIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwcm90b0VmZmVjdFR5cGVUb1N0cmluZyhwcm90by50eXBlKSxcbiAgICB2YWx1ZTogcHJvdG8udmFsdWUuY2FzZSA9PT0gJ211bHRpcGxpZXInID8gcHJvdG8udmFsdWUudmFsdWUgOiBwcm90by52YWx1ZS52YWx1ZSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3RvVG9QbGF5ZXJDYXBhYmlsaXRpZXMocHJvdG86IFBsYXllckNhcGFiaWxpdGllcyk6IFBsYXllckNhcGFiaWxpdGllc0RhdGEge1xuICByZXR1cm4ge1xuICAgIHNwZWVkTXVsdGlwbGllcjogcHJvdG8uc3BlZWRNdWx0aXBsaWVyLFxuICAgIHVubG9ja2VkTWlzc2lsZXM6IHByb3RvLnVubG9ja2VkTWlzc2lsZXMsXG4gICAgaGVhdENhcGFjaXR5OiBwcm90by5oZWF0Q2FwYWNpdHksXG4gICAgaGVhdEVmZmljaWVuY3k6IHByb3RvLmhlYXRFZmZpY2llbmN5LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9Ub0RhZ05vZGUocHJvdG86IERhZ05vZGUpOiBEYWdOb2RlRGF0YSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHByb3RvLmlkLFxuICAgIGtpbmQ6IHByb3RvS2luZFRvU3RyaW5nKHByb3RvLmtpbmQpLFxuICAgIGxhYmVsOiBwcm90by5sYWJlbCxcbiAgICBzdGF0dXM6IHByb3RvU3RhdHVzVG9TdHJpbmcocHJvdG8uc3RhdHVzKSxcbiAgICByZW1haW5pbmdTOiBwcm90by5yZW1haW5pbmdTLFxuICAgIGR1cmF0aW9uUzogcHJvdG8uZHVyYXRpb25TLFxuICAgIHJlcGVhdGFibGU6IHByb3RvLnJlcGVhdGFibGUsXG4gICAgZWZmZWN0czogcHJvdG8uZWZmZWN0cz8ubWFwKHByb3RvVG9VcGdyYWRlRWZmZWN0KSB8fCBbXSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3RvVG9EYWdTdGF0ZShwcm90bzogRGFnU3RhdGUpOiBEYWdTdGF0ZURhdGEge1xuICByZXR1cm4ge1xuICAgIG5vZGVzOiBwcm90by5ub2Rlcy5tYXAocHJvdG9Ub0RhZ05vZGUpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9Ub0ludmVudG9yeUl0ZW0ocHJvdG86IEludmVudG9yeUl0ZW0pOiBJbnZlbnRvcnlJdGVtRGF0YSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcHJvdG8udHlwZSxcbiAgICB2YXJpYW50SWQ6IHByb3RvLnZhcmlhbnRJZCxcbiAgICBoZWF0Q2FwYWNpdHk6IHByb3RvLmhlYXRDYXBhY2l0eSxcbiAgICBxdWFudGl0eTogcHJvdG8ucXVhbnRpdHksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm90b1RvSW52ZW50b3J5KHByb3RvOiBJbnZlbnRvcnkpOiBJbnZlbnRvcnlEYXRhIHtcbiAgcmV0dXJuIHtcbiAgICBpdGVtczogcHJvdG8uaXRlbXMubWFwKHByb3RvVG9JbnZlbnRvcnlJdGVtKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3RvVG9TdG9yeURpYWxvZ3VlKHByb3RvOiBTdG9yeURpYWxvZ3VlKTogU3RvcnlEaWFsb2d1ZURhdGEge1xuICByZXR1cm4ge1xuICAgIHNwZWFrZXI6IHByb3RvLnNwZWFrZXIsXG4gICAgdGV4dDogcHJvdG8udGV4dCxcbiAgICBpbnRlbnQ6IHByb3RvSW50ZW50VG9TdHJpbmcocHJvdG8uaW50ZW50KSxcbiAgICBjb250aW51ZUxhYmVsOiBwcm90by5jb250aW51ZUxhYmVsLFxuICAgIGNob2ljZXM6IHByb3RvLmNob2ljZXMubWFwKGMgPT4gKHsgaWQ6IGMuaWQsIHRleHQ6IGMudGV4dCB9KSksXG4gICAgdHV0b3JpYWxUaXA6IHByb3RvLnR1dG9yaWFsVGlwID8ge1xuICAgICAgdGl0bGU6IHByb3RvLnR1dG9yaWFsVGlwLnRpdGxlLFxuICAgICAgdGV4dDogcHJvdG8udHV0b3JpYWxUaXAudGV4dCxcbiAgICB9IDogdW5kZWZpbmVkLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdG9Ub1N0b3J5U3RhdGUocHJvdG86IFN0b3J5U3RhdGUpOiBTdG9yeVN0YXRlRGF0YSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlTm9kZTogcHJvdG8uYWN0aXZlTm9kZSxcbiAgICBkaWFsb2d1ZTogcHJvdG8uZGlhbG9ndWUgPyBwcm90b1RvU3RvcnlEaWFsb2d1ZShwcm90by5kaWFsb2d1ZSkgOiB1bmRlZmluZWQsXG4gICAgYXZhaWxhYmxlOiBwcm90by5hdmFpbGFibGUsXG4gICAgZmxhZ3M6IHByb3RvLmZsYWdzLFxuICAgIHJlY2VudEV2ZW50czogcHJvdG8ucmVjZW50RXZlbnRzLm1hcChlID0+ICh7XG4gICAgICBjaGFwdGVySWQ6IGUuY2hhcHRlcklkLFxuICAgICAgbm9kZUlkOiBlLm5vZGVJZCxcbiAgICAgIHRpbWVzdGFtcDogZS50aW1lc3RhbXAsXG4gICAgfSkpLFxuICB9O1xufVxuIiwgImltcG9ydCB7IHR5cGUgRXZlbnRCdXMgfSBmcm9tIFwiLi9idXNcIjtcbmltcG9ydCB7XG4gIHR5cGUgQXBwU3RhdGUsXG4gIHR5cGUgTWlzc2lsZVJvdXRlLFxuICB0eXBlIE1pc3Npb25TdGF0ZSxcbiAgdHlwZSBNaXNzaW9uQmVhY29uLFxuICB0eXBlIE1pc3Npb25FbmNvdW50ZXJTdGF0ZSxcbiAgdHlwZSBNaXNzaW9uUGxheWVyU3RhdGUsXG4gIHR5cGUgTWlzc2lvbk9iamVjdGl2ZVN0YXRlLFxuICBtb25vdG9uaWNOb3csXG4gIHNhbml0aXplTWlzc2lsZUNvbmZpZyxcbiAgdXBkYXRlTWlzc2lsZUxpbWl0cyxcbiAgY2xhbXBQcm9ncmVzcyxcbn0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB0eXBlIHsgRGlhbG9ndWVDb250ZW50IH0gZnJvbSBcIi4vc3RvcnkvdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZSwgdG9CaW5hcnksIGZyb21CaW5hcnkgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQge1xuICBXc0VudmVsb3BlU2NoZW1hLFxuICB0eXBlIFdzRW52ZWxvcGUsXG4gIE1pc3Npb25CZWFjb25EZWx0YVR5cGUsXG4gIE1pc3Npb25FbmNvdW50ZXJFdmVudFR5cGUsXG59IGZyb20gXCIuL3Byb3RvL3Byb3RvL3dzX21lc3NhZ2VzX3BiXCI7XG5pbXBvcnQgdHlwZSB7IE1pc3Npb25CZWFjb25TbmFwc2hvdCwgTWlzc2lvbkJlYWNvbkRlbHRhIH0gZnJvbSBcIi4vcHJvdG8vcHJvdG8vd3NfbWVzc2FnZXNfcGJcIjtcbmltcG9ydCB7IHByb3RvVG9TdGF0ZSwgcHJvdG9Ub0RhZ1N0YXRlIH0gZnJvbSBcIi4vcHJvdG9faGVscGVyc1wiO1xuaW1wb3J0IHR5cGUgeyBNaXNzaW9uT2ZmZXJEVE8sIE1pc3Npb25VcGRhdGVEVE8sIE9iamVjdGl2ZVN0YXRlRFRPIH0gZnJvbSBcIi4vbWlzc2lvbi90eXBlc1wiO1xuXG5pbnRlcmZhY2UgQ29ubmVjdE9wdGlvbnMge1xuICByb29tOiBzdHJpbmc7XG4gIHN0YXRlOiBBcHBTdGF0ZTtcbiAgYnVzOiBFdmVudEJ1cztcbiAgb25TdGF0ZVVwZGF0ZWQ/OiAoKSA9PiB2b2lkO1xuICBvbk9wZW4/OiAoc29ja2V0OiBXZWJTb2NrZXQpID0+IHZvaWQ7XG4gIG1hcFc/OiBudW1iZXI7XG4gIG1hcEg/OiBudW1iZXI7XG4gIG1vZGU/OiBzdHJpbmc7XG4gIG1pc3Npb25JZD86IHN0cmluZztcbn1cblxubGV0IHdzOiBXZWJTb2NrZXQgfCBudWxsID0gbnVsbDtcbmxldCBjb25uZWN0ZWRTdGF0ZTogQXBwU3RhdGUgfCBudWxsID0gbnVsbDtcbmxldCBjb25uZWN0ZWRCdXM6IEV2ZW50QnVzIHwgbnVsbCA9IG51bGw7XG5cbi8vIEhlbHBlciB0byBzZW5kIHByb3RvYnVmIG1lc3NhZ2VzXG5mdW5jdGlvbiBzZW5kUHJvdG8oZW52ZWxvcGU6IFdzRW52ZWxvcGUpIHtcbiAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuICBjb25zdCBieXRlcyA9IHRvQmluYXJ5KFdzRW52ZWxvcGVTY2hlbWEsIGVudmVsb3BlKTtcbiAgd3Muc2VuZChieXRlcyk7XG59XG5cbi8vIExlZ2FjeSBKU09OIG1lc3NhZ2Ugc2VuZGVyIChrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCBEQUcgbWVzc2FnZXMpXG5leHBvcnQgZnVuY3Rpb24gc2VuZE1lc3NhZ2UocGF5bG9hZDogdW5rbm93bik6IHZvaWQge1xuICBpZiAoIXdzIHx8IHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSByZXR1cm47XG5cbiAgLy8gSWYgcGF5bG9hZCBoYXMgYSBcInR5cGVcIiBmaWVsZCwgY29udmVydCB0byBwcm90b2J1ZlxuICBpZiAodHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCIgJiYgcGF5bG9hZCAhPT0gbnVsbCAmJiBcInR5cGVcIiBpbiBwYXlsb2FkKSB7XG4gICAgY29uc3QgbXNnID0gcGF5bG9hZCBhcyBhbnk7XG5cbiAgICAvLyBDb252ZXJ0IGNvbW1vbiBtZXNzYWdlIHR5cGVzIHRvIHByb3RvYnVmXG4gICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgY2FzZSBcImpvaW5cIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJqb2luXCIsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICBuYW1lOiBtc2cubmFtZSB8fCBcIlwiLFxuICAgICAgICAgICAgICByb29tOiBtc2cucm9vbSB8fCBcIlwiLFxuICAgICAgICAgICAgICBtYXBXOiBtc2cubWFwX3cgfHwgMCxcbiAgICAgICAgICAgICAgbWFwSDogbXNnLm1hcF9oIHx8IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwic3Bhd25fYm90XCI6XG4gICAgICAgIHNlbmRQcm90byhjcmVhdGUoV3NFbnZlbG9wZVNjaGVtYSwge1xuICAgICAgICAgIHBheWxvYWQ6IHsgY2FzZTogXCJzcGF3bkJvdFwiLCB2YWx1ZToge30gfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJhZGRfd2F5cG9pbnRcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJhZGRXYXlwb2ludFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgeDogbXNnLngsIHk6IG1zZy55LCBzcGVlZDogbXNnLnNwZWVkIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJ1cGRhdGVfd2F5cG9pbnRcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJ1cGRhdGVXYXlwb2ludFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgaW5kZXg6IG1zZy5pbmRleCwgc3BlZWQ6IG1zZy5zcGVlZCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwibW92ZV93YXlwb2ludFwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcIm1vdmVXYXlwb2ludFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgaW5kZXg6IG1zZy5pbmRleCwgeDogbXNnLngsIHk6IG1zZy55IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJkZWxldGVfd2F5cG9pbnRcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJkZWxldGVXYXlwb2ludFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgaW5kZXg6IG1zZy5pbmRleCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiY2xlYXJfd2F5cG9pbnRzXCI6XG4gICAgICAgIHNlbmRQcm90byhjcmVhdGUoV3NFbnZlbG9wZVNjaGVtYSwge1xuICAgICAgICAgIHBheWxvYWQ6IHsgY2FzZTogXCJjbGVhcldheXBvaW50c1wiLCB2YWx1ZToge30gfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJjb25maWd1cmVfbWlzc2lsZVwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcImNvbmZpZ3VyZU1pc3NpbGVcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IG1pc3NpbGVTcGVlZDogbXNnLm1pc3NpbGVfc3BlZWQsIG1pc3NpbGVBZ3JvOiBtc2cubWlzc2lsZV9hZ3JvIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJsYXVuY2hfbWlzc2lsZVwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcImxhdW5jaE1pc3NpbGVcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IHJvdXRlSWQ6IG1zZy5yb3V0ZV9pZCB8fCBcIlwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJhZGRfbWlzc2lsZV93YXlwb2ludFwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcImFkZE1pc3NpbGVXYXlwb2ludFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgcm91dGVJZDogbXNnLnJvdXRlX2lkIHx8IFwiXCIsIHg6IG1zZy54LCB5OiBtc2cueSwgc3BlZWQ6IG1zZy5zcGVlZCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwidXBkYXRlX21pc3NpbGVfd2F5cG9pbnRfc3BlZWRcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJ1cGRhdGVNaXNzaWxlV2F5cG9pbnRTcGVlZFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgcm91dGVJZDogbXNnLnJvdXRlX2lkIHx8IFwiXCIsIGluZGV4OiBtc2cuaW5kZXgsIHNwZWVkOiBtc2cuc3BlZWQgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm1vdmVfbWlzc2lsZV93YXlwb2ludFwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcIm1vdmVNaXNzaWxlV2F5cG9pbnRcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IHJvdXRlSWQ6IG1zZy5yb3V0ZV9pZCB8fCBcIlwiLCBpbmRleDogbXNnLmluZGV4LCB4OiBtc2cueCwgeTogbXNnLnkgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcImRlbGV0ZV9taXNzaWxlX3dheXBvaW50XCI6XG4gICAgICAgIHNlbmRQcm90byhjcmVhdGUoV3NFbnZlbG9wZVNjaGVtYSwge1xuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGNhc2U6IFwiZGVsZXRlTWlzc2lsZVdheXBvaW50XCIsXG4gICAgICAgICAgICB2YWx1ZTogeyByb3V0ZUlkOiBtc2cucm91dGVfaWQgfHwgXCJcIiwgaW5kZXg6IG1zZy5pbmRleCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiY2xlYXJfbWlzc2lsZV9yb3V0ZVwiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcImNsZWFyTWlzc2lsZVJvdXRlXCIsXG4gICAgICAgICAgICB2YWx1ZTogeyByb3V0ZUlkOiBtc2cucm91dGVfaWQgfHwgXCJcIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiYWRkX21pc3NpbGVfcm91dGVcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJhZGRNaXNzaWxlUm91dGVcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IG5hbWU6IG1zZy5uYW1lIHx8IFwiXCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcInJlbmFtZV9taXNzaWxlX3JvdXRlXCI6XG4gICAgICAgIHNlbmRQcm90byhjcmVhdGUoV3NFbnZlbG9wZVNjaGVtYSwge1xuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGNhc2U6IFwicmVuYW1lTWlzc2lsZVJvdXRlXCIsXG4gICAgICAgICAgICB2YWx1ZTogeyByb3V0ZUlkOiBtc2cucm91dGVfaWQgfHwgXCJcIiwgbmFtZTogbXNnLm5hbWUgfHwgXCJcIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIFwiZGVsZXRlX21pc3NpbGVfcm91dGVcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJkZWxldGVNaXNzaWxlUm91dGVcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IHJvdXRlSWQ6IG1zZy5yb3V0ZV9pZCB8fCBcIlwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJzZXRfYWN0aXZlX21pc3NpbGVfcm91dGVcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJzZXRBY3RpdmVNaXNzaWxlUm91dGVcIixcbiAgICAgICAgICAgIHZhbHVlOiB7IHJvdXRlSWQ6IG1zZy5yb3V0ZV9pZCB8fCBcIlwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJkYWdfc3RhcnRcIjpcbiAgICAgICAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgY2FzZTogXCJkYWdTdGFydFwiLFxuICAgICAgICAgICAgdmFsdWU6IHsgbm9kZUlkOiBtc2cubm9kZV9pZCB8fCBcIlwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgXCJjbGVhcl9taXNzaWxlX3dheXBvaW50c1wiOlxuICAgICAgICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBjYXNlOiBcImNsZWFyTWlzc2lsZVdheXBvaW50c1wiLFxuICAgICAgICAgICAgdmFsdWU6IHsgcm91dGVJZDogbXNnLnJvdXRlX2lkIHx8IFwiXCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBcIm1pc3Npb246YWNjZXB0XCI6XG4gICAgICAgIGlmICh3cyAmJiB3cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufVxuXG4vLyA9PT09PT09PT09IFBoYXNlIDI6IERBRyBDb21tYW5kIEZ1bmN0aW9ucyA9PT09PT09PT09XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kRGFnU3RhcnQobm9kZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICBwYXlsb2FkOiB7XG4gICAgICBjYXNlOiBcImRhZ1N0YXJ0XCIsXG4gICAgICB2YWx1ZTogeyBub2RlSWQgfSxcbiAgICB9LFxuICB9KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kRGFnQ2FuY2VsKG5vZGVJZDogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghd3MgfHwgd3MucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHJldHVybjtcbiAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgcGF5bG9hZDoge1xuICAgICAgY2FzZTogXCJkYWdDYW5jZWxcIixcbiAgICAgIHZhbHVlOiB7IG5vZGVJZCB9LFxuICAgIH0sXG4gIH0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmREYWdTdG9yeUFjayhub2RlSWQ6IHN0cmluZywgY2hvaWNlSWQ6IHN0cmluZyA9IFwiXCIpOiB2b2lkIHtcbiAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuICBzZW5kUHJvdG8oY3JlYXRlKFdzRW52ZWxvcGVTY2hlbWEsIHtcbiAgICBwYXlsb2FkOiB7XG4gICAgICBjYXNlOiBcImRhZ1N0b3J5QWNrXCIsXG4gICAgICB2YWx1ZTogeyBub2RlSWQsIGNob2ljZUlkIH0sXG4gICAgfSxcbiAgfSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZERhZ0xpc3QoKTogdm9pZCB7XG4gIGlmICghd3MgfHwgd3MucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHJldHVybjtcbiAgc2VuZFByb3RvKGNyZWF0ZShXc0VudmVsb3BlU2NoZW1hLCB7XG4gICAgcGF5bG9hZDoge1xuICAgICAgY2FzZTogXCJkYWdMaXN0XCIsXG4gICAgICB2YWx1ZToge30sXG4gICAgfSxcbiAgfSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNjZXB0TWlzc2lvbihtaXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIW1pc3Npb25JZCkgcmV0dXJuO1xuICBpZiAoIXdzIHx8IHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgLy8gQWxsb3cgbG9jYWwgc3RhdGUgdXBkYXRlIGV2ZW4gaWYgc29ja2V0IG5vdCByZWFkeSBmb3IgcmVzaWxpZW5jZVxuICAgIGlmIChjb25uZWN0ZWRTdGF0ZSAmJiBjb25uZWN0ZWRCdXMpIHtcbiAgICAgIGNvbnN0IG1pc3Npb24gPSBlbnN1cmVNaXNzaW9uU3RhdGUoY29ubmVjdGVkU3RhdGUpO1xuICAgICAgbWlzc2lvbi5taXNzaW9uSWQgPSBtaXNzaW9uSWQ7XG4gICAgICBtaXNzaW9uLnN0YXR1cyA9IFwiYWN0aXZlXCI7XG4gICAgICBtaXNzaW9uLnN0YXJ0VGltZSA9IG1pc3Npb24uc3RhcnRUaW1lID8/IGdldEFwcHJveFNlcnZlck5vdyhjb25uZWN0ZWRTdGF0ZSk7XG4gICAgICBjb25uZWN0ZWRCdXMuZW1pdChcIm1pc3Npb246c3RhcnRcIiwgeyBtaXNzaW9uSWQgfSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiBcIm1pc3Npb246YWNjZXB0XCIsIHBheWxvYWQ6IHsgbWlzc2lvbklkIH0gfSkpO1xuXG4gIGlmIChjb25uZWN0ZWRTdGF0ZSAmJiBjb25uZWN0ZWRCdXMpIHtcbiAgICBjb25zdCBtaXNzaW9uID0gZW5zdXJlTWlzc2lvblN0YXRlKGNvbm5lY3RlZFN0YXRlKTtcbiAgICBtaXNzaW9uLm1pc3Npb25JZCA9IG1pc3Npb25JZDtcbiAgICBtaXNzaW9uLnN0YXR1cyA9IFwiYWN0aXZlXCI7XG4gICAgbWlzc2lvbi5zdGFydFRpbWUgPSBtaXNzaW9uLnN0YXJ0VGltZSA/PyBnZXRBcHByb3hTZXJ2ZXJOb3coY29ubmVjdGVkU3RhdGUpO1xuICAgIGNvbm5lY3RlZEJ1cy5lbWl0KFwibWlzc2lvbjpzdGFydFwiLCB7IG1pc3Npb25JZCB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFdlYlNvY2tldCh7XG4gIHJvb20sXG4gIHN0YXRlLFxuICBidXMsXG4gIG9uU3RhdGVVcGRhdGVkLFxuICBvbk9wZW4sXG4gIG1hcFcsXG4gIG1hcEgsXG4gIG1vZGUsXG4gIG1pc3Npb25JZCxcbn06IENvbm5lY3RPcHRpb25zKTogdm9pZCB7XG4gIGNvbnN0IHByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiID8gXCJ3c3M6Ly9cIiA6IFwid3M6Ly9cIjtcbiAgbGV0IHdzVXJsID0gYCR7cHJvdG9jb2x9JHt3aW5kb3cubG9jYXRpb24uaG9zdH0vd3M/cm9vbT0ke2VuY29kZVVSSUNvbXBvbmVudChyb29tKX1gO1xuICBpZiAobWFwVyAmJiBtYXBXID4gMCkge1xuICAgIHdzVXJsICs9IGAmbWFwVz0ke21hcFd9YDtcbiAgfVxuICBpZiAobWFwSCAmJiBtYXBIID4gMCkge1xuICAgIHdzVXJsICs9IGAmbWFwSD0ke21hcEh9YDtcbiAgfVxuICBpZiAobW9kZSkge1xuICAgIHdzVXJsICs9IGAmbW9kZT0ke2VuY29kZVVSSUNvbXBvbmVudChtb2RlKX1gO1xuICB9XG4gIGlmIChtaXNzaW9uSWQpIHtcbiAgICB3c1VybCArPSBgJm1pc3Npb249JHtlbmNvZGVVUklDb21wb25lbnQobWlzc2lvbklkKX1gO1xuICB9XG4gIHdzID0gbmV3IFdlYlNvY2tldCh3c1VybCk7XG4gIGNvbm5lY3RlZFN0YXRlID0gc3RhdGU7XG4gIGNvbm5lY3RlZEJ1cyA9IGJ1cztcbiAgLy8gU2V0IGJpbmFyeSB0eXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlc1xuICB3cy5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICB3cy5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJbd3NdIG9wZW5cIik7XG4gICAgY29uc3Qgc29ja2V0ID0gd3M7XG4gICAgaWYgKHNvY2tldCAmJiBvbk9wZW4pIHtcbiAgICAgIG9uT3Blbihzb2NrZXQpO1xuICAgIH1cbiAgfSk7XG4gIHdzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJbd3NdIGNsb3NlXCIpO1xuICAgIGNvbm5lY3RlZFN0YXRlID0gbnVsbDtcbiAgICBjb25uZWN0ZWRCdXMgPSBudWxsO1xuICB9KTtcblxuICBsZXQgcHJldlJvdXRlcyA9IG5ldyBNYXA8c3RyaW5nLCBNaXNzaWxlUm91dGU+KCk7XG4gIGxldCBwcmV2QWN0aXZlUm91dGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBsZXQgcHJldk1pc3NpbGVDb3VudCA9IDA7XG5cbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGV2ZW50KSA9PiB7XG4gICAgLy8gSGFuZGxlIGJpbmFyeSBwcm90b2J1ZiBtZXNzYWdlc1xuICAgIGlmIChldmVudC5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVudmVsb3BlID0gZnJvbUJpbmFyeShXc0VudmVsb3BlU2NoZW1hLCBuZXcgVWludDhBcnJheShldmVudC5kYXRhKSk7XG5cbiAgICAgICAgaWYgKGVudmVsb3BlLnBheWxvYWQuY2FzZSA9PT0gXCJzdGF0ZVVwZGF0ZVwiKSB7XG4gICAgICAgICAgY29uc3QgcHJvdG9TdGF0ZSA9IHByb3RvVG9TdGF0ZShlbnZlbG9wZS5wYXlsb2FkLnZhbHVlKTtcbiAgICAgICAgICBoYW5kbGVQcm90b1N0YXRlTWVzc2FnZShzdGF0ZSwgcHJvdG9TdGF0ZSwgYnVzLCBwcmV2Um91dGVzLCBwcmV2QWN0aXZlUm91dGUsIHByZXZNaXNzaWxlQ291bnQpO1xuICAgICAgICAgIHByZXZSb3V0ZXMgPSBuZXcgTWFwKHN0YXRlLm1pc3NpbGVSb3V0ZXMubWFwKChyb3V0ZSkgPT4gW3JvdXRlLmlkLCBjbG9uZVJvdXRlKHJvdXRlKV0pKTtcbiAgICAgICAgICBwcmV2QWN0aXZlUm91dGUgPSBzdGF0ZS5hY3RpdmVNaXNzaWxlUm91dGVJZDtcbiAgICAgICAgICBwcmV2TWlzc2lsZUNvdW50ID0gc3RhdGUubWlzc2lsZXMubGVuZ3RoO1xuICAgICAgICAgIGJ1cy5lbWl0KFwic3RhdGU6dXBkYXRlZFwiKTtcbiAgICAgICAgICBvblN0YXRlVXBkYXRlZD8uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZW52ZWxvcGUucGF5bG9hZC5jYXNlID09PSBcInJvb21GdWxsXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW3dzXSBSb29tIGZ1bGw6XCIsIGVudmVsb3BlLnBheWxvYWQudmFsdWUubWVzc2FnZSk7XG4gICAgICAgICAgYnVzLmVtaXQoXCJjb25uZWN0aW9uOmVycm9yXCIsIHsgbWVzc2FnZTogZW52ZWxvcGUucGF5bG9hZC52YWx1ZS5tZXNzYWdlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVudmVsb3BlLnBheWxvYWQuY2FzZSA9PT0gXCJkYWdMaXN0UmVzcG9uc2VcIikge1xuICAgICAgICAgIC8vIEhhbmRsZSBEQUcgbGlzdCByZXNwb25zZSBmcm9tIFBoYXNlIDJcbiAgICAgICAgICBjb25zdCBkYWdEYXRhID0gZW52ZWxvcGUucGF5bG9hZC52YWx1ZS5kYWc7XG4gICAgICAgICAgaWYgKGRhZ0RhdGEpIHtcbiAgICAgICAgICAgIGJ1cy5lbWl0KFwiZGFnOmxpc3RcIiwgcHJvdG9Ub0RhZ1N0YXRlKGRhZ0RhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZW52ZWxvcGUucGF5bG9hZC5jYXNlID09PSBcIm1pc3Npb25CZWFjb25TbmFwc2hvdFwiKSB7XG4gICAgICAgICAgaGFuZGxlTWlzc2lvblNuYXBzaG90KHN0YXRlLCBlbnZlbG9wZS5wYXlsb2FkLnZhbHVlLCBidXMpO1xuICAgICAgICB9IGVsc2UgaWYgKGVudmVsb3BlLnBheWxvYWQuY2FzZSA9PT0gXCJtaXNzaW9uQmVhY29uRGVsdGFcIikge1xuICAgICAgICAgIGhhbmRsZU1pc3Npb25EZWx0YShzdGF0ZSwgZW52ZWxvcGUucGF5bG9hZC52YWx1ZSwgYnVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbd3NdIFVua25vd24gcHJvdG9idWYgbWVzc2FnZSB0eXBlOlwiLCBlbnZlbG9wZS5wYXlsb2FkLmNhc2UpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlt3c10gRmFpbGVkIHRvIGRlY29kZSBwcm90b2J1ZiBtZXNzYWdlOlwiLCBlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaGFuZGxlSnNvbk1lc3NhZ2Uoc3RhdGUsIGJ1cywgZXZlbnQuZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICBldmVudC5kYXRhLnRleHQoKVxuICAgICAgICAudGhlbigodGV4dCkgPT4gaGFuZGxlSnNvbk1lc3NhZ2Uoc3RhdGUsIGJ1cywgdGV4dCkpXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKFwiW3dzXSBGYWlsZWQgdG8gcmVhZCB0ZXh0IG1lc3NhZ2U6XCIsIGVycikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSk7XG59XG5cblxuLy8gSGFuZGxlIHByb3RvYnVmIHN0YXRlIG1lc3NhZ2VzIChzaW1wbGlmaWVkIHZlcnNpb24gb2YgaGFuZGxlU3RhdGVNZXNzYWdlKVxuZnVuY3Rpb24gaGFuZGxlSnNvbk1lc3NhZ2Uoc3RhdGU6IEFwcFN0YXRlLCBidXM6IEV2ZW50QnVzLCByYXc6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIXJhdykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbXNnOiB7IHR5cGU/OiBzdHJpbmc7IHBheWxvYWQ/OiB1bmtub3duIH07XG4gIHRyeSB7XG4gICAgbXNnID0gSlNPTi5wYXJzZShyYXcpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiW3dzXSBGYWlsZWQgdG8gcGFyc2UgSlNPTiBtZXNzYWdlOlwiLCBlcnIpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIW1zZyB8fCB0eXBlb2YgbXNnLnR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKG1zZy50eXBlKSB7XG4gICAgY2FzZSBcIm1pc3Npb246b2ZmZXJcIjoge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IG1zZy5wYXlsb2FkIGFzIFBhcnRpYWw8TWlzc2lvbk9mZmVyRFRPPiB8IHVuZGVmaW5lZDtcbiAgICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBtaXNzaW9uID0gZW5zdXJlTWlzc2lvblN0YXRlKHN0YXRlKTtcbiAgICAgIG1pc3Npb24ubWlzc2lvbklkID0gcGF5bG9hZC5taXNzaW9uSWQgPz8gbWlzc2lvbi5taXNzaW9uSWQgPz8gXCJcIjtcbiAgICAgIG1pc3Npb24udGVtcGxhdGVJZCA9IHBheWxvYWQudGVtcGxhdGVJZCA/PyBcIlwiO1xuICAgICAgbWlzc2lvbi5kaXNwbGF5TmFtZSA9IHBheWxvYWQuZGlzcGxheU5hbWUgPz8gbWlzc2lvbi5kaXNwbGF5TmFtZSA/PyBcIlwiO1xuICAgICAgbWlzc2lvbi5hcmNoZXR5cGUgPSBwYXlsb2FkLmFyY2hldHlwZSA/PyBtaXNzaW9uLmFyY2hldHlwZSA/PyBcIlwiO1xuICAgICAgbWlzc2lvbi50aW1lb3V0ID0gTnVtYmVyLmlzRmluaXRlKHBheWxvYWQudGltZW91dCkgPyBOdW1iZXIocGF5bG9hZC50aW1lb3V0KSA6IDA7XG4gICAgICBtaXNzaW9uLnN0YXR1cyA9IFwiaWRsZVwiO1xuICAgICAgbWlzc2lvbi5zdGFydFRpbWUgPSBudWxsO1xuICAgICAgbWlzc2lvbi5jb21wbGV0aW9uVGltZSA9IG51bGw7XG4gICAgICBtaXNzaW9uLnByb2dyZXNzID0gMDtcbiAgICAgIG1pc3Npb24ub2JqZWN0aXZlcyA9IFtdO1xuICAgICAgbWlzc2lvbi5vYmplY3RpdmVTdW1tYXJpZXMgPSBBcnJheS5pc0FycmF5KHBheWxvYWQub2JqZWN0aXZlcykgPyBbLi4ucGF5bG9hZC5vYmplY3RpdmVzXSA6IFtdO1xuICAgICAgbWlzc2lvbi5zZXJ2ZXJUaW1lID0gZ2V0QXBwcm94U2VydmVyTm93KHN0YXRlKTtcblxuICAgICAgYnVzLmVtaXQoXCJtaXNzaW9uOm9mZmVyZWRcIiwge1xuICAgICAgICBtaXNzaW9uSWQ6IG1pc3Npb24ubWlzc2lvbklkLFxuICAgICAgICB0ZW1wbGF0ZUlkOiBtaXNzaW9uLnRlbXBsYXRlSWQsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBtaXNzaW9uLmRpc3BsYXlOYW1lLFxuICAgICAgICBhcmNoZXR5cGU6IG1pc3Npb24uYXJjaGV0eXBlLFxuICAgICAgICBvYmplY3RpdmVzOiBtaXNzaW9uLm9iamVjdGl2ZVN1bW1hcmllcyxcbiAgICAgICAgdGltZW91dDogbWlzc2lvbi50aW1lb3V0LFxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIFwibWlzc2lvbjp1cGRhdGVcIjoge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IG1zZy5wYXlsb2FkIGFzIFBhcnRpYWw8TWlzc2lvblVwZGF0ZURUTz4gfCB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgbWlzc2lvbiA9IGVuc3VyZU1pc3Npb25TdGF0ZShzdGF0ZSk7XG4gICAgICBpZiAocGF5bG9hZC5taXNzaW9uSWQpIHtcbiAgICAgICAgbWlzc2lvbi5taXNzaW9uSWQgPSBwYXlsb2FkLm1pc3Npb25JZDtcbiAgICAgIH1cbiAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUocGF5bG9hZC5zZXJ2ZXJUaW1lKSkge1xuICAgICAgICBtaXNzaW9uLnNlcnZlclRpbWUgPSBOdW1iZXIocGF5bG9hZC5zZXJ2ZXJUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5zdGF0dXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbWlzc2lvbi5zdGF0dXMgPSBwYXlsb2FkLnN0YXR1cyBhcyBNaXNzaW9uU3RhdHVzO1xuICAgICAgfVxuICAgICAgaWYgKG1pc3Npb24uc3RhdHVzID09PSBcImFjdGl2ZVwiICYmIG1pc3Npb24uc3RhcnRUaW1lID09IG51bGwpIHtcbiAgICAgICAgbWlzc2lvbi5zdGFydFRpbWUgPSBnZXRBcHByb3hTZXJ2ZXJOb3coc3RhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHBheWxvYWQub2JqZWN0aXZlcykge1xuICAgICAgICBjb25zdCBvYmplY3RpdmVzID0gdXBkYXRlTWlzc2lvbk9iamVjdGl2ZXMoc3RhdGUsIGJ1cywgcGF5bG9hZC5vYmplY3RpdmVzKTtcbiAgICAgICAgYnVzLmVtaXQoXCJtaXNzaW9uOnVwZGF0ZVwiLCB7XG4gICAgICAgICAgbWlzc2lvbklkOiBtaXNzaW9uLm1pc3Npb25JZCxcbiAgICAgICAgICBzdGF0dXM6IG1pc3Npb24uc3RhdHVzLFxuICAgICAgICAgIG9iamVjdGl2ZXMsXG4gICAgICAgICAgc2VydmVyVGltZTogbWlzc2lvbi5zZXJ2ZXJUaW1lLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1cy5lbWl0KFwibWlzc2lvbjp1cGRhdGVcIiwge1xuICAgICAgICAgIG1pc3Npb25JZDogbWlzc2lvbi5taXNzaW9uSWQsXG4gICAgICAgICAgc3RhdHVzOiBtaXNzaW9uLnN0YXR1cyxcbiAgICAgICAgICBvYmplY3RpdmVzOiBtaXNzaW9uLm9iamVjdGl2ZXMsXG4gICAgICAgICAgc2VydmVyVGltZTogbWlzc2lvbi5zZXJ2ZXJUaW1lLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1pc3Npb24uc3RhdHVzID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgICAgIG1pc3Npb24uY29tcGxldGlvblRpbWUgPSBtaXNzaW9uLnNlcnZlclRpbWU7XG4gICAgICAgIG1pc3Npb24ucHJvZ3Jlc3MgPSAxO1xuICAgICAgICBidXMuZW1pdChcIm1pc3Npb246Y29tcGxldGVkXCIsIHsgbWlzc2lvbklkOiBtaXNzaW9uLm1pc3Npb25JZCB9KTtcbiAgICAgIH0gZWxzZSBpZiAobWlzc2lvbi5zdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgICAgbWlzc2lvbi5jb21wbGV0aW9uVGltZSA9IG1pc3Npb24uc2VydmVyVGltZTtcbiAgICAgICAgYnVzLmVtaXQoXCJtaXNzaW9uOmZhaWxlZFwiLCB7IG1pc3Npb25JZDogbWlzc2lvbi5taXNzaW9uSWQgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTWlzc2lvbk9iamVjdGl2ZXMoc3RhdGU6IEFwcFN0YXRlLCBidXM6IEV2ZW50QnVzLCBvYmplY3RpdmVEVE9zOiBPYmplY3RpdmVTdGF0ZURUT1tdKTogTWlzc2lvbk9iamVjdGl2ZVN0YXRlW10ge1xuICBjb25zdCBtaXNzaW9uID0gZW5zdXJlTWlzc2lvblN0YXRlKHN0YXRlKTtcbiAgY29uc3Qgb2JqZWN0aXZlcyA9IEFycmF5LmlzQXJyYXkob2JqZWN0aXZlRFRPcylcbiAgICA/IG9iamVjdGl2ZURUT3MubWFwKChvYmopID0+ICh7XG4gICAgICBpZDogb2JqLmlkID8/IFwiXCIsXG4gICAgICB0eXBlOiBvYmoudHlwZSA/PyBcInVua25vd25cIixcbiAgICAgIHByb2dyZXNzOiBjbGFtcFByb2dyZXNzKG9iai5wcm9ncmVzcyA/PyAwKSxcbiAgICAgIGNvbXBsZXRlOiBCb29sZWFuKG9iai5jb21wbGV0ZSksXG4gICAgICBkZXNjcmlwdGlvbjogb2JqLmRlc2NyaXB0aW9uID8/IFwiXCIsXG4gICAgfSkpXG4gICAgOiBbXTtcblxuICBtaXNzaW9uLm9iamVjdGl2ZXMgPSBvYmplY3RpdmVzO1xuICBtaXNzaW9uLnByb2dyZXNzID0gY2FsY3VsYXRlTWlzc2lvblByb2dyZXNzKG9iamVjdGl2ZXMpO1xuXG4gIGJ1cy5lbWl0KFwibWlzc2lvbjpvYmplY3RpdmVzLXVwZGF0ZWRcIiwgeyBvYmplY3RpdmVzIH0pO1xuICBidXMuZW1pdChcIm1pc3Npb246cHJvZ3Jlc3MtY2hhbmdlZFwiLCB7IHByb2dyZXNzOiBtaXNzaW9uLnByb2dyZXNzLCBvYmplY3RpdmVzIH0pO1xuXG4gIHJldHVybiBvYmplY3RpdmVzO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVNaXNzaW9uUHJvZ3Jlc3Mob2JqZWN0aXZlczogTWlzc2lvbk9iamVjdGl2ZVN0YXRlW10pOiBudW1iZXIge1xuICBpZiAoIW9iamVjdGl2ZXMgfHwgb2JqZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCB0b3RhbCA9IG9iamVjdGl2ZXMucmVkdWNlKChzdW0sIG9iaikgPT4gc3VtICsgY2xhbXBQcm9ncmVzcyhvYmoucHJvZ3Jlc3MpLCAwKTtcbiAgY29uc3QgbWVhbiA9IHRvdGFsIC8gb2JqZWN0aXZlcy5sZW5ndGg7XG4gIHJldHVybiBjbGFtcFByb2dyZXNzKG1lYW4pO1xufVxuXG4vLyBIYW5kbGUgcHJvdG9idWYgc3RhdGUgbWVzc2FnZXMgKHNpbXBsaWZpZWQgdmVyc2lvbiBvZiBoYW5kbGVTdGF0ZU1lc3NhZ2UpXG5mdW5jdGlvbiBoYW5kbGVQcm90b1N0YXRlTWVzc2FnZShcbiAgc3RhdGU6IEFwcFN0YXRlLFxuICBtc2c6IFJldHVyblR5cGU8dHlwZW9mIHByb3RvVG9TdGF0ZT4sXG4gIGJ1czogRXZlbnRCdXMsXG4gIHByZXZSb3V0ZXM6IE1hcDxzdHJpbmcsIE1pc3NpbGVSb3V0ZT4sXG4gIHByZXZBY3RpdmVSb3V0ZTogc3RyaW5nIHwgbnVsbCxcbiAgcHJldk1pc3NpbGVDb3VudDogbnVtYmVyLFxuKTogdm9pZCB7XG4gIHN0YXRlLm5vdyA9IG1zZy5ub3c7XG4gIHN0YXRlLm5vd1N5bmNlZEF0ID0gbW9ub3RvbmljTm93KCk7XG4gIHN0YXRlLm5leHRNaXNzaWxlUmVhZHlBdCA9IG1zZy5uZXh0TWlzc2lsZVJlYWR5O1xuXG4gIC8vIFVwZGF0ZSBwbGF5ZXIgc2hpcFxuICBpZiAobXNnLm1lKSB7XG4gICAgc3RhdGUubWUgPSB7XG4gICAgICB4OiBtc2cubWUueCxcbiAgICAgIHk6IG1zZy5tZS55LFxuICAgICAgdng6IG1zZy5tZS52eCxcbiAgICAgIHZ5OiBtc2cubWUudnksXG4gICAgICBocDogbXNnLm1lLmhwLFxuICAgICAga2lsbHM6IG1zZy5tZS5raWxscyxcbiAgICAgIHdheXBvaW50czogbXNnLm1lLndheXBvaW50cyA/PyBbXSxcbiAgICAgIGN1cnJlbnRXYXlwb2ludEluZGV4OiBtc2cubWUuY3VycmVudFdheXBvaW50SW5kZXggPz8gMCxcbiAgICAgIGhlYXQ6IG1zZy5tZS5oZWF0ID8gY29udmVydEhlYXRWaWV3KG1zZy5tZS5oZWF0LCBzdGF0ZS5ub3dTeW5jZWRBdCwgc3RhdGUubm93KSA6IHVuZGVmaW5lZCxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLm1lID0gbnVsbDtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBnaG9zdHMgYW5kIG1pc3NpbGVzIChhbHJlYWR5IGluIGNvcnJlY3QgZm9ybWF0IGZyb20gcHJvdG9faGVscGVycylcbiAgc3RhdGUuZ2hvc3RzID0gbXNnLmdob3N0cztcbiAgc3RhdGUubWlzc2lsZXMgPSBtc2cubWlzc2lsZXM7XG5cbiAgLy8gVXBkYXRlIG1pc3NpbGUgcm91dGVzXG4gIGNvbnN0IG5ld1JvdXRlczogTWlzc2lsZVJvdXRlW10gPSBtc2cubWlzc2lsZVJvdXRlcztcbiAgZGlmZlJvdXRlcyhwcmV2Um91dGVzLCBuZXdSb3V0ZXMsIGJ1cyk7XG4gIHN0YXRlLm1pc3NpbGVSb3V0ZXMgPSBuZXdSb3V0ZXM7XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSByb3V0ZVxuICBjb25zdCBuZXh0QWN0aXZlID0gbXNnLmFjdGl2ZU1pc3NpbGVSb3V0ZSB8fCAobmV3Um91dGVzLmxlbmd0aCA+IDAgPyBuZXdSb3V0ZXNbMF0uaWQgOiBudWxsKTtcbiAgc3RhdGUuYWN0aXZlTWlzc2lsZVJvdXRlSWQgPSBuZXh0QWN0aXZlO1xuICBpZiAobmV4dEFjdGl2ZSAhPT0gcHJldkFjdGl2ZVJvdXRlKSB7XG4gICAgYnVzLmVtaXQoXCJtaXNzaWxlOmFjdGl2ZVJvdXRlQ2hhbmdlZFwiLCB7IHJvdXRlSWQ6IG5leHRBY3RpdmUgfSk7XG4gIH1cblxuICAvLyBVcGRhdGUgbWlzc2lsZSBjb25maWdcbiAgaWYgKG1zZy5taXNzaWxlQ29uZmlnKSB7XG4gICAgdXBkYXRlTWlzc2lsZUxpbWl0cyhzdGF0ZSwge1xuICAgICAgc3BlZWRNaW46IG1zZy5taXNzaWxlQ29uZmlnLnNwZWVkTWluLFxuICAgICAgc3BlZWRNYXg6IG1zZy5taXNzaWxlQ29uZmlnLnNwZWVkTWF4LFxuICAgICAgYWdyb01pbjogbXNnLm1pc3NpbGVDb25maWcuYWdyb01pbixcbiAgICB9KTtcblxuICAgIGNvbnN0IHByZXZIZWF0ID0gc3RhdGUubWlzc2lsZUNvbmZpZy5oZWF0UGFyYW1zO1xuICAgIGxldCBoZWF0UGFyYW1zOiB7IG1heDogbnVtYmVyOyB3YXJuQXQ6IG51bWJlcjsgb3ZlcmhlYXRBdDogbnVtYmVyOyBtYXJrZXJTcGVlZDogbnVtYmVyOyBrVXA6IG51bWJlcjsga0Rvd246IG51bWJlcjsgZXhwOiBudW1iZXIgfSB8IHVuZGVmaW5lZDtcbiAgICBpZiAobXNnLm1pc3NpbGVDb25maWcuaGVhdENvbmZpZykge1xuICAgICAgY29uc3QgaGVhdENvbmZpZyA9IG1zZy5taXNzaWxlQ29uZmlnLmhlYXRDb25maWc7XG4gICAgICBoZWF0UGFyYW1zID0ge1xuICAgICAgICBtYXg6IGhlYXRDb25maWcubWF4ID8/IHByZXZIZWF0Py5tYXggPz8gMCxcbiAgICAgICAgd2FybkF0OiBoZWF0Q29uZmlnLndhcm5BdCA/PyBwcmV2SGVhdD8ud2FybkF0ID8/IDAsXG4gICAgICAgIG92ZXJoZWF0QXQ6IGhlYXRDb25maWcub3ZlcmhlYXRBdCA/PyBwcmV2SGVhdD8ub3ZlcmhlYXRBdCA/PyAwLFxuICAgICAgICBtYXJrZXJTcGVlZDogaGVhdENvbmZpZy5tYXJrZXJTcGVlZCA/PyBwcmV2SGVhdD8ubWFya2VyU3BlZWQgPz8gMCxcbiAgICAgICAga1VwOiBoZWF0Q29uZmlnLmtVcCA/PyBwcmV2SGVhdD8ua1VwID8/IDAsXG4gICAgICAgIGtEb3duOiBoZWF0Q29uZmlnLmtEb3duID8/IHByZXZIZWF0Py5rRG93biA/PyAwLFxuICAgICAgICBleHA6IGhlYXRDb25maWcuZXhwID8/IHByZXZIZWF0Py5leHAgPz8gMSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc2FuaXRpemVkID0gc2FuaXRpemVNaXNzaWxlQ29uZmlnKHtcbiAgICAgIHNwZWVkOiBtc2cubWlzc2lsZUNvbmZpZy5zcGVlZCxcbiAgICAgIGFncm9SYWRpdXM6IG1zZy5taXNzaWxlQ29uZmlnLmFncm9SYWRpdXMsXG4gICAgICBoZWF0UGFyYW1zLFxuICAgIH0sIHN0YXRlLm1pc3NpbGVDb25maWcsIHN0YXRlLm1pc3NpbGVMaW1pdHMpO1xuICAgIHNhbml0aXplZC5saWZldGltZSA9IG1zZy5taXNzaWxlQ29uZmlnLmxpZmV0aW1lO1xuICAgIHN0YXRlLm1pc3NpbGVDb25maWcgPSBzYW5pdGl6ZWQ7XG4gIH1cblxuICAvLyBVcGRhdGUgd29ybGQgbWV0YVxuICBzdGF0ZS53b3JsZE1ldGEgPSB7XG4gICAgYzogbXNnLm1ldGEuYyxcbiAgICB3OiBtc2cubWV0YS53LFxuICAgIGg6IG1zZy5tZXRhLmgsXG4gIH07XG5cbiAgLy8gUGhhc2UgMjogVXBkYXRlIGludmVudG9yeVxuICBpZiAobXNnLmludmVudG9yeSkge1xuICAgIHN0YXRlLmludmVudG9yeSA9IHtcbiAgICAgIGl0ZW1zOiBtc2cuaW52ZW50b3J5Lml0ZW1zLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICB2YXJpYW50X2lkOiBpdGVtLnZhcmlhbnRJZCxcbiAgICAgICAgaGVhdF9jYXBhY2l0eTogaXRlbS5oZWF0Q2FwYWNpdHksXG4gICAgICAgIHF1YW50aXR5OiBpdGVtLnF1YW50aXR5LFxuICAgICAgfSkpLFxuICAgIH07XG4gIH1cblxuICAvLyBQaGFzZSAyOiBVcGRhdGUgREFHIChwcm90b1RvU3RhdGUgYWxyZWFkeSBub3JtYWxpemVkIHZpYSBwcm90b19oZWxwZXJzKVxuICBpZiAobXNnLmRhZykge1xuICAgIHN0YXRlLmRhZyA9IHtcbiAgICAgIG5vZGVzOiBtc2cuZGFnLm5vZGVzLm1hcCgobikgPT4gKHtcbiAgICAgICAgaWQ6IG4uaWQsXG4gICAgICAgIGtpbmQ6IG4ua2luZCxcbiAgICAgICAgbGFiZWw6IG4ubGFiZWwsXG4gICAgICAgIHN0YXR1czogbi5zdGF0dXMsXG4gICAgICAgIHJlbWFpbmluZ19zOiBuLnJlbWFpbmluZ1MsXG4gICAgICAgIGR1cmF0aW9uX3M6IG4uZHVyYXRpb25TLFxuICAgICAgICByZXBlYXRhYmxlOiBuLnJlcGVhdGFibGUsXG4gICAgICAgIGVmZmVjdHM6IG4uZWZmZWN0cyxcbiAgICAgIH0pKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gUGhhc2UgMjogVXBkYXRlIGNhcGFiaWxpdGllc1xuICBpZiAobXNnLmNhcGFiaWxpdGllcykge1xuICAgIHN0YXRlLmNhcGFiaWxpdGllcyA9IHtcbiAgICAgIHNwZWVkTXVsdGlwbGllcjogbXNnLmNhcGFiaWxpdGllcy5zcGVlZE11bHRpcGxpZXIsXG4gICAgICB1bmxvY2tlZE1pc3NpbGVzOiBtc2cuY2FwYWJpbGl0aWVzLnVubG9ja2VkTWlzc2lsZXMsXG4gICAgICBoZWF0Q2FwYWNpdHk6IG1zZy5jYXBhYmlsaXRpZXMuaGVhdENhcGFjaXR5LFxuICAgICAgaGVhdEVmZmljaWVuY3k6IG1zZy5jYXBhYmlsaXRpZXMuaGVhdEVmZmljaWVuY3ksXG4gICAgfTtcbiAgfVxuXG4gIC8vIFBoYXNlIDI6IFVwZGF0ZSBzdG9yeVxuICBpZiAobXNnLnN0b3J5KSB7XG4gICAgY29uc3QgcHJldkFjdGl2ZU5vZGUgPSBzdGF0ZS5zdG9yeT8uYWN0aXZlTm9kZSA/PyBudWxsO1xuXG4gICAgLy8gQ29udmVydCBzdG9yeSBkaWFsb2d1ZSB0byBEaWFsb2d1ZUNvbnRlbnQgZm9ybWF0XG4gICAgbGV0IGRpYWxvZ3VlOiBEaWFsb2d1ZUNvbnRlbnQgfCBudWxsID0gbnVsbDtcbiAgICBpZiAobXNnLnN0b3J5LmRpYWxvZ3VlKSB7XG4gICAgICBjb25zdCBkID0gbXNnLnN0b3J5LmRpYWxvZ3VlO1xuICAgICAgZGlhbG9ndWUgPSB7XG4gICAgICAgIHNwZWFrZXI6IGQuc3BlYWtlcixcbiAgICAgICAgdGV4dDogZC50ZXh0LFxuICAgICAgICBpbnRlbnQ6IGQuaW50ZW50IGFzIFwiZmFjdG9yeVwiIHwgXCJ1bml0XCIsXG4gICAgICAgIHR5cGluZ1NwZWVkTXM6IDE4LFxuICAgICAgICBjb250aW51ZUxhYmVsOiBkLmNvbnRpbnVlTGFiZWwsXG4gICAgICAgIGNob2ljZXM6IGQuY2hvaWNlcz8ubWFwKGMgPT4gKHsgaWQ6IGMuaWQsIHRleHQ6IGMudGV4dCB9KSksXG4gICAgICAgIHR1dG9yaWFsVGlwOiBkLnR1dG9yaWFsVGlwID8ge1xuICAgICAgICAgIHRpdGxlOiBkLnR1dG9yaWFsVGlwLnRpdGxlLFxuICAgICAgICAgIHRleHQ6IGQudHV0b3JpYWxUaXAudGV4dCxcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGUuc3RvcnkgPSB7XG4gICAgICBhY3RpdmVOb2RlOiBtc2cuc3RvcnkuYWN0aXZlTm9kZSB8fCBudWxsLFxuICAgICAgZGlhbG9ndWUsXG4gICAgICBhdmFpbGFibGU6IG1zZy5zdG9yeS5hdmFpbGFibGUsXG4gICAgICBmbGFnczogbXNnLnN0b3J5LmZsYWdzLFxuICAgICAgcmVjZW50RXZlbnRzOiBtc2cuc3RvcnkucmVjZW50RXZlbnRzLm1hcCgoZXZ0KSA9PiAoe1xuICAgICAgICBjaGFwdGVyOiBldnQuY2hhcHRlcklkLFxuICAgICAgICBub2RlOiBldnQubm9kZUlkLFxuICAgICAgICB0aW1lc3RhbXA6IGV2dC50aW1lc3RhbXAsXG4gICAgICB9KSksXG4gICAgfTtcblxuICAgIC8vIEVtaXQgZXZlbnQgd2hlbiBhY3RpdmUgc3Rvcnkgbm9kZSBjaGFuZ2VzXG4gICAgaWYgKHN0YXRlLnN0b3J5LmFjdGl2ZU5vZGUgIT09IHByZXZBY3RpdmVOb2RlICYmIHN0YXRlLnN0b3J5LmFjdGl2ZU5vZGUpIHtcbiAgICAgIGJ1cy5lbWl0KFwic3Rvcnk6bm9kZUFjdGl2YXRlZFwiLCB7XG4gICAgICAgIG5vZGVJZDogc3RhdGUuc3RvcnkuYWN0aXZlTm9kZSxcbiAgICAgICAgZGlhbG9ndWU6IHN0YXRlLnN0b3J5LmRpYWxvZ3VlID8/IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVtaXQgbWlzc2lsZSBjb3VudCBjaGFuZ2UgaWYgbmVlZGVkXG4gIGNvbnN0IG5ld01pc3NpbGVDb3VudCA9IHN0YXRlLm1pc3NpbGVzLmxlbmd0aDtcbiAgaWYgKG5ld01pc3NpbGVDb3VudCA+IHByZXZNaXNzaWxlQ291bnQpIHtcbiAgICBmb3IgKGxldCBpID0gcHJldk1pc3NpbGVDb3VudDsgaSA8IG5ld01pc3NpbGVDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBtID0gc3RhdGUubWlzc2lsZXNbaV07XG4gICAgICBpZiAobSAmJiBtLnNlbGYpIHtcbiAgICAgICAgYnVzLmVtaXQoXCJtaXNzaWxlOmxhdW5jaGVkXCIsIHsgcm91dGVJZDogbXNnLmFjdGl2ZU1pc3NpbGVSb3V0ZSB8fCBcIlwiIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEVtaXQgY29vbGRvd24gdXBkYXRlXG4gIGNvbnN0IGNvb2xkb3duUmVtYWluaW5nID0gTWF0aC5tYXgoMCwgc3RhdGUubmV4dE1pc3NpbGVSZWFkeUF0IC0gZ2V0QXBwcm94U2VydmVyTm93KHN0YXRlKSk7XG4gIGJ1cy5lbWl0KFwibWlzc2lsZTpjb29sZG93blVwZGF0ZWRcIiwgeyBzZWNvbmRzUmVtYWluaW5nOiBjb29sZG93blJlbWFpbmluZyB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTWlzc2lvblNuYXBzaG90KHN0YXRlOiBBcHBTdGF0ZSwgc25hcHNob3Q6IE1pc3Npb25CZWFjb25TbmFwc2hvdCwgYnVzOiBFdmVudEJ1cyk6IHZvaWQge1xuICBjb25zdCBtaXNzaW9uID0gZW5zdXJlTWlzc2lvblN0YXRlKHN0YXRlKTtcbiAgY29uc3QgcHJldmlvdXNNaXNzaW9uSWQgPSBtaXNzaW9uLm1pc3Npb25JZDtcbiAgbWlzc2lvbi5taXNzaW9uSWQgPSBzbmFwc2hvdC5taXNzaW9uSWQgfHwgbWlzc2lvbi5taXNzaW9uSWQgfHwgXCJcIjtcbiAgbWlzc2lvbi5sYXlvdXRTZWVkID0gTnVtYmVyKHNuYXBzaG90LmxheW91dFNlZWQgPz8gbWlzc2lvbi5sYXlvdXRTZWVkID8/IDApO1xuICBtaXNzaW9uLnNlcnZlclRpbWUgPSBOdW1iZXIuaXNGaW5pdGUoc25hcHNob3Quc2VydmVyVGltZSkgPyBzbmFwc2hvdC5zZXJ2ZXJUaW1lIDogbWlzc2lvbi5zZXJ2ZXJUaW1lO1xuXG4gIGNvbnN0IHByZXZpb3VzQmVhY29ucyA9IG5ldyBNYXAobWlzc2lvbi5iZWFjb25zLm1hcCgoYikgPT4gW2IuaWQsIGJdKSk7XG4gIG1pc3Npb24uYmVhY29ucyA9IHNuYXBzaG90LmJlYWNvbnNcbiAgICAuc2xpY2UoKVxuICAgIC5zb3J0KChhLCBiKSA9PiBhLm9yZGluYWwgLSBiLm9yZGluYWwpXG4gICAgLm1hcCgoZGVmKTogTWlzc2lvbkJlYWNvbiA9PiB7XG4gICAgICBjb25zdCBwcmV2ID0gcHJldmlvdXNCZWFjb25zLmdldChkZWYuaWQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGRlZi5pZCxcbiAgICAgICAgb3JkaW5hbDogZGVmLm9yZGluYWwsXG4gICAgICAgIHg6IGRlZi54LFxuICAgICAgICB5OiBkZWYueSxcbiAgICAgICAgcmFkaXVzOiBkZWYucmFkaXVzLFxuICAgICAgICBzZWVkOiBOdW1iZXIoZGVmLnNlZWQgfHwgMCksXG4gICAgICAgIGRpc2NvdmVyZWQ6IHByZXY/LmRpc2NvdmVyZWQgPz8gZmFsc2UsXG4gICAgICAgIGNvbXBsZXRlZDogcHJldj8uY29tcGxldGVkID8/IGZhbHNlLFxuICAgICAgICBjb29sZG93blVudGlsOiBwcmV2Py5jb29sZG93blVudGlsID8/IG51bGwsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gIGNvbnN0IGxvY2FsUGxheWVySWQgPSBnZXRMb2NhbFBsYXllcklkKHN0YXRlKTtcbiAgbGV0IHBsYXllclByb3RvID0gbG9jYWxQbGF5ZXJJZFxuICAgID8gc25hcHNob3QucGxheWVycy5maW5kKChwKSA9PiBwLnBsYXllcklkID09PSBsb2NhbFBsYXllcklkKSB8fCBudWxsXG4gICAgOiBudWxsO1xuICBpZiAoIXBsYXllclByb3RvICYmIHNuYXBzaG90LnBsYXllcnMubGVuZ3RoID09PSAxKSB7XG4gICAgcGxheWVyUHJvdG8gPSBzbmFwc2hvdC5wbGF5ZXJzWzBdO1xuICB9XG5cbiAgaWYgKHBsYXllclByb3RvKSB7XG4gICAgY29uc3Qgbm93TXMgPSBtb25vdG9uaWNOb3coKTtcbiAgICBjb25zdCBkaXNjb3ZlcmVkU2V0ID0gbmV3IFNldChwbGF5ZXJQcm90by5kaXNjb3ZlcmVkID8/IFtdKTtcbiAgICBjb25zdCBjb21wbGV0ZWRTZXQgPSBuZXcgU2V0KHBsYXllclByb3RvLmNvbXBsZXRlZCA/PyBbXSk7XG4gICAgZm9yIChjb25zdCBiZWFjb24gb2YgbWlzc2lvbi5iZWFjb25zKSB7XG4gICAgICBiZWFjb24uZGlzY292ZXJlZCA9IGRpc2NvdmVyZWRTZXQuaGFzKGJlYWNvbi5pZCk7XG4gICAgICBiZWFjb24uY29tcGxldGVkID0gY29tcGxldGVkU2V0LmhhcyhiZWFjb24uaWQpO1xuICAgICAgY29uc3QgY29vbGRvd24gPSBwbGF5ZXJQcm90by5jb29sZG93bnM/LltiZWFjb24uaWRdO1xuICAgICAgYmVhY29uLmNvb2xkb3duVW50aWwgPSBOdW1iZXIuaXNGaW5pdGUoY29vbGRvd24pID8gY29vbGRvd24gOiBudWxsO1xuICAgIH1cblxuICAgIGxldCBwbGF5ZXIgPSBtaXNzaW9uLnBsYXllcjtcbiAgICBpZiAoIXBsYXllciB8fCBwbGF5ZXIucGxheWVySWQgIT09IHBsYXllclByb3RvLnBsYXllcklkKSB7XG4gICAgICBwbGF5ZXIgPSB7XG4gICAgICAgIHBsYXllcklkOiBwbGF5ZXJQcm90by5wbGF5ZXJJZCxcbiAgICAgICAgY3VycmVudEluZGV4OiBwbGF5ZXJQcm90by5jdXJyZW50SW5kZXggPz8gMCxcbiAgICAgICAgYWN0aXZlQmVhY29uSWQ6IHBsYXllclByb3RvLmFjdGl2ZUJlYWNvbiB8fCBudWxsLFxuICAgICAgICBob2xkQWNjdW06IHBsYXllclByb3RvLmhvbGRBY2N1bSA/PyAwLFxuICAgICAgICBob2xkUmVxdWlyZWQ6IE1hdGgubWF4KDAsIHBsYXllclByb3RvLmhvbGRSZXF1aXJlZCA/PyAwKSxcbiAgICAgICAgZGlzcGxheUhvbGQ6IHBsYXllclByb3RvLmhvbGRBY2N1bSA/PyAwLFxuICAgICAgICBsYXN0U2VydmVyVXBkYXRlOiBOdW1iZXIuaXNGaW5pdGUoc25hcHNob3Quc2VydmVyVGltZSkgPyBzbmFwc2hvdC5zZXJ2ZXJUaW1lIDogZ2V0QXBwcm94U2VydmVyTm93KHN0YXRlKSxcbiAgICAgICAgbGFzdERpc3BsYXlTeW5jOiBub3dNcyxcbiAgICAgICAgaW5zaWRlQWN0aXZlQmVhY29uOiBmYWxzZSxcbiAgICAgIH07XG4gICAgICBtaXNzaW9uLnBsYXllciA9IHBsYXllcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheWVyLmN1cnJlbnRJbmRleCA9IHBsYXllclByb3RvLmN1cnJlbnRJbmRleCA/PyBwbGF5ZXIuY3VycmVudEluZGV4O1xuICAgICAgcGxheWVyLmFjdGl2ZUJlYWNvbklkID0gcGxheWVyUHJvdG8uYWN0aXZlQmVhY29uIHx8IG51bGw7XG4gICAgICBwbGF5ZXIuaG9sZEFjY3VtID0gcGxheWVyUHJvdG8uaG9sZEFjY3VtID8/IHBsYXllci5ob2xkQWNjdW07XG4gICAgICBwbGF5ZXIuaG9sZFJlcXVpcmVkID0gTWF0aC5tYXgoMCwgcGxheWVyUHJvdG8uaG9sZFJlcXVpcmVkID8/IHBsYXllci5ob2xkUmVxdWlyZWQpO1xuICAgICAgcGxheWVyLmRpc3BsYXlIb2xkID0gcGxheWVyUHJvdG8uaG9sZEFjY3VtID8/IHBsYXllci5kaXNwbGF5SG9sZCA/PyAwO1xuICAgICAgcGxheWVyLmxhc3RTZXJ2ZXJVcGRhdGUgPSBOdW1iZXIuaXNGaW5pdGUoc25hcHNob3Quc2VydmVyVGltZSkgPyBzbmFwc2hvdC5zZXJ2ZXJUaW1lIDogZ2V0QXBwcm94U2VydmVyTm93KHN0YXRlKTtcbiAgICAgIHBsYXllci5sYXN0RGlzcGxheVN5bmMgPSBub3dNcztcbiAgICB9XG5cbiAgICBtaXNzaW9uLnN0YXR1cyA9IGNvbXBsZXRlZFNldC5zaXplID4gMCAmJiBjb21wbGV0ZWRTZXQuc2l6ZSA+PSBtaXNzaW9uLmJlYWNvbnMubGVuZ3RoICYmIG1pc3Npb24uYmVhY29ucy5sZW5ndGggPiAwXG4gICAgICA/IFwiY29tcGxldGVkXCJcbiAgICAgIDogXCJhY3RpdmVcIjtcbiAgfSBlbHNlIGlmICghbWlzc2lvbi5wbGF5ZXIgfHwgbWlzc2lvbi5wbGF5ZXIucGxheWVySWQgPT09IFwiXCIpIHtcbiAgICBtaXNzaW9uLnBsYXllciA9IG51bGw7XG4gICAgbWlzc2lvbi5zdGF0dXMgPSBcImlkbGVcIjtcbiAgICBmb3IgKGNvbnN0IGJlYWNvbiBvZiBtaXNzaW9uLmJlYWNvbnMpIHtcbiAgICAgIGJlYWNvbi5kaXNjb3ZlcmVkID0gZmFsc2U7XG4gICAgICBiZWFjb24uY29tcGxldGVkID0gZmFsc2U7XG4gICAgICBiZWFjb24uY29vbGRvd25VbnRpbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbWlzc2lvbi5lbmNvdW50ZXJzID0gc25hcHNob3QuZW5jb3VudGVycy5tYXAoKGVuYyk6IE1pc3Npb25FbmNvdW50ZXJTdGF0ZSA9PiAoe1xuICAgIGlkOiBlbmMuZW5jb3VudGVySWQsXG4gICAgYmVhY29uSWQ6IGVuYy5iZWFjb25JZCxcbiAgICB3YXZlSW5kZXg6IGVuYy53YXZlSW5kZXgsXG4gICAgc3Bhd25lZEF0OiBlbmMuc3Bhd25lZEF0LFxuICAgIGV4cGlyZXNBdDogZW5jLmV4cGlyZXNBdCxcbiAgICBhY3RpdmU6IHRydWUsXG4gIH0pKTtcblxuICAvLyBJZiB0aGlzIGlzIGEgbmV3IG1pc3Npb24gaWQsIHJlc2V0IHRyYW5zaWVudCBwbGF5ZXIgc3RhdGVcbiAgaWYgKG1pc3Npb24ucGxheWVyICYmIG1pc3Npb24ubWlzc2lvbklkICE9PSBwcmV2aW91c01pc3Npb25JZCkge1xuICAgIG1pc3Npb24ucGxheWVyLmRpc3BsYXlIb2xkID0gbWlzc2lvbi5wbGF5ZXIuaG9sZEFjY3VtO1xuICAgIG1pc3Npb24ucGxheWVyLmxhc3REaXNwbGF5U3luYyA9IG1vbm90b25pY05vdygpO1xuICAgIG1pc3Npb24ucGxheWVyLmluc2lkZUFjdGl2ZUJlYWNvbiA9IGZhbHNlO1xuICB9XG5cbiAgYWxpZ25NaXNzaW9uUHJvZ3Jlc3MobWlzc2lvbik7XG4gIGJ1cy5lbWl0KFwibWlzc2lvbjp1cGRhdGVcIiwgeyByZWFzb246IFwic25hcHNob3RcIiB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTWlzc2lvbkRlbHRhKHN0YXRlOiBBcHBTdGF0ZSwgZGVsdGE6IE1pc3Npb25CZWFjb25EZWx0YSwgYnVzOiBFdmVudEJ1cyk6IHZvaWQge1xuICBjb25zdCBtaXNzaW9uID0gZW5zdXJlTWlzc2lvblN0YXRlKHN0YXRlKTtcbiAgY29uc3Qgbm93TXMgPSBtb25vdG9uaWNOb3coKTtcbiAgY29uc3QgYXBwcm94Tm93ID0gZ2V0QXBwcm94U2VydmVyTm93KHN0YXRlKTtcbiAgY29uc3QgbG9jYWxQbGF5ZXJJZCA9IGdldExvY2FsUGxheWVySWQoc3RhdGUpID8/IG1pc3Npb24ucGxheWVyPy5wbGF5ZXJJZCA/PyBudWxsO1xuICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuXG4gIGZvciAoY29uc3QgZW50cnkgb2YgZGVsdGEucGxheWVycyA/PyBbXSkge1xuICAgIGlmIChsb2NhbFBsYXllcklkICYmIGVudHJ5LnBsYXllcklkICE9PSBsb2NhbFBsYXllcklkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgcGxheWVyID0gZW5zdXJlTWlzc2lvblBsYXllcihtaXNzaW9uLCBlbnRyeS5wbGF5ZXJJZCk7XG4gICAgaWYgKE51bWJlci5pc0Zpbml0ZShlbnRyeS5ob2xkUmVxdWlyZWQpICYmIGVudHJ5LmhvbGRSZXF1aXJlZCA+IDApIHtcbiAgICAgIHBsYXllci5ob2xkUmVxdWlyZWQgPSBlbnRyeS5ob2xkUmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoZW50cnkuaG9sZEFjY3VtKSkge1xuICAgICAgcGxheWVyLmhvbGRBY2N1bSA9IGVudHJ5LmhvbGRBY2N1bTtcbiAgICB9XG4gICAgcGxheWVyLmxhc3RTZXJ2ZXJVcGRhdGUgPSBOdW1iZXIuaXNGaW5pdGUoZW50cnkuc2VydmVyVGltZSkgPyBlbnRyeS5zZXJ2ZXJUaW1lIDogYXBwcm94Tm93O1xuICAgIHBsYXllci5sYXN0RGlzcGxheVN5bmMgPSBub3dNcztcblxuICAgIGNvbnN0IGJlYWNvbiA9IGZpbmRCZWFjb25Gb3JEZWx0YShtaXNzaW9uLCBlbnRyeSk7XG5cbiAgICBzd2l0Y2ggKGVudHJ5LnR5cGUpIHtcbiAgICAgIGNhc2UgTWlzc2lvbkJlYWNvbkRlbHRhVHlwZS5NSVNTSU9OX0JFQUNPTl9ERUxUQV9ESVNDT1ZFUkVEOlxuICAgICAgICBpZiAoYmVhY29uKSB7XG4gICAgICAgICAgYmVhY29uLmRpc2NvdmVyZWQgPSB0cnVlO1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNaXNzaW9uQmVhY29uRGVsdGFUeXBlLk1JU1NJT05fQkVBQ09OX0RFTFRBX0hPTERfUFJPR1JFU1M6XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTWlzc2lvbkJlYWNvbkRlbHRhVHlwZS5NSVNTSU9OX0JFQUNPTl9ERUxUQV9IT0xEX1JFU0VUOlxuICAgICAgICBwbGF5ZXIuaG9sZEFjY3VtID0gMDtcbiAgICAgICAgcGxheWVyLmRpc3BsYXlIb2xkID0gTWF0aC5taW4ocGxheWVyLmRpc3BsYXlIb2xkLCAwKTtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNaXNzaW9uQmVhY29uRGVsdGFUeXBlLk1JU1NJT05fQkVBQ09OX0RFTFRBX0xPQ0tFRDpcbiAgICAgICAgaWYgKGJlYWNvbikge1xuICAgICAgICAgIGJlYWNvbi5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IGNvb2xkb3duID0gTnVtYmVyLmlzRmluaXRlKGVudHJ5LmNvb2xkb3duVW50aWwpID8gZW50cnkuY29vbGRvd25VbnRpbCA6IG51bGw7XG4gICAgICAgICAgYmVhY29uLmNvb2xkb3duVW50aWwgPSBjb29sZG93bjtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIuaG9sZEFjY3VtID0gMDtcbiAgICAgICAgcGxheWVyLmRpc3BsYXlIb2xkID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1pc3Npb25CZWFjb25EZWx0YVR5cGUuTUlTU0lPTl9CRUFDT05fREVMVEFfQ09PTERPV046XG4gICAgICAgIGlmIChiZWFjb24pIHtcbiAgICAgICAgICBjb25zdCBjb29sZG93biA9IE51bWJlci5pc0Zpbml0ZShlbnRyeS5jb29sZG93blVudGlsKSA/IGVudHJ5LmNvb2xkb3duVW50aWwgOiBudWxsO1xuICAgICAgICAgIGJlYWNvbi5jb29sZG93blVudGlsID0gY29vbGRvd247XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1pc3Npb25CZWFjb25EZWx0YVR5cGUuTUlTU0lPTl9CRUFDT05fREVMVEFfTUlTU0lPTl9DT01QTEVURUQ6XG4gICAgICAgIG1pc3Npb24uc3RhdHVzID0gXCJjb21wbGV0ZWRcIjtcbiAgICAgICAgcGxheWVyLmhvbGRBY2N1bSA9IDA7XG4gICAgICAgIHBsYXllci5kaXNwbGF5SG9sZCA9IDA7XG4gICAgICAgIHBsYXllci5hY3RpdmVCZWFjb25JZCA9IG51bGw7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZWx0YS5lbmNvdW50ZXJzICYmIGRlbHRhLmVuY291bnRlcnMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVuY291bnRlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBNaXNzaW9uRW5jb3VudGVyU3RhdGU+KCk7XG4gICAgZm9yIChjb25zdCBlbmMgb2YgbWlzc2lvbi5lbmNvdW50ZXJzKSB7XG4gICAgICBlbmNvdW50ZXJNYXAuc2V0KGVuYy5pZCwgeyAuLi5lbmMgfSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZGVsdGEuZW5jb3VudGVycykge1xuICAgICAgbGV0IGVuY291bnRlciA9IGVuY291bnRlck1hcC5nZXQoZXZlbnQuZW5jb3VudGVySWQpO1xuICAgICAgaWYgKCFlbmNvdW50ZXIpIHtcbiAgICAgICAgZW5jb3VudGVyID0ge1xuICAgICAgICAgIGlkOiBldmVudC5lbmNvdW50ZXJJZCxcbiAgICAgICAgICBiZWFjb25JZDogZXZlbnQuYmVhY29uSWQsXG4gICAgICAgICAgd2F2ZUluZGV4OiBldmVudC53YXZlSW5kZXgsXG4gICAgICAgICAgc3Bhd25lZEF0OiBldmVudC5zcGF3bmVkQXQsXG4gICAgICAgICAgZXhwaXJlc0F0OiBldmVudC5leHBpcmVzQXQsXG4gICAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgZW5jb3VudGVyTWFwLnNldChldmVudC5lbmNvdW50ZXJJZCwgZW5jb3VudGVyKTtcbiAgICAgIH1cbiAgICAgIGVuY291bnRlci5iZWFjb25JZCA9IGV2ZW50LmJlYWNvbklkIHx8IGVuY291bnRlci5iZWFjb25JZDtcbiAgICAgIGVuY291bnRlci53YXZlSW5kZXggPSBldmVudC53YXZlSW5kZXggPz8gZW5jb3VudGVyLndhdmVJbmRleDtcbiAgICAgIGVuY291bnRlci5zcGF3bmVkQXQgPSBOdW1iZXIuaXNGaW5pdGUoZXZlbnQuc3Bhd25lZEF0KSA/IGV2ZW50LnNwYXduZWRBdCA6IGVuY291bnRlci5zcGF3bmVkQXQ7XG4gICAgICBlbmNvdW50ZXIuZXhwaXJlc0F0ID0gTnVtYmVyLmlzRmluaXRlKGV2ZW50LmV4cGlyZXNBdCkgPyBldmVudC5leHBpcmVzQXQgOiBlbmNvdW50ZXIuZXhwaXJlc0F0O1xuICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgTWlzc2lvbkVuY291bnRlckV2ZW50VHlwZS5NSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9TUEFXTkVEOlxuICAgICAgICAgIGVuY291bnRlci5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIGVuY291bnRlci5yZWFzb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWlzc2lvbkVuY291bnRlckV2ZW50VHlwZS5NSVNTSU9OX0VOQ09VTlRFUl9FVkVOVF9DTEVBUkVEOlxuICAgICAgICAgIGVuY291bnRlci5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICBlbmNvdW50ZXIucmVhc29uID0gZXZlbnQucmVhc29uIHx8IFwiY2xlYXJlZFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1pc3Npb25FbmNvdW50ZXJFdmVudFR5cGUuTUlTU0lPTl9FTkNPVU5URVJfRVZFTlRfVElNRU9VVDpcbiAgICAgICAgICBlbmNvdW50ZXIuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgZW5jb3VudGVyLnJlYXNvbiA9IGV2ZW50LnJlYXNvbiB8fCBcInRpbWVvdXRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBNaXNzaW9uRW5jb3VudGVyRXZlbnRUeXBlLk1JU1NJT05fRU5DT1VOVEVSX0VWRU5UX1BVUkdFRDpcbiAgICAgICAgICBlbmNvdW50ZXIuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgZW5jb3VudGVyLnJlYXNvbiA9IGV2ZW50LnJlYXNvbiB8fCBcInB1cmdlZFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBtaXNzaW9uLmVuY291bnRlcnMgPSBBcnJheS5mcm9tKGVuY291bnRlck1hcC52YWx1ZXMoKSkuc29ydCgoYSwgYikgPT4gYS5zcGF3bmVkQXQgLSBiLnNwYXduZWRBdCk7XG4gICAgY2hhbmdlZCA9IHRydWU7XG4gIH1cblxuICBpZiAobWlzc2lvbi5wbGF5ZXIpIHtcbiAgICBtaXNzaW9uLnBsYXllci5kaXNwbGF5SG9sZCA9IE1hdGgubWluKG1pc3Npb24ucGxheWVyLmRpc3BsYXlIb2xkLCBtaXNzaW9uLnBsYXllci5ob2xkQWNjdW0pO1xuICB9XG5cbiAgaWYgKGNoYW5nZWQpIHtcbiAgICBhbGlnbk1pc3Npb25Qcm9ncmVzcyhtaXNzaW9uKTtcbiAgICBidXMuZW1pdChcIm1pc3Npb246dXBkYXRlXCIsIHsgcmVhc29uOiBcImRlbHRhXCIgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5zdXJlTWlzc2lvblN0YXRlKHN0YXRlOiBBcHBTdGF0ZSk6IE1pc3Npb25TdGF0ZSB7XG4gIGlmICghc3RhdGUubWlzc2lvbikge1xuICAgIHN0YXRlLm1pc3Npb24gPSB7XG4gICAgICBtaXNzaW9uSWQ6IFwiXCIsXG4gICAgICB0ZW1wbGF0ZUlkOiBcIlwiLFxuICAgICAgZGlzcGxheU5hbWU6IFwiXCIsXG4gICAgICBhcmNoZXR5cGU6IFwiXCIsXG4gICAgICBsYXlvdXRTZWVkOiAwLFxuICAgICAgc2VydmVyVGltZTogMCxcbiAgICAgIHN0YXR1czogXCJpZGxlXCIsXG4gICAgICB0aW1lb3V0OiAwLFxuICAgICAgc3RhcnRUaW1lOiBudWxsLFxuICAgICAgY29tcGxldGlvblRpbWU6IG51bGwsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIGJlYWNvbnM6IFtdLFxuICAgICAgcGxheWVyOiBudWxsLFxuICAgICAgZW5jb3VudGVyczogW10sXG4gICAgICBvYmplY3RpdmVzOiBbXSxcbiAgICAgIG9iamVjdGl2ZVN1bW1hcmllczogW10sXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5taXNzaW9uLnRlbXBsYXRlSWQgPSBzdGF0ZS5taXNzaW9uLnRlbXBsYXRlSWQgPz8gXCJcIjtcbiAgICBzdGF0ZS5taXNzaW9uLmRpc3BsYXlOYW1lID0gc3RhdGUubWlzc2lvbi5kaXNwbGF5TmFtZSA/PyBcIlwiO1xuICAgIHN0YXRlLm1pc3Npb24uYXJjaGV0eXBlID0gc3RhdGUubWlzc2lvbi5hcmNoZXR5cGUgPz8gXCJcIjtcbiAgICBzdGF0ZS5taXNzaW9uLnRpbWVvdXQgPSBzdGF0ZS5taXNzaW9uLnRpbWVvdXQgPz8gMDtcbiAgICBzdGF0ZS5taXNzaW9uLnN0YXJ0VGltZSA9IHN0YXRlLm1pc3Npb24uc3RhcnRUaW1lID8/IG51bGw7XG4gICAgc3RhdGUubWlzc2lvbi5jb21wbGV0aW9uVGltZSA9IHN0YXRlLm1pc3Npb24uY29tcGxldGlvblRpbWUgPz8gbnVsbDtcbiAgICBzdGF0ZS5taXNzaW9uLnByb2dyZXNzID0gc3RhdGUubWlzc2lvbi5wcm9ncmVzcyA/PyAwO1xuICAgIHN0YXRlLm1pc3Npb24ub2JqZWN0aXZlcyA9IHN0YXRlLm1pc3Npb24ub2JqZWN0aXZlcyA/PyBbXTtcbiAgICBzdGF0ZS5taXNzaW9uLm9iamVjdGl2ZVN1bW1hcmllcyA9IHN0YXRlLm1pc3Npb24ub2JqZWN0aXZlU3VtbWFyaWVzID8/IFtdO1xuICB9XG4gIHJldHVybiBzdGF0ZS5taXNzaW9uO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVNaXNzaW9uUGxheWVyKG1pc3Npb246IE1pc3Npb25TdGF0ZSwgcGxheWVySWQ6IHN0cmluZyk6IE1pc3Npb25QbGF5ZXJTdGF0ZSB7XG4gIGNvbnN0IG5vd01zID0gbW9ub3RvbmljTm93KCk7XG4gIGlmICghbWlzc2lvbi5wbGF5ZXIgfHwgbWlzc2lvbi5wbGF5ZXIucGxheWVySWQgIT09IHBsYXllcklkKSB7XG4gICAgbWlzc2lvbi5wbGF5ZXIgPSB7XG4gICAgICBwbGF5ZXJJZCxcbiAgICAgIGN1cnJlbnRJbmRleDogbWlzc2lvbi5wbGF5ZXI/LmN1cnJlbnRJbmRleCA/PyAwLFxuICAgICAgYWN0aXZlQmVhY29uSWQ6IG1pc3Npb24ucGxheWVyPy5hY3RpdmVCZWFjb25JZCA/PyBudWxsLFxuICAgICAgaG9sZEFjY3VtOiBtaXNzaW9uLnBsYXllcj8uaG9sZEFjY3VtID8/IDAsXG4gICAgICBob2xkUmVxdWlyZWQ6IG1pc3Npb24ucGxheWVyPy5ob2xkUmVxdWlyZWQgPz8gMCxcbiAgICAgIGRpc3BsYXlIb2xkOiBtaXNzaW9uLnBsYXllcj8uZGlzcGxheUhvbGQgPz8gMCxcbiAgICAgIGxhc3RTZXJ2ZXJVcGRhdGU6IG1pc3Npb24ucGxheWVyPy5sYXN0U2VydmVyVXBkYXRlID8/IDAsXG4gICAgICBsYXN0RGlzcGxheVN5bmM6IG5vd01zLFxuICAgICAgaW5zaWRlQWN0aXZlQmVhY29uOiBtaXNzaW9uLnBsYXllcj8uaW5zaWRlQWN0aXZlQmVhY29uID8/IGZhbHNlLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG1pc3Npb24ucGxheWVyO1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhbFBsYXllcklkKHN0YXRlOiBBcHBTdGF0ZSk6IHN0cmluZyB8IG51bGwge1xuICBpZiAoc3RhdGUubWlzc2lvbj8ucGxheWVyPy5wbGF5ZXJJZCkge1xuICAgIHJldHVybiBzdGF0ZS5taXNzaW9uLnBsYXllci5wbGF5ZXJJZDtcbiAgfVxuICBjb25zdCBpZCA9IHN0YXRlLm1lPy5pZDtcbiAgaWYgKCFpZCkgcmV0dXJuIG51bGw7XG4gIGlmIChpZC5zdGFydHNXaXRoKFwic2hpcC1cIikpIHtcbiAgICByZXR1cm4gaWQuc2xpY2UoXCJzaGlwLVwiLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiBmaW5kQmVhY29uRm9yRGVsdGEobWlzc2lvbjogTWlzc2lvblN0YXRlLCBkZWx0YTogeyBiZWFjb25JZDogc3RyaW5nOyBvcmRpbmFsOiBudW1iZXIgfSk6IE1pc3Npb25CZWFjb24gfCB1bmRlZmluZWQge1xuICBpZiAoIW1pc3Npb24uYmVhY29ucy5sZW5ndGgpIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmIChkZWx0YS5iZWFjb25JZCkge1xuICAgIGNvbnN0IGJlYWNvbiA9IG1pc3Npb24uYmVhY29ucy5maW5kKChiKSA9PiBiLmlkID09PSBkZWx0YS5iZWFjb25JZCk7XG4gICAgaWYgKGJlYWNvbikgcmV0dXJuIGJlYWNvbjtcbiAgfVxuICByZXR1cm4gbWlzc2lvbi5iZWFjb25zLmZpbmQoKGIpID0+IGIub3JkaW5hbCA9PT0gZGVsdGEub3JkaW5hbCk7XG59XG5cbmZ1bmN0aW9uIGFsaWduTWlzc2lvblByb2dyZXNzKG1pc3Npb246IE1pc3Npb25TdGF0ZSk6IHZvaWQge1xuICBpZiAobWlzc2lvbi5vYmplY3RpdmVzICYmIG1pc3Npb24ub2JqZWN0aXZlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBsYXllciA9IG1pc3Npb24ucGxheWVyO1xuICBpZiAoIXBsYXllcikge1xuICAgIG1pc3Npb24uc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG5leHRCZWFjb24gPSBtaXNzaW9uLmJlYWNvbnMuZmluZCgoYikgPT4gIWIuY29tcGxldGVkKTtcbiAgaWYgKCFuZXh0QmVhY29uKSB7XG4gICAgbWlzc2lvbi5zdGF0dXMgPSBcImNvbXBsZXRlZFwiO1xuICAgIHBsYXllci5jdXJyZW50SW5kZXggPSBtaXNzaW9uLmJlYWNvbnMubGVuZ3RoO1xuICAgIHBsYXllci5hY3RpdmVCZWFjb25JZCA9IG51bGw7XG4gICAgcGxheWVyLmluc2lkZUFjdGl2ZUJlYWNvbiA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBtaXNzaW9uLnN0YXR1cyA9IFwiYWN0aXZlXCI7XG4gIHBsYXllci5jdXJyZW50SW5kZXggPSBuZXh0QmVhY29uLm9yZGluYWw7XG4gIHBsYXllci5hY3RpdmVCZWFjb25JZCA9IG5leHRCZWFjb24uaWQ7XG59XG5cbmZ1bmN0aW9uIGRpZmZSb3V0ZXMocHJldlJvdXRlczogTWFwPHN0cmluZywgTWlzc2lsZVJvdXRlPiwgbmV4dFJvdXRlczogTWlzc2lsZVJvdXRlW10sIGJ1czogRXZlbnRCdXMpOiB2b2lkIHtcbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBmb3IgKGNvbnN0IHJvdXRlIG9mIG5leHRSb3V0ZXMpIHtcbiAgICBzZWVuLmFkZChyb3V0ZS5pZCk7XG4gICAgY29uc3QgcHJldiA9IHByZXZSb3V0ZXMuZ2V0KHJvdXRlLmlkKTtcbiAgICBpZiAoIXByZXYpIHtcbiAgICAgIGJ1cy5lbWl0KFwibWlzc2lsZTpyb3V0ZUFkZGVkXCIsIHsgcm91dGVJZDogcm91dGUuaWQgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLm5hbWUgIT09IHByZXYubmFtZSkge1xuICAgICAgYnVzLmVtaXQoXCJtaXNzaWxlOnJvdXRlUmVuYW1lZFwiLCB7IHJvdXRlSWQ6IHJvdXRlLmlkLCBuYW1lOiByb3V0ZS5uYW1lIH0pO1xuICAgIH1cbiAgICBpZiAocm91dGUud2F5cG9pbnRzLmxlbmd0aCA+IHByZXYud2F5cG9pbnRzLmxlbmd0aCkge1xuICAgICAgYnVzLmVtaXQoXCJtaXNzaWxlOndheXBvaW50QWRkZWRcIiwgeyByb3V0ZUlkOiByb3V0ZS5pZCwgaW5kZXg6IHJvdXRlLndheXBvaW50cy5sZW5ndGggLSAxIH0pO1xuICAgIH0gZWxzZSBpZiAocm91dGUud2F5cG9pbnRzLmxlbmd0aCA8IHByZXYud2F5cG9pbnRzLmxlbmd0aCkge1xuICAgICAgYnVzLmVtaXQoXCJtaXNzaWxlOndheXBvaW50RGVsZXRlZFwiLCB7IHJvdXRlSWQ6IHJvdXRlLmlkLCBpbmRleDogcHJldi53YXlwb2ludHMubGVuZ3RoIC0gMSB9KTtcbiAgICB9XG4gICAgaWYgKHByZXYud2F5cG9pbnRzLmxlbmd0aCA+IDAgJiYgcm91dGUud2F5cG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYnVzLmVtaXQoXCJtaXNzaWxlOndheXBvaW50c0NsZWFyZWRcIiwgeyByb3V0ZUlkOiByb3V0ZS5pZCB9KTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBbcm91dGVJZF0gb2YgcHJldlJvdXRlcykge1xuICAgIGlmICghc2Vlbi5oYXMocm91dGVJZCkpIHtcbiAgICAgIGJ1cy5lbWl0KFwibWlzc2lsZTpyb3V0ZURlbGV0ZWRcIiwgeyByb3V0ZUlkIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZVJvdXRlKHJvdXRlOiBNaXNzaWxlUm91dGUpOiBNaXNzaWxlUm91dGUge1xuICByZXR1cm4ge1xuICAgIGlkOiByb3V0ZS5pZCxcbiAgICBuYW1lOiByb3V0ZS5uYW1lLFxuICAgIHdheXBvaW50czogcm91dGUud2F5cG9pbnRzLm1hcCgod3ApID0+ICh7IC4uLndwIH0pKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcHJveFNlcnZlck5vdyhzdGF0ZTogQXBwU3RhdGUpOiBudW1iZXIge1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZShzdGF0ZS5ub3cpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3Qgc3luY2VkQXQgPSBOdW1iZXIuaXNGaW5pdGUoc3RhdGUubm93U3luY2VkQXQpID8gc3RhdGUubm93U3luY2VkQXQgOiBudWxsO1xuICBpZiAoIXN5bmNlZEF0KSB7XG4gICAgcmV0dXJuIHN0YXRlLm5vdztcbiAgfVxuICBjb25zdCBlbGFwc2VkTXMgPSBtb25vdG9uaWNOb3coKSAtIHN5bmNlZEF0O1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZShlbGFwc2VkTXMpIHx8IGVsYXBzZWRNcyA8IDApIHtcbiAgICByZXR1cm4gc3RhdGUubm93O1xuICB9XG4gIHJldHVybiBzdGF0ZS5ub3cgKyBlbGFwc2VkTXMgLyAxMDAwO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0SGVhdFZpZXcoc2VydmVySGVhdDogeyB2OiBudW1iZXI7IG06IG51bWJlcjsgdzogbnVtYmVyOyBvOiBudW1iZXI7IG1zOiBudW1iZXI7IHN1OiBudW1iZXI7IGt1OiBudW1iZXI7IGtkOiBudW1iZXI7IGV4OiBudW1iZXIgfSwgbm93U3luY2VkQXRNczogbnVtYmVyLCBzZXJ2ZXJOb3dTZWM6IG51bWJlcik6IGltcG9ydChcIi4vc3RhdGVcIikuSGVhdFZpZXcge1xuICAvLyBDb252ZXJ0IHNlcnZlciB0aW1lIChzdGFsbFVudGlsIGluIHNlY29uZHMpIHRvIGNsaWVudCB0aW1lIChtaWxsaXNlY29uZHMpXG4gIC8vIHN0YWxsVW50aWwgaXMgYWJzb2x1dGUgc2VydmVyIHRpbWUsIHNvIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBjbGllbnQgdGltZVxuICBjb25zdCBzZXJ2ZXJTdGFsbFVudGlsU2VjID0gc2VydmVySGVhdC5zdTtcbiAgY29uc3Qgb2Zmc2V0RnJvbU5vd1NlYyA9IHNlcnZlclN0YWxsVW50aWxTZWMgLSBzZXJ2ZXJOb3dTZWM7XG4gIGNvbnN0IHN0YWxsVW50aWxNcyA9IG5vd1N5bmNlZEF0TXMgKyAob2Zmc2V0RnJvbU5vd1NlYyAqIDEwMDApO1xuXG4gIGNvbnN0IGhlYXRWaWV3ID0ge1xuICAgIHZhbHVlOiBzZXJ2ZXJIZWF0LnYsXG4gICAgbWF4OiBzZXJ2ZXJIZWF0Lm0sXG4gICAgd2FybkF0OiBzZXJ2ZXJIZWF0LncsXG4gICAgb3ZlcmhlYXRBdDogc2VydmVySGVhdC5vLFxuICAgIG1hcmtlclNwZWVkOiBzZXJ2ZXJIZWF0Lm1zLFxuICAgIHN0YWxsVW50aWxNczogc3RhbGxVbnRpbE1zLFxuICAgIGtVcDogc2VydmVySGVhdC5rdSxcbiAgICBrRG93bjogc2VydmVySGVhdC5rZCxcbiAgICBleHA6IHNlcnZlckhlYXQuZXgsXG4gIH07XG4gIHJldHVybiBoZWF0Vmlldztcbn1cbiIsICJpbXBvcnQgdHlwZSB7IEV2ZW50QnVzIH0gZnJvbSBcIi4vYnVzXCI7XG5pbXBvcnQgdHlwZSB7IEFwcFN0YXRlLCBEYWdOb2RlIH0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB7IFVwZ3JhZGVFZmZlY3RUeXBlIH0gZnJvbSBcIi4vcHJvdG8vcHJvdG8vd3NfbWVzc2FnZXNfcGJcIjtcbmltcG9ydCB7IHNlbmREYWdTdGFydCB9IGZyb20gXCIuL25ldFwiO1xuXG5sZXQgY291bnRkb3duSW50ZXJ2YWw6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFVwZ3JhZGVzUGFuZWwoXG4gIHN0YXRlOiBBcHBTdGF0ZSxcbiAgYnVzOiBFdmVudEJ1c1xuKTogdm9pZCB7XG4gIC8vIENyZWF0ZSBwYW5lbCBET00gc3RydWN0dXJlXG4gIGNvbnN0IHBhbmVsID0gY3JlYXRlUGFuZWxFbGVtZW50KCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGFuZWwpO1xuXG4gIGNvbnN0IGNvbnRhaW5lciA9IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJy50ZWNoLXRyZWUtY29udGFpbmVyJykgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGNsb3NlQnRuID0gcGFuZWwucXVlcnlTZWxlY3RvcignLmNsb3NlLWJ0bicpIGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBvdmVybGF5ID0gcGFuZWwucXVlcnlTZWxlY3RvcignLnBhbmVsLW92ZXJsYXknKSBhcyBIVE1MRWxlbWVudDtcblxuICAvLyBSZW5kZXIgZnVuY3Rpb24gKHRocm90dGxlZCBieSBzaWduYXR1cmUgb2YgaWQ6c3RhdHVzKVxuICBsZXQgbGFzdFNpZyA9IFwiXCI7XG4gIGZ1bmN0aW9uIGNvbXB1dGVTaWcobm9kZXM6IERhZ05vZGVbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5vZGVzXG4gICAgICAuc2xpY2UoKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuaWQubG9jYWxlQ29tcGFyZShiLmlkKSlcbiAgICAgIC5tYXAobiA9PiBgJHtuLmlkfToke24uc3RhdHVzfWApXG4gICAgICAuam9pbihcInxcIik7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyVXBncmFkZXMoZm9yY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGFsbCA9IHN0YXRlLmRhZz8ubm9kZXMgfHwgW107XG4gICAgLy8gQmUgcGVybWlzc2l2ZTogdHJlYXQgcHJvdG8tbWFwcGVkICd1bml0JyBhcyB1cGdyYWRlcywgYnV0IGFsc28gYWxsb3cgaWQgcHJlZml4XG4gICAgY29uc3QgdXBncmFkZU5vZGVzID0gYWxsLmZpbHRlcihuID0+IG4ua2luZCA9PT0gJ3VuaXQnIHx8IG4uaWQuc3RhcnRzV2l0aCgndXBncmFkZS4nKSk7XG4gICAgY29uc3Qgc2lnID0gY29tcHV0ZVNpZyh1cGdyYWRlTm9kZXMpO1xuICAgIGlmICghZm9yY2UgJiYgc2lnID09PSBsYXN0U2lnKSByZXR1cm47XG4gICAgbGFzdFNpZyA9IHNpZztcbiAgICByZW5kZXJUZWNoVHJlZSh1cGdyYWRlTm9kZXMsIGNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBUb2dnbGUgcGFuZWwgdmlzaWJpbGl0eVxuICBmdW5jdGlvbiB0b2dnbGVQYW5lbCh2aXNpYmxlOiBib29sZWFuKSB7XG4gICAgcGFuZWwuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScsIHZpc2libGUpO1xuICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICByZW5kZXJVcGdyYWRlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV2ZW50IGxpc3RlbmVyc1xuICBidXMub24oXCJ1cGdyYWRlczp0b2dnbGVcIiwgKCkgPT4ge1xuICAgIGNvbnN0IG5leHQgPSAhcGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJyk7XG4gICAgdG9nZ2xlUGFuZWwobmV4dCk7XG4gICAgaWYgKG5leHQpIHJlbmRlclVwZ3JhZGVzKHRydWUpO1xuICB9KTtcblxuICBidXMub24oXCJ1cGdyYWRlczpzaG93XCIsICgpID0+IHsgdG9nZ2xlUGFuZWwodHJ1ZSk7IHJlbmRlclVwZ3JhZGVzKHRydWUpOyB9KTtcbiAgYnVzLm9uKFwidXBncmFkZXM6aGlkZVwiLCAoKSA9PiB0b2dnbGVQYW5lbChmYWxzZSkpO1xuXG4gIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0b2dnbGVQYW5lbChmYWxzZSkpO1xuICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0b2dnbGVQYW5lbChmYWxzZSkpO1xuXG4gIC8vIFN1YnNjcmliZSB0byBEQUcgdXBkYXRlcyAoZXZlbnQtZHJpdmVuIHBhdHRlcm4pXG4gIGJ1cy5vbihcInN0YXRlOnVwZGF0ZWRcIiwgKCkgPT4ge1xuICAgIGlmIChwYW5lbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xuICAgICAgcmVuZGVyVXBncmFkZXMoZmFsc2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gSGFuZGxlIG5vZGUgY2xpY2tcbiAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGNvbnN0IG5vZGVFbCA9IChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xvc2VzdChcIltkYXRhLW5vZGUtaWRdXCIpO1xuICAgIGlmICghbm9kZUVsKSByZXR1cm47XG5cbiAgICBjb25zdCBub2RlSWQgPSBub2RlRWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1ub2RlLWlkXCIpO1xuICAgIGNvbnN0IG5vZGUgPSBzdGF0ZS5kYWc/Lm5vZGVzLmZpbmQobiA9PiBuLmlkID09PSBub2RlSWQpO1xuXG4gICAgaWYgKG5vZGU/LnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xuICAgICAgc2VuZERhZ1N0YXJ0KG5vZGVJZCEpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbmVsRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gIGNvbnN0IHBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBhbmVsLmNsYXNzTmFtZSA9ICd1cGdyYWRlcy1wYW5lbCc7XG4gIHBhbmVsLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicGFuZWwtb3ZlcmxheVwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicGFuZWwtaGVhZGVyXCI+XG4gICAgICAgIDxoMj5TaGlwIFVwZ3JhZGVzPC9oMj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNsb3NlLWJ0blwiPlx1MDBENzwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGVjaC10cmVlLWNvbnRhaW5lclwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICBgO1xuICByZXR1cm4gcGFuZWw7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclRlY2hUcmVlKG5vZGVzOiBEYWdOb2RlW10sIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgY29uc3Qgc29ydGVkID0gbm9kZXMuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiBhLmlkLmxvY2FsZUNvbXBhcmUoYi5pZCkpO1xuICBjb250YWluZXIuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJ0ZWNoLXRyZWVcIj5cbiAgICAgICR7c29ydGVkLmxlbmd0aCA+IDAgPyBzb3J0ZWQubWFwKHJlbmRlck5vZGUpLmpvaW4oJycpIDogJzxkaXYgY2xhc3M9XFxcIm11dGVkXFxcIj5ObyB1cGdyYWRlcyBhdmFpbGFibGU8L2Rpdj4nfVxuICAgIDwvZGl2PlxuICBgO1xufVxuXG5mdW5jdGlvbiBlZmZlY3RUeXBlVG9TdHJpbmcodDogdW5rbm93bik6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHQ7XG4gIGlmICh0eXBlb2YgdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgY2FzZSBVcGdyYWRlRWZmZWN0VHlwZS5TUEVFRF9NVUxUSVBMSUVSOlxuICAgICAgICByZXR1cm4gXCJzcGVlZF9tdWx0aXBsaWVyXCI7XG4gICAgICBjYXNlIFVwZ3JhZGVFZmZlY3RUeXBlLk1JU1NJTEVfVU5MT0NLOlxuICAgICAgICByZXR1cm4gXCJtaXNzaWxlX3VubG9ja1wiO1xuICAgICAgY2FzZSBVcGdyYWRlRWZmZWN0VHlwZS5IRUFUX0NBUEFDSVRZOlxuICAgICAgICByZXR1cm4gXCJoZWF0X2NhcGFjaXR5XCI7XG4gICAgICBjYXNlIFVwZ3JhZGVFZmZlY3RUeXBlLkhFQVRfRUZGSUNJRU5DWTpcbiAgICAgICAgcmV0dXJuIFwiaGVhdF9lZmZpY2llbmN5XCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJ1bmtub3duXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBcInVua25vd25cIjtcbn1cblxuZnVuY3Rpb24gcmVuZGVyTm9kZShub2RlOiBEYWdOb2RlKTogc3RyaW5nIHtcbiAgY29uc3Qgc3RhdHVzQ2xhc3MgPSBgbm9kZS0ke25vZGUuc3RhdHVzfWA7XG4gIGNvbnN0IGVmZmVjdHNIdG1sID0gbm9kZS5lZmZlY3RzPy5tYXAoZSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGVmZmVjdFR5cGVUb1N0cmluZygoZSBhcyBhbnkpLnR5cGUpO1xuICAgIGNvbnN0IHZhbHVlID0gKGUgYXMgYW55KS52YWx1ZSBhcyBudW1iZXIgfCBzdHJpbmc7XG4gICAgY29uc3QgaXNTaGlwID0gbm9kZS5pZC5zdGFydHNXaXRoKFwidXBncmFkZS5zaGlwLlwiKTtcbiAgICBjb25zdCBpc01pc3NpbGUgPSBub2RlLmlkLnN0YXJ0c1dpdGgoXCJ1cGdyYWRlLm1pc3NpbGUuXCIpO1xuICAgIGlmICh0eXBlID09PSBcIm1pc3NpbGVfdW5sb2NrXCIpIHtcbiAgICAgIHJldHVybiBgVW5sb2NrICR7dmFsdWV9YDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29uc3QgcGN0ID0gKCh2YWx1ZSAtIDEpICogMTAwKTtcbiAgICAgIGNvbnN0IHBjdFN0ciA9IE51bWJlci5pc0Zpbml0ZShwY3QpID8gcGN0LnRvRml4ZWQoMCkgOiBcIjBcIjtcbiAgICAgIGlmICh0eXBlID09PSBcInNwZWVkX211bHRpcGxpZXJcIikge1xuICAgICAgICByZXR1cm4gaXNTaGlwID8gYCske3BjdFN0cn0lIFNoaXAgU3BlZWRgIDogaXNNaXNzaWxlID8gYCske3BjdFN0cn0lIE1pc3NpbGUgU3BlZWRgIDogYCske3BjdFN0cn0lIFNwZWVkYDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcImhlYXRfY2FwYWNpdHlcIikge1xuICAgICAgICByZXR1cm4gaXNTaGlwID8gYCske3BjdFN0cn0lIFNoaXAgSGVhdGAgOiBpc01pc3NpbGUgPyBgKyR7cGN0U3RyfSUgTWlzc2lsZSBIZWF0YCA6IGArJHtwY3RTdHJ9JSBIZWF0IENhcGFjaXR5YDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcImhlYXRfZWZmaWNpZW5jeVwiKSB7XG4gICAgICAgIHJldHVybiBgKyR7cGN0U3RyfSUgQ29vbGluZ2A7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9KS5qb2luKCcsICcpIHx8ICcnO1xuXG4gIGNvbnN0IGNvdW50ZG93bkh0bWwgPSBub2RlLnN0YXR1cyA9PT0gJ2luX3Byb2dyZXNzJ1xuICAgID8gYDxkaXYgY2xhc3M9XCJjb3VudGRvd25cIj4ke2Zvcm1hdFRpbWUobm9kZS5yZW1haW5pbmdfcyl9PC9kaXY+YFxuICAgIDogJyc7XG5cbiAgcmV0dXJuIGBcbiAgICA8ZGl2IGNsYXNzPVwibm9kZSAke3N0YXR1c0NsYXNzfVwiIGRhdGEtbm9kZS1pZD1cIiR7bm9kZS5pZH1cIj5cbiAgICAgIDxoMz4ke25vZGUubGFiZWx9PC9oMz5cbiAgICAgICR7ZWZmZWN0c0h0bWwgPyBgPHAgY2xhc3M9XCJlZmZlY3RzXCI+JHtlZmZlY3RzSHRtbH08L3A+YCA6ICcnfVxuICAgICAgPHAgY2xhc3M9XCJkdXJhdGlvblwiPkR1cmF0aW9uOiAke2Zvcm1hdFRpbWUobm9kZS5kdXJhdGlvbl9zKX08L3A+XG4gICAgICAke2NvdW50ZG93bkh0bWx9XG4gICAgICAke25vZGUuc3RhdHVzID09PSAnYXZhaWxhYmxlJyA/ICc8YnV0dG9uPlN0YXJ0PC9idXR0b24+JyA6ICcnfVxuICAgICAgJHtub2RlLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgPyAnPGRpdiBjbGFzcz1cImNoZWNrbWFya1wiPlx1MjcxMzwvZGl2PicgOiAnJ31cbiAgICA8L2Rpdj5cbiAgYDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZShzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoc2Vjb25kcyA8IDYwKSByZXR1cm4gYCR7TWF0aC5mbG9vcihzZWNvbmRzKX1zYDtcbiAgaWYgKHNlY29uZHMgPCAzNjAwKSByZXR1cm4gYCR7TWF0aC5mbG9vcihzZWNvbmRzIC8gNjApfW1gO1xuICByZXR1cm4gYCR7TWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCl9aCAke01hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKX1tYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0Q291bnRkb3duVGltZXIoc3RhdGU6IEFwcFN0YXRlLCBidXM6IEV2ZW50QnVzKTogdm9pZCB7XG4gIGlmIChjb3VudGRvd25JbnRlcnZhbCkge1xuICAgIGNsZWFySW50ZXJ2YWwoY291bnRkb3duSW50ZXJ2YWwpO1xuICB9XG5cbiAgY291bnRkb3duSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGNvbnN0IHVwZ3JhZGVOb2RlcyA9IHN0YXRlLmRhZz8ubm9kZXMuZmlsdGVyKG4gPT5cbiAgICAgIG4ua2luZCA9PT0gJ3VuaXQnICYmIG4uc3RhdHVzID09PSAnaW5fcHJvZ3Jlc3MnXG4gICAgKSB8fCBbXTtcblxuICAgIHVwZ3JhZGVOb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1ub2RlLWlkPVwiJHtub2RlLmlkfVwiXSAuY291bnRkb3duYCk7XG4gICAgICBpZiAoZWwgJiYgbm9kZS5yZW1haW5pbmdfcyA+IDApIHtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBmb3JtYXRUaW1lKG5vZGUucmVtYWluaW5nX3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGJhZGdlIGNvdW50XG4gICAgY29uc3QgaW5Qcm9ncmVzc0NvdW50ID0gdXBncmFkZU5vZGVzLmxlbmd0aDtcbiAgICBidXMuZW1pdChcInVwZ3JhZGVzOmNvdW50VXBkYXRlZFwiLCB7IGNvdW50OiBpblByb2dyZXNzQ291bnQgfSk7XG4gIH0sIDEwMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcENvdW50ZG93blRpbWVyKCk6IHZvaWQge1xuICBpZiAoY291bnRkb3duSW50ZXJ2YWwpIHtcbiAgICBjbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKTtcbiAgICBjb3VudGRvd25JbnRlcnZhbCA9IG51bGw7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVFdmVudEJ1cyB9IGZyb20gXCIuL2J1c1wiO1xuaW1wb3J0IHsgY3JlYXRlSW5pdGlhbFN0YXRlIH0gZnJvbSBcIi4vc3RhdGVcIjtcbmltcG9ydCB7IGluaXRVcGdyYWRlc1BhbmVsLCBzdGFydENvdW50ZG93blRpbWVyIH0gZnJvbSBcIi4vdXBncmFkZXNcIjtcbmltcG9ydCB7IGNvbm5lY3RXZWJTb2NrZXQgfSBmcm9tIFwiLi9uZXRcIjtcblxuY29uc3QgU1RPUkFHRV9LRVkgPSBcImxzZDpjYWxsc2lnblwiO1xuXG50eXBlIE1heWJlPFQ+ID0gVCB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbmxldCBzYXZlU3RhdHVzVGltZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG5jb25zdCBjYWxsU2lnbklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PihcIiNjYWxsLXNpZ24taW5wdXRcIik7XG5jb25zdCBzYXZlU3RhdHVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYXZlLXN0YXR1c1wiKTtcbmNvbnN0IGNhbXBhaWduQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1wYWlnbi1idXR0b25cIik7XG5jb25zdCB0dXRvcmlhbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHV0b3JpYWwtYnV0dG9uXCIpO1xuY29uc3QgZnJlZXBsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZyZWVwbGF5LWJ1dHRvblwiKTtcbmNvbnN0IG1hcFNpemVTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxTZWxlY3RFbGVtZW50PihcIiNtYXAtc2l6ZS1zZWxlY3RcIik7XG5jb25zdCB1cGdyYWRlc0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXBncmFkZXMtYnRuXCIpO1xuXG4vLyBJbml0aWFsaXplIHN0YXRlIGFuZCBidXMgZm9yIHVwZ3JhZGVzXG5jb25zdCBidXMgPSBjcmVhdGVFdmVudEJ1cygpO1xuY29uc3Qgc3RhdGUgPSBjcmVhdGVJbml0aWFsU3RhdGUoKTtcblxuLy8gSW5pdGlhbGl6ZSB1cGdyYWRlcyBwYW5lbFxuaW5pdFVwZ3JhZGVzUGFuZWwoc3RhdGUsIGJ1cyk7XG5zdGFydENvdW50ZG93blRpbWVyKHN0YXRlLCBidXMpO1xuXG4vLyBIYW5kbGUgdXBncmFkZXMgYnV0dG9uXG51cGdyYWRlc0J0bj8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYnVzLmVtaXQoXCJ1cGdyYWRlczp0b2dnbGVcIik7XG59KTtcblxuLy8gVXBkYXRlIGJhZGdlIHdpdGggaW4tcHJvZ3Jlc3MgY291bnRcbmJ1cy5vbihcInVwZ3JhZGVzOmNvdW50VXBkYXRlZFwiLCAoeyBjb3VudCB9KSA9PiB7XG4gIGNvbnN0IGJhZGdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1cGdyYWRlcy1iYWRnZVwiKTtcbiAgaWYgKGJhZGdlKSB7XG4gICAgYmFkZ2UudGV4dENvbnRlbnQgPSBjb3VudCA+IDAgPyBgXHUyNjk5XHVGRTBGICR7Y291bnR9YCA6IFwiXCI7XG4gICAgYmFkZ2Uuc3R5bGUuZGlzcGxheSA9IGNvdW50ID4gMCA/IFwiaW5saW5lXCIgOiBcIm5vbmVcIjtcbiAgfVxufSk7XG5cbi8vIENvbm5lY3QgdG8gc2VydmVyIHRvIGdldCBEQUcgc3RhdGUgKGZvciBsb2JieSByb29tKVxuY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbmNvbnN0IGxvYmJ5Um9vbSA9IHVybFBhcmFtcy5nZXQoXCJsb2JieVJvb21cIikgfHwgXCJsb2JieS1zaGFyZWRcIjtcbmlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGNvbm5lY3RXZWJTb2NrZXQoe1xuICAgIHJvb206IGxvYmJ5Um9vbSxcbiAgICBzdGF0ZSxcbiAgICBidXMsXG4gICAgb25TdGF0ZVVwZGF0ZWQ6ICgpID0+IHtcbiAgICAgIGJ1cy5lbWl0KFwic3RhdGU6dXBkYXRlZFwiKTtcbiAgICB9LFxuICB9KTtcbn1cblxuYm9vdHN0cmFwKCk7XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcCgpOiB2b2lkIHtcbiAgY29uc3QgaW5pdGlhbE5hbWUgPSByZXNvbHZlSW5pdGlhbENhbGxTaWduKCk7XG4gIGlmIChjYWxsU2lnbklucHV0KSB7XG4gICAgY2FsbFNpZ25JbnB1dC52YWx1ZSA9IGluaXRpYWxOYW1lO1xuICB9XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYWxsLXNpZ24tZm9ybVwiKT8uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IG5hbWUgPSBlbnN1cmVDYWxsU2lnbigpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBzaG93U2F2ZVN0YXR1cyhcIlNhdmVkIGNhbGwgc2lnblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1NhdmVTdGF0dXMoXCJDbGVhcmVkIGNhbGwgc2lnblwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNhbXBhaWduQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBlbnN1cmVDYWxsU2lnbigpO1xuICAgIGNvbnN0IHJvb21JZCA9IGdlbmVyYXRlUm9vbUlkKFwiY2FtcGFpZ25cIik7XG4gICAgY29uc3QgbWlzc2lvbklkID0gXCIxXCI7XG4gICAgY29uc3QgdXJsID0gYnVpbGRSb29tVXJsKFxuICAgICAgcm9vbUlkLFxuICAgICAgbmFtZSxcbiAgICAgIFwiY2FtcGFpZ25cIixcbiAgICAgIHsgdzogMzIwMDAsIGg6IDE4MDAwIH0sXG4gICAgICBtaXNzaW9uSWQsXG4gICAgKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgfSk7XG5cbiAgdHV0b3JpYWxCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGVuc3VyZUNhbGxTaWduKCk7XG4gICAgY29uc3QgbWFwU2l6ZSA9IGdldFNlbGVjdGVkTWFwU2l6ZSgpO1xuICAgIGNvbnN0IHJvb21JZCA9IGdlbmVyYXRlUm9vbUlkKFwidHV0b3JpYWxcIik7XG4gICAgY29uc3QgdXJsID0gYnVpbGRSb29tVXJsKHJvb21JZCwgbmFtZSwgXCJ0dXRvcmlhbFwiLCBtYXBTaXplKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgfSk7XG5cbiAgZnJlZXBsYXlCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGVuc3VyZUNhbGxTaWduKCk7XG4gICAgY29uc3QgbWFwU2l6ZSA9IGdldFNlbGVjdGVkTWFwU2l6ZSgpO1xuICAgIGNvbnN0IHJvb21JZCA9IGdlbmVyYXRlUm9vbUlkKFwiZnJlZXBsYXlcIik7XG4gICAgY29uc3QgdXJsID0gYnVpbGRSb29tVXJsKHJvb21JZCwgbmFtZSwgXCJmcmVlcGxheVwiLCBtYXBTaXplKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGVkTWFwU2l6ZSgpOiB7IHc6IG51bWJlcjsgaDogbnVtYmVyIH0ge1xuICBjb25zdCBzZWxlY3RlZCA9IG1hcFNpemVTZWxlY3Q/LnZhbHVlIHx8IFwibWVkaXVtXCI7XG4gIHN3aXRjaCAoc2VsZWN0ZWQpIHtcbiAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgIHJldHVybiB7IHc6IDQwMDAsIGg6IDIyNTAgfTtcbiAgICBjYXNlIFwibWVkaXVtXCI6XG4gICAgICByZXR1cm4geyB3OiA4MDAwLCBoOiA0NTAwIH07XG4gICAgY2FzZSBcImxhcmdlXCI6XG4gICAgICByZXR1cm4geyB3OiAxNjAwMCwgaDogOTAwMCB9O1xuICAgIGNhc2UgXCJodWdlXCI6XG4gICAgICByZXR1cm4geyB3OiAzMjAwMCwgaDogMTgwMDAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHsgdzogODAwMCwgaDogNDUwMCB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUNhbGxTaWduKCk6IHN0cmluZyB7XG4gIGNvbnN0IGlucHV0TmFtZSA9IGNhbGxTaWduSW5wdXQgPyBjYWxsU2lnbklucHV0LnZhbHVlIDogXCJcIjtcbiAgY29uc3Qgc2FuaXRpemVkID0gc2FuaXRpemVDYWxsU2lnbihpbnB1dE5hbWUpO1xuICBpZiAoY2FsbFNpZ25JbnB1dCkge1xuICAgIGNhbGxTaWduSW5wdXQudmFsdWUgPSBzYW5pdGl6ZWQ7XG4gIH1cbiAgcGVyc2lzdENhbGxTaWduKHNhbml0aXplZCk7XG4gIHJldHVybiBzYW5pdGl6ZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbml0aWFsQ2FsbFNpZ24oKTogc3RyaW5nIHtcbiAgY29uc3QgZnJvbVF1ZXJ5ID0gc2FuaXRpemVDYWxsU2lnbihuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmdldChcIm5hbWVcIikpO1xuICBjb25zdCBzdG9yZWQgPSBzYW5pdGl6ZUNhbGxTaWduKHJlYWRTdG9yZWRDYWxsU2lnbigpKTtcbiAgaWYgKGZyb21RdWVyeSkge1xuICAgIGlmIChmcm9tUXVlcnkgIT09IHN0b3JlZCkge1xuICAgICAgcGVyc2lzdENhbGxTaWduKGZyb21RdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tUXVlcnk7XG4gIH1cbiAgcmV0dXJuIHN0b3JlZDtcbn1cblxuZnVuY3Rpb24gc2FuaXRpemVDYWxsU2lnbih2YWx1ZTogTWF5YmU8c3RyaW5nPik6IHN0cmluZyB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCB0cmltbWVkID0gdmFsdWUudHJpbSgpO1xuICBpZiAoIXRyaW1tZWQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICByZXR1cm4gdHJpbW1lZC5zbGljZSgwLCAyNCk7XG59XG5cbmZ1bmN0aW9uIHBlcnNpc3RDYWxsU2lnbihuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFNUT1JBR0VfS0VZKTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIC8qIGxvY2FsU3RvcmFnZSB1bmF2YWlsYWJsZTsgaWdub3JlICovXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZFN0b3JlZENhbGxTaWduKCk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSkgPz8gXCJcIjtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRSb29tVXJsKFxuICByb29tSWQ6IHN0cmluZyxcbiAgY2FsbFNpZ246IHN0cmluZyxcbiAgbW9kZT86IHN0cmluZyxcbiAgbWFwU2l6ZT86IHsgdzogbnVtYmVyOyBoOiBudW1iZXIgfSxcbiAgbWlzc2lvbklkPzogc3RyaW5nLFxuKTogc3RyaW5nIHtcbiAgbGV0IHVybCA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59Lz9yb29tPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHJvb21JZCl9YDtcbiAgaWYgKG1vZGUpIHtcbiAgICB1cmwgKz0gYCZtb2RlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KG1vZGUpfWA7XG4gIH1cbiAgaWYgKG1pc3Npb25JZCkge1xuICAgIHVybCArPSBgJm1pc3Npb249JHtlbmNvZGVVUklDb21wb25lbnQobWlzc2lvbklkKX1gO1xuICB9XG4gIGlmIChjYWxsU2lnbikge1xuICAgIHVybCArPSBgJm5hbWU9JHtlbmNvZGVVUklDb21wb25lbnQoY2FsbFNpZ24pfWA7XG4gIH1cbiAgaWYgKG1hcFNpemUpIHtcbiAgICB1cmwgKz0gYCZtYXBXPSR7bWFwU2l6ZS53fSZtYXBIPSR7bWFwU2l6ZS5ofWA7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVSb29tSWQocHJlZml4Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IHNsdWcgPSBcIlwiO1xuICB3aGlsZSAoc2x1Zy5sZW5ndGggPCA2KSB7XG4gICAgc2x1ZyA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIsIDgpO1xuICB9XG4gIGlmIChwcmVmaXgpIHtcbiAgICByZXR1cm4gYCR7cHJlZml4fS0ke3NsdWd9YDtcbiAgfVxuICByZXR1cm4gYHItJHtzbHVnfWA7XG59XG5cbmZ1bmN0aW9uIHNob3dTYXZlU3RhdHVzKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIXNhdmVTdGF0dXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc2F2ZVN0YXR1cy50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIGlmIChzYXZlU3RhdHVzVGltZXIgIT09IG51bGwpIHtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNhdmVTdGF0dXNUaW1lcik7XG4gIH1cbiAgc2F2ZVN0YXR1c1RpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmIChzYXZlU3RhdHVzKSB7XG4gICAgICBzYXZlU3RhdHVzLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gICAgc2F2ZVN0YXR1c1RpbWVyID0gbnVsbDtcbiAgfSwgMjAwMCk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7OztBQW1ITyxXQUFTLGlCQUEyQjtBQUN6QyxVQUFNLFdBQVcsb0JBQUksSUFBNkI7QUFDbEQsV0FBTztBQUFBLE1BQ0wsR0FBRyxPQUFPLFNBQVM7QUFDakIsWUFBSSxNQUFNLFNBQVMsSUFBSSxLQUFLO0FBQzVCLFlBQUksQ0FBQyxLQUFLO0FBQ1IsZ0JBQU0sb0JBQUksSUFBSTtBQUNkLG1CQUFTLElBQUksT0FBTyxHQUFHO0FBQUEsUUFDekI7QUFDQSxZQUFJLElBQUksT0FBTztBQUNmLGVBQU8sTUFBTSxJQUFLLE9BQU8sT0FBTztBQUFBLE1BQ2xDO0FBQUEsTUFDQSxLQUFLLE9BQWlCLFNBQW1CO0FBQ3ZDLGNBQU0sTUFBTSxTQUFTLElBQUksS0FBSztBQUM5QixZQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsRUFBRztBQUM1QixtQkFBVyxNQUFNLEtBQUs7QUFDcEIsY0FBSTtBQUNGLFlBQUMsR0FBaUMsT0FBTztBQUFBLFVBQzNDLFNBQVMsS0FBSztBQUNaLG9CQUFRLE1BQU0scUJBQXFCLEtBQUssV0FBVyxHQUFHO0FBQUEsVUFDeEQ7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBM0lBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ29STyxXQUFTLGNBQWMsT0FBdUI7QUFDbkQsUUFBSSxDQUFDLE9BQU8sU0FBUyxLQUFLLEdBQUc7QUFDM0IsYUFBTztBQUFBLElBQ1Q7QUFDQSxRQUFJLFNBQVMsRUFBRyxRQUFPO0FBQ3ZCLFFBQUksU0FBUyxFQUFHLFFBQU87QUFDdkIsV0FBTztBQUFBLEVBQ1Q7QUErRU8sV0FBUyxtQkFBbUIsU0FBd0I7QUFBQSxJQUN6RCxVQUFVO0FBQUEsSUFDVixVQUFVO0FBQUEsSUFDVixTQUFTO0FBQUEsRUFDWCxH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QUErQixHQUFHLEVBQUUsUUFBUSxvQkFBb0IsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxrQ0FBa0MsR0FBRyxFQUFFLFFBQVEsVUFBVSxVQUFVLElBQUksUUFBUSxHQUFHLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxXQUFXLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksMkJBQTJCLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxtQkFBbUIsU0FBUyxDQUFDLEVBQUUsUUFBUSxRQUFRLFVBQVUsR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLFNBQVMsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSx3Q0FBd0MsR0FBRyxFQUFFLFFBQVEsYUFBYSxVQUFVLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxZQUFZLHdDQUF3QyxHQUFHLEVBQUUsUUFBUSxlQUFlLFVBQVUsR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksbUNBQW1DLEdBQUcsRUFBRSxRQUFRLGFBQWEsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSx1Q0FBdUMsR0FBRyxFQUFFLFFBQVEsbUJBQW1CLFVBQVUsR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksa0RBQWtELEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSx3Q0FBd0MsR0FBRyxFQUFFLFFBQVEsV0FBVyxVQUFVLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxZQUFZLGtDQUFrQyxHQUFHLEVBQUUsUUFBUSxrQkFBa0IsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxpREFBaUQsR0FBRyxFQUFFLFFBQVEsaUJBQWlCLFVBQVUsSUFBSSxRQUFRLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxvQ0FBb0MsQ0FBQyxHQUFHLGNBQWMsQ0FB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UUFBUSxTQUFTLENBQUMsRUFBRSxRQUFRLGVBQWUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLGVBQWUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLGdCQUFnQixVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsZ0JBQWdCLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxhQUFhLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxlQUFlLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxjQUFjLFVBQVUsR0FBRyxHQUFHLEVBQUUsUUFBUSxnQkFBZ0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxHQUFHLEdBQUcsRUFBRSxRQUFRLGVBQWUsVUFBVSxHQUFHLEdBQUcsRUFBRSxRQUFRLGFBQWEsVUFBVSxHQUFHLEdBQUcsRUFBRSxRQUFRLGlCQUFpQixVQUFVLEdBQUcsR0FBRyxFQUFFLFFBQVEsaUJBQWlCLFVBQVUsR0FBRyxHQUFHLEVBQUUsUUFBUSxlQUFlLFVBQVUsR0FBRyxHQUFHLEVBQUUsUUFBUSxlQUFlLFVBQVUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsU0FBUyxTQUFTLENBQUMsRUFBRSxRQUFRLGtCQUFrQixVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsa0JBQWtCLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxrQkFBa0IsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsd0JBQXdCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsUUFBUSxVQUFVLEdBQUcsUUFBUSxHQUFHLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxXQUFXLFVBQVUsR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksZ0NBQWdDLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSx1QkFBdUIsU0FBUyxDQUFDLEVBQUUsUUFBUSxRQUFRLFVBQVUsR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLFNBQVMsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSw0Q0FBNEMsR0FBRyxFQUFFLFFBQVEsV0FBVyxVQUFVLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxZQUFZLCtCQUErQixHQUFHLEVBQUUsUUFBUSxrQkFBa0IsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSx5REFBeUQsR0FBRyxFQUFFLFFBQVEsaUJBQWlCLFVBQVUsR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLGNBQWMsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxvQ0FBb0MsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxFQUFFLFFBQVEscUJBQXFCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsU0FBUyxVQUFVLEdBQUcsUUFBUSxHQUFHLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxPQUFPLFVBQVUsR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsNEJBQTRCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsUUFBUSxVQUFVLEdBQUcsUUFBUSxHQUFHLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxVQUFVLFVBQVUsR0FBRyxRQUFRLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLFdBQVcsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxvQ0FBb0MsQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLDBCQUEwQixTQUFTLENBQUMsRUFBRSxRQUFRLFFBQVEsVUFBVSxHQUFHLFFBQVEsR0FBRyxTQUFTLEVBQUUsR0FBRyxFQUFFLFFBQVEsVUFBVSxVQUFVLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxZQUFZLHlDQUF5QyxHQUFHLEVBQUUsUUFBUSxXQUFXLFVBQVUsR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksa0NBQWtD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QUFRLElBQUksU0FBUyxHQUFHLFlBQVksd0NBQXdDLFdBQVcsRUFBRSxhQUFhLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxVQUFVLFdBQVcsSUFBSSxHQUFHLEVBQUUsU0FBUyxRQUFRLFdBQVcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSwyQkFBMkIsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSxxREFBcUQsV0FBVyxFQUFFLGFBQWEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxTQUFTLFlBQVksV0FBVyxJQUFJLEdBQUcsRUFBRSxTQUFTLFVBQVUsV0FBVyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLG1CQUFtQixVQUFVLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxZQUFZLDhDQUE4QyxXQUFXLEVBQUUsYUFBYSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLFNBQVMsUUFBUSxXQUFXLElBQUksR0FBRyxFQUFFLFNBQVMsVUFBVSxXQUFXLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsb0JBQW9CLFVBQVUsR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFlBQVksK0NBQStDLFdBQVcsRUFBRSxhQUFhLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxtQkFBbUIsV0FBVyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLGVBQWUsVUFBVSxHQUFHLFFBQVEsSUFBSSxTQUFTLEdBQUcsWUFBWSwwQ0FBMEMsV0FBVyxFQUFFLGFBQWEsR0FBRyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLFNBQVMsc0JBQXNCLFdBQVcsSUFBSSxHQUFHLEVBQUUsU0FBUyxTQUFTLFdBQVcsSUFBSSxDQUFDLEVBQUUsRUFBRSxH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QUFtQixRQUFRLENBQUM7QUFBQSxRQUM5QztBQUNBLFlBQUksU0FBUztBQUNYLGlCQUFPLFNBQVMsUUFBUSxDQUFDLFNBQVMsUUFBUSxDQUFDO0FBQUEsUUFDN0M7QUFDQSxlQUFPO0FBQUEsTUFDVDtBQUVBLGVBQVMsZUFBZSxRQUF5QjtBQUMvQyxZQUFJLE9BQU87QUFDWCxlQUFPLEtBQUssU0FBUyxHQUFHO0FBQ3RCLGlCQUFPLEtBQUssT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQUEsUUFDOUM7QUFDQSxZQUFJLFFBQVE7QUFDVixpQkFBTyxHQUFHLE1BQU0sSUFBSSxJQUFJO0FBQUEsUUFDMUI7QUFDQSxlQUFPLEtBQUssSUFBSTtBQUFBLE1BQ2xCO0FBRUEsZUFBUyxlQUFlLFNBQXVCO0FBQzdDLFlBQUksQ0FBQyxZQUFZO0FBQ2Y7QUFBQSxRQUNGO0FBQ0EsbUJBQVcsY0FBYztBQUN6QixZQUFJLG9CQUFvQixNQUFNO0FBQzVCLGlCQUFPLGFBQWEsZUFBZTtBQUFBLFFBQ3JDO0FBQ0EsMEJBQWtCLE9BQU8sV0FBVyxNQUFNO0FBQ3hDLGNBQUksWUFBWTtBQUNkLHVCQUFXLGNBQWM7QUFBQSxVQUMzQjtBQUNBLDRCQUFrQjtBQUFBLFFBQ3BCLEdBQUcsR0FBSTtBQUFBLE1BQ1Q7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogWyJTY2FsYXJUeXBlIiwgIl9hIiwgIklNUExJQ0lUIiwgImJvb3QiLCAiaXNNZXNzYWdlIiwgIm1lc3NhZ2VEZXNjIiwgIldpcmVUeXBlIiwgIm1lc3NhZ2VEZXNjIiwgIm1lc3NhZ2VEZXNjIiwgIklNUExJQ0lUIiwgIkVESVRJT05fUFJPVE8zIiwgIkVESVRJT05fUFJPVE8yIiwgIm1lc3NhZ2VEZXNjIiwgIkxFR0FDWV9SRVFVSVJFRCIsICJFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUiLCAiRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSIsICJGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbCIsICJGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUiLCAiRmllbGRPcHRpb25zX0NUeXBlIiwgIkZpZWxkT3B0aW9uc19KU1R5cGUiLCAiRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbiIsICJGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZSIsICJNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWwiLCAiRmVhdHVyZVNldF9WaXNpYmlsaXR5RmVhdHVyZV9EZWZhdWx0U3ltYm9sVmlzaWJpbGl0eSIsICJGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UiLCAiRmVhdHVyZVNldF9FbnVtVHlwZSIsICJGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZyIsICJGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uIiwgIkZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nIiwgIkZlYXR1cmVTZXRfSnNvbkZvcm1hdCIsICJGZWF0dXJlU2V0X0VuZm9yY2VOYW1pbmdTdHlsZSIsICJHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljIiwgIkVkaXRpb24iLCAiU3ltYm9sVmlzaWJpbGl0eSIsICJpbml0X3NjYWxhciIsICJpbml0X3NjYWxhciIsICJpbml0X3R5cGVzIiwgImluaXRfdHlwZXMiLCAiX2EiLCAiX2IiLCAiX2MiXQp9Cg==
